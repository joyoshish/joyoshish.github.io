<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://joyoshish.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://joyoshish.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-04-11T07:27:15+00:00</updated><id>https://joyoshish.github.io/feed.xml</id><title type="html">blank</title><subtitle>Joyoshish&apos;s Digital Space </subtitle><entry><title type="html">Probability &amp;amp; Statistics for Data Science - Bayesian Thinking, MLE, MAP &amp;amp; Inference</title><link href="https://joyoshish.github.io/blog/2022/mathforml-probstat3/" rel="alternate" type="text/html" title="Probability &amp;amp; Statistics for Data Science - Bayesian Thinking, MLE, MAP &amp;amp; Inference"/><published>2022-06-10T00:00:00+00:00</published><updated>2022-06-10T00:00:00+00:00</updated><id>https://joyoshish.github.io/blog/2022/mathforml-probstat3</id><content type="html" xml:base="https://joyoshish.github.io/blog/2022/mathforml-probstat3/"><![CDATA[<figure style="text-align: center;"> <img src="https://upload.wikimedia.org/wikipedia/commons/b/bf/Winslow_Homer_-_The_Gulf_Stream_-_Metropolitan_Museum_of_Art.jpg" alt="The Gulf Stream (painting)" style="max-width: 100%; height: auto;"/> <figcaption><em>The Gulf Stream – Winslow Homer (1899)</em></figcaption> </figure> <p>In data science, where uncertainty is not an exception but the norm, reasoning under uncertainty becomes a core necessity. While traditional frequentist approaches have long provided a framework for estimating parameters and testing hypotheses, the Bayesian paradigm brings an alternative—and in many ways, more intuitive—framework to model beliefs, incorporate prior knowledge, and update our understanding as new data arrives.</p> <p>Bayesian inference treats unknown parameters as random variables and uses probability distributions to express uncertainty. This philosophical shift opens the door to a rich array of techniques and tools that power everything from spam filters to hyperparameter tuning in deep learning.</p> <hr/> <h2 id="bayes-theorem-and-conditional-probability">Bayes’ Theorem and Conditional Probability</h2> <p>Bayes’ Theorem is a foundational result in probability theory and statistics that relates conditional probabilities. Given two events \(A\) and \(B\) with \(P(B) &gt; 0\), Bayes’ Theorem states:</p> \[P(A \mid B) = \frac{P(B \mid A) \cdot P(A)}{P(B)}\] <p>In this formulation:</p> <ul> <li>\(P(A)\) is the prior probability of \(A\), reflecting our initial belief before observing \(B\).</li> <li>\(P(B \mid A)\) is the likelihood of observing \(B\) given \(A\).</li> <li>\(P(B)\) is the marginal probability of \(B\), integrated over all possibilities.</li> <li>\(P(A \mid B)\) is the posterior probability: our updated belief about \(A\) after observing \(B\).</li> </ul> <p>This theorem is derived directly from the definition of conditional probability:</p> \[P(A \cap B) = P(A \mid B) P(B) = P(B \mid A) P(A)\] <p>Rearranging gives:</p> \[P(A \mid B) = \frac{P(B \mid A) P(A)}{P(B)}\] <p>In Bayesian statistics, this result is used to update beliefs about unknown parameters in light of new data. For continuous parameters, the theorem generalizes to:</p> \[P(\theta \mid D) = \frac{P(D \mid \theta) P(\theta)}{P(D)}\] <p>Where:</p> <ul> <li>\(\theta\) is a parameter.</li> <li>\(D\) is observed data.</li> <li>\(P(\theta)\) is the prior distribution.</li> <li>\(P(D \mid \theta)\) is the likelihood.</li> <li>\(P(\theta \mid D)\) is the posterior distribution.</li> <li>\(P(D) = \int P(D \mid \theta) P(\theta) d\theta\) is the evidence or marginal likelihood.</li> </ul> <hr/> <h3 id="example-diagnostic-testing">Example: Diagnostic Testing</h3> <p>Suppose a rare disease affects 1% of the population. A diagnostic test has:</p> <ul> <li>Sensitivity (true positive rate): 99%</li> <li>Specificity (true negative rate): 95%</li> </ul> <p>We want to compute the probability that a person has the disease given a positive test result.</p> <p>Let \(D\) denote having the disease, and \(T\) denote a positive test. Then:</p> \[P(D \mid T) = \frac{P(T \mid D) P(D)}{P(T)} = \frac{0.99 \cdot 0.01}{0.99 \cdot 0.01 + 0.05 \cdot 0.99} \approx 0.167\] <p>So despite a highly accurate test, the probability of truly having the disease given a positive test result is only about 16.7%. This demonstrates the importance of the prior (base rate) in interpreting diagnostic results.</p> <hr/> <h3 id="python-code-for-the-example">Python Code for the Example</h3> <pre><code class="language-Python"># Bayesian disease diagnosis
P_disease = 0.01
P_pos_given_disease = 0.99
P_pos_given_no_disease = 0.05

P_no_disease = 1 - P_disease
P_pos = P_pos_given_disease * P_disease + P_pos_given_no_disease * P_no_disease
P_disease_given_pos = (P_pos_given_disease * P_disease) / P_pos
print(f"Posterior probability: {P_disease_given_pos:.4f}")
</code></pre> <hr/> <h3 id="visualization">Visualization</h3> <p>The following visualization generalizes the example by showing how the posterior probability changes as the prior (disease prevalence) varies.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>

<span class="n">prior_probs</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">linspace</span><span class="p">(</span><span class="mf">0.001</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
<span class="n">sensitivity</span> <span class="o">=</span> <span class="mf">0.99</span>
<span class="n">specificity</span> <span class="o">=</span> <span class="mf">0.95</span>
<span class="n">false_positive</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">specificity</span>

<span class="n">posterior_probs</span> <span class="o">=</span> <span class="p">(</span><span class="n">sensitivity</span> <span class="o">*</span> <span class="n">prior_probs</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span>
    <span class="n">sensitivity</span> <span class="o">*</span> <span class="n">prior_probs</span> <span class="o">+</span> <span class="n">false_positive</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">prior_probs</span><span class="p">))</span>

<span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">prior_probs</span><span class="p">,</span> <span class="n">posterior_probs</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">"</span><span class="s">P(Disease | Positive Test)</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Prior Probability of Disease</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">ylabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Posterior Probability</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">"</span><span class="s">Bayesian Update: Disease Diagnosis</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">grid</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">legend</span><span class="p">()</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div> <div style="text-align: center; margin: 2rem 0;"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/probstat3_2-480.webp 480w,/assets/img/probstat3_2-800.webp 800w,/assets/img/probstat3_2-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/probstat3_2.png" class="img-fluid rounded shadow-sm" width="100%" height="auto" alt="Posterior Probability Visualization" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p style="font-style: italic; font-size: 0.95rem; color: #666; margin-top: 0.5rem;"> Figure: Posterior Probability vs Prior for Varying Specificity </p> </div> <p>This plot illustrates how the posterior probability of having a disease—after receiving a <strong>positive test result</strong>—varies based on two factors:</p> <ul> <li>The <strong>prior probability</strong> of the disease (x-axis), which corresponds to its prevalence in the population,</li> <li>And the <strong>specificity</strong> of the diagnostic test, or how well the test avoids false positives (multiple curves).</li> </ul> <p>All curves assume a fixed <strong>sensitivity</strong> of 99% (i.e., the test correctly identifies almost all diseased cases).</p> <ul> <li> <p>When the <strong>disease is rare</strong> (e.g., prior probability below 1%), even a <strong>highly accurate test may produce a low posterior</strong>. This is because <strong>false positives dominate</strong> the marginal probability of a positive result at low prevalence.</p> </li> <li> <p>As the <strong>prior probability increases</strong> (e.g., testing a high-risk group), the <strong>posterior probability increases sharply</strong>. This reflects how more confidence in the disease’s presence in the population strengthens the update from a positive result.</p> </li> <li> <p>The <strong>higher the test specificity</strong>, the steeper the curve—and the stronger the belief update. With 99% specificity, a positive test leads to much higher posterior probabilities compared to 90% specificity, especially when the prior is low.</p> </li> </ul> <hr/> <h3 id="applications-in-data-science">Applications in Data Science</h3> <p>Bayes’ Theorem is a pillar in many areas of applied machine learning and data science:</p> <ul> <li><strong>Naive Bayes Classifiers</strong>: Used in email spam detection, text classification, and sentiment analysis.</li> <li><strong>Medical Diagnostic Systems</strong>: Estimate disease probabilities as symptoms and test results accumulate.</li> <li><strong>Bayesian A/B Testing</strong>: Provides posterior distributions over conversion rates instead of binary conclusions.</li> <li><strong>Credit Scoring and Fraud Detection</strong>: Updates risk estimates in real-time based on user behavior.</li> </ul> <p>It provides a mathematically sound, interpretable, and adaptive approach to reasoning and decision-making under uncertainty.</p> <h2 id="prior-likelihood-and-posterior">Prior, Likelihood, and Posterior</h2> <p>In the Bayesian framework, statistical inference is built on the principle of updating <strong>beliefs about parameters</strong> based on observed data. This belief is represented mathematically using probability distributions and updated using <strong>Bayes’ Theorem</strong>. The process relies on three central components:</p> <ul> <li>The <strong>prior</strong>: our belief about the parameter before seeing data,</li> <li>The <strong>likelihood</strong>: the probability of observing the data given a specific value of the parameter,</li> <li>The <strong>posterior</strong>: the revised belief after combining the prior and the likelihood.</li> </ul> <p>Let us denote the unknown parameter by \(\theta\), and the observed data by \(D = \{x_1, x_2, \dots, x_n\}\). Then:</p> \[P(\theta \mid D) = \frac{P(D \mid \theta) \cdot P(\theta)}{P(D)}\] <p>This is Bayes’ Theorem applied to parameter estimation, where:</p> <ul> <li>\(P(\theta)\) is the <strong>prior</strong> distribution,</li> <li>\(P(D \mid \theta)\) is the <strong>likelihood</strong>,</li> <li>\(P(D)\) is the <strong>marginal likelihood</strong> or <strong>evidence</strong>,</li> <li>\(P(\theta \mid D)\) is the <strong>posterior</strong>.</li> </ul> <hr/> <h3 id="prior-distribution">Prior Distribution</h3> <p>The <strong>prior distribution</strong> \(P(\theta)\) expresses our belief or uncertainty about the parameter \(\theta\) before observing any data. Mathematically, the prior is a probability density function (pdf) over the domain of \(\theta\):</p> \[\int P(\theta) \, d\theta = 1\] <p>This prior may be:</p> <ul> <li><strong>Informative</strong>: When strong domain knowledge is available.</li> <li><strong>Uninformative or weakly informative</strong>: To allow data to dominate inference.</li> <li><strong>Subjective</strong>: Based on expert intuition or empirical insight.</li> </ul> <p>The specific form of the prior depends on the nature of the parameter:</p> <h4 id="-beta-prior-for-probabilities-theta-in-0-1">▸ Beta Prior (for probabilities \(\theta \in [0, 1]\)):</h4> \[P(\theta) = \frac{1}{B(\alpha, \beta)} \theta^{\alpha - 1}(1 - \theta)^{\beta - 1}\] <p>Where \(\alpha, \beta &gt; 0\) are shape parameters, and \(B(\alpha, \beta)\) is the <strong>Beta function</strong>:</p> \[B(\alpha, \beta) = \int_0^1 \theta^{\alpha - 1} (1 - \theta)^{\beta - 1} \, d\theta\] <p>This distribution is commonly used as a prior for binary outcomes and proportions. Its mean and variance are:</p> \[\mathbb{E}[\theta] = \frac{\alpha}{\alpha + \beta}, \quad \text{Var}(\theta) = \frac{\alpha \beta}{(\alpha + \beta)^2 (\alpha + \beta + 1)}\] <h4 id="-gaussian-prior-for-real-valued-theta">▸ Gaussian Prior (for real-valued \(\theta\)):</h4> \[P(\theta) = \frac{1}{\sqrt{2\pi \sigma^2}} \exp\left( -\frac{(\theta - \mu)^2}{2\sigma^2} \right)\] <p>Used in models like Bayesian linear regression or Gaussian processes, this prior expresses belief that \(\theta\) is centered around \(\mu\) with spread controlled by variance \(\sigma^2\).</p> <h4 id="-uniform-prior-non-informative">▸ Uniform Prior (non-informative):</h4> <p>If nothing is known about \(\theta\) within an interval \([a, b]\):</p> \[P(\theta) = \frac{1}{b - a}, \quad \text{for } \theta \in [a, b]\] <p>This flat prior assumes all values in \([a, b]\) are equally likely.</p> <hr/> <h3 id="likelihood-function">Likelihood Function</h3> <p>The <strong>likelihood function</strong> \(P(D \mid \theta)\) represents how plausible the observed data is for different values of the parameter \(\theta\). While the prior is independent of the data and reflects belief, the likelihood is derived from a <strong>data-generating model</strong>—a statistical assumption about how the data arises conditional on \(\theta\).</p> <p>Formally, if the data consists of independent and identically distributed (i.i.d.) samples:</p> \[D = \{x_1, x_2, \dots, x_n\}, \quad x_i \sim P(x \mid \theta)\] <p>Then the likelihood becomes:</p> \[P(D \mid \theta) = \prod_{i=1}^n P(x_i \mid \theta)\] <p>This is <strong>not</strong> a probability distribution over \(\theta\), but a function of \(\theta\) with data held fixed.</p> <hr/> <h4 id="-example-bernoullibinomial-likelihood">▸ Example: Bernoulli/Binomial Likelihood</h4> <p>Suppose each observation is a binary outcome (success/failure), modeled as a Bernoulli trial:</p> \[x_i \sim \text{Bernoulli}(\theta), \quad \text{so } P(x_i \mid \theta) = \theta^{x_i} (1 - \theta)^{1 - x_i}\] <p>If we observe \(k\) successes in \(n\) trials, then:</p> \[P(D \mid \theta) = \prod_{i=1}^n \theta^{x_i} (1 - \theta)^{1 - x_i} = \theta^k (1 - \theta)^{n - k}\] <p>This expression is the <strong>likelihood function</strong>, which evaluates how consistent various \(\theta\) values are with the observed success/failure count.</p> <hr/> <h3 id="posterior-distribution">Posterior Distribution</h3> <p>The <strong>posterior</strong> distribution \(P(\theta \mid D)\) combines the <strong>prior</strong> and <strong>likelihood</strong> using Bayes’ Theorem:</p> \[P(\theta \mid D) = \frac{P(D \mid \theta) \cdot P(\theta)}{P(D)}\] <p>Where the denominator is the <strong>marginal likelihood</strong> or <strong>evidence</strong>, ensuring that the posterior integrates to 1:</p> \[P(D) = \int P(D \mid \theta) \cdot P(\theta) \, d\theta\] <hr/> <h4 id="-beta-prior--binomial-likelihood">▸ Beta Prior + Binomial Likelihood</h4> <p>Let’s assume:</p> <ul> <li>Prior: \(P(\theta) = \text{Beta}(\alpha, \beta)\)</li> <li>Likelihood: \(P(D \mid \theta) = \theta^k (1 - \theta)^{n - k}\)</li> </ul> <p>Then:</p> <p><strong>Unnormalized posterior</strong>:</p> \[P(\theta \mid D) \propto P(D \mid \theta) \cdot P(\theta) \\ \propto \theta^k (1 - \theta)^{n - k} \cdot \theta^{\alpha - 1}(1 - \theta)^{\beta - 1} \\ = \theta^{k + \alpha - 1}(1 - \theta)^{n - k + \beta - 1}\] <p>This is the kernel of a <strong>Beta distribution</strong>:</p> \[P(\theta \mid D) = \text{Beta}(\alpha + k, \beta + n - k)\] <p>This result highlights the convenience of <strong>conjugate priors</strong>: the prior and posterior belong to the same family, simplifying inference.</p> <hr/> <h4 id="-posterior-summary-statistics---beta-distribution">▸ Posterior Summary Statistics - Beta Distribution</h4> <p>Based on the posterior:</p> \[\theta \mid D \sim \text{Beta}(\alpha + k, \beta + n - k)\] <p>where:</p> <ul> <li>\(\alpha\) and \(\beta\) are prior parameters,</li> <li>\(k\) is the number of observed successes,</li> <li>\(n\) is the total number of observations.</li> </ul> <p>We derive:</p> <h5 id="1-posterior-mean">1. <strong>Posterior Mean</strong></h5> <p>If:</p> \[\theta \sim \text{Beta}(a, b)\] <p>then the mean is given by:</p> \[\mathbb{E}[\theta] = \frac{a}{a + b}\] <p>In our case, the posterior parameters are:</p> <ul> <li> \[a = \alpha + k\] </li> <li> \[b = \beta + n - k\] </li> </ul> <p>So the <strong>posterior mean</strong> is:</p> \[\mathbb{E}[\theta \mid D] = \frac{\alpha + k}{\alpha + \beta + n}\] <p>This is a convex combination of the prior mean and the observed frequency:</p> <ul> <li>Prior mean: \(\frac{\alpha}{\alpha + \beta}\)</li> <li>Observed frequency: \(\frac{k}{n}\)</li> </ul> <p>As \(n\) increases, the posterior mean converges toward the sample mean \(k/n\), and the influence of the prior diminishes.</p> <hr/> <h5 id="2-posterior-variance">2. <strong>Posterior Variance</strong></h5> <p>The variance of a Beta distribution \(\text{Beta}(a, b)\) is:</p> \[\text{Var}[\theta] = \frac{ab}{(a + b)^2 (a + b + 1)}\] <p>Apply this to the posterior:</p> <ul> <li> \[a = \alpha + k\] </li> <li> \[b = \beta + n - k\] </li> </ul> <p>Then:</p> \[\text{Var}[\theta \mid D] = \frac{(\alpha + k)(\beta + n - k)}{(\alpha + \beta + n)^2 (\alpha + \beta + n + 1)}\] <p>This variance shrinks as \(n\) increases — reflecting increased confidence in our estimate of \(\theta\) after observing more data.</p> <hr/> <h5 id="3-map-estimate-posterior-mode">3. <strong>MAP Estimate (Posterior Mode)</strong></h5> <p>The <strong>mode</strong> (maximum a posteriori estimate) of a Beta distribution \(\text{Beta}(a, b)\) is given by:</p> \[\theta_{\text{MAP}} = \frac{a - 1}{a + b - 2}, \quad \text{for } a &gt; 1 \text{ and } b &gt; 1\] <p>Apply to the posterior:</p> <ul> <li> \[a = \alpha + k\] </li> <li> \[b = \beta + n - k\] </li> </ul> <p>So:</p> \[\hat{\theta}_{\text{MAP}} = \frac{\alpha + k - 1}{\alpha + \beta + n - 2}\] <p>This estimate corresponds to the <strong>mode</strong> of the posterior distribution, and will differ from the mean unless the distribution is symmetric.</p> <hr/> <p>These quantities are critical in:</p> <ul> <li>Computing expected outcomes and uncertainty,</li> <li>Constructing Bayesian credible intervals,</li> <li>Making point predictions (e.g., MAP for classification),</li> <li>Visualizing posterior summaries.</li> </ul> <hr/> <h4 id="-posterior-derivation-gaussian-likelihood-and-gaussian-prior">▸ Posterior Derivation: Gaussian Likelihood and Gaussian Prior</h4> <p>In many data science tasks, we assume that the observed data is generated from a continuous process with <strong>Gaussian noise</strong>, and that our prior belief about the parameter is also normally distributed. This leads to one of the most well-known conjugate pairs: <strong>Gaussian-Gaussian</strong> inference (both the <strong>likelihood and prior are Gaussian</strong> — one of the most important and elegant conjugate models in Bayesian inference).</p> <p>Let us assume:</p> <ul> <li>The parameter of interest is a real-valued scalar \(\theta\).</li> <li> <p>The observed data \(D = \{x_1, x_2, \dots, x_n\}\) are i.i.d. samples from:</p> \[x_i \mid \theta \sim \mathcal{N}(\theta, \sigma^2)\] <p>where \(\sigma^2\) is known (observation noise variance).</p> </li> <li> <p>The prior belief about \(\theta\) is:</p> \[\theta \sim \mathcal{N}(\mu_0, \tau^2)\] <p>where \(\mu_0\) is the prior mean, and \(\tau^2\) is the prior variance.</p> </li> </ul> <hr/> <h5 id="step-1-likelihood-function">Step 1: Likelihood Function</h5> <p>Given \(n\) i.i.d. observations \(x_1, ..., x_n\), the likelihood of the data given \(\theta\) is:</p> \[P(D \mid \theta) = \prod_{i=1}^n \frac{1}{\sqrt{2\pi\sigma^2}} \exp\left( -\frac{(x_i - \theta)^2}{2\sigma^2} \right)\] <p>This is the product of Gaussians with the same mean \(\theta\) and fixed variance \(\sigma^2\).</p> <p>Taking the log-likelihood:</p> \[\log P(D \mid \theta) = -\frac{n}{2} \log(2\pi\sigma^2) - \frac{1}{2\sigma^2} \sum_{i=1}^n (x_i - \theta)^2\] <p>Let \(\bar{x} = \frac{1}{n} \sum x_i\). Then:</p> \[\sum (x_i - \theta)^2 = \sum (x_i - \bar{x} + \bar{x} - \theta)^2 = \sum (x_i - \bar{x})^2 + n(\theta - \bar{x})^2\] <p>So the likelihood becomes:</p> \[P(D \mid \theta) \propto \exp\left( -\frac{n}{2\sigma^2} (\theta - \bar{x})^2 \right)\] <p>Which shows that the likelihood (up to normalization) is itself Gaussian:</p> \[\theta \mid D \propto \mathcal{N}(\bar{x}, \sigma^2 / n)\] <hr/> <h5 id="step-2-prior">Step 2: Prior</h5> <p>The prior is:</p> \[P(\theta) = \frac{1}{\sqrt{2\pi\tau^2}} \exp\left( -\frac{(\theta - \mu_0)^2}{2\tau^2} \right)\] <hr/> <h5 id="step-3-posterior-derivation">Step 3: Posterior Derivation</h5> <p>Bayes’ Theorem gives:</p> \[P(\theta \mid D) \propto P(D \mid \theta) \cdot P(\theta)\] <p>Since both terms are exponentials of quadratics in \(\theta\), their product is proportional to another Gaussian:</p> <p>Let’s expand both exponentials:</p> \[\log P(\theta \mid D) \propto -\frac{n}{2\sigma^2} (\theta - \bar{x})^2 - \frac{1}{2\tau^2} (\theta - \mu_0)^2\] <p>Combine terms:</p> \[\log P(\theta \mid D) \propto -\frac{1}{2} \left[ \left( \frac{n}{\sigma^2} + \frac{1}{\tau^2} \right) \theta^2 - 2 \left( \frac{n\bar{x}}{\sigma^2} + \frac{\mu_0}{\tau^2} \right) \theta \right]\] <p>This is the kernel of a Gaussian distribution with:</p> <h6 id="-posterior-mean">▸ Posterior Mean:</h6> \[\mu_n = \frac{\frac{n}{\sigma^2} \bar{x} + \frac{1}{\tau^2} \mu_0}{\frac{n}{\sigma^2} + \frac{1}{\tau^2}}\] <h6 id="-posterior-variance">▸ Posterior Variance:</h6> \[\sigma_n^2 = \left( \frac{n}{\sigma^2} + \frac{1}{\tau^2} \right)^{-1}\] <hr/> <h5 id="interpretation">Interpretation</h5> <ul> <li>The <strong>posterior mean</strong> \(\mu_n\) is a <strong>weighted average</strong> of the prior mean and sample mean, where the weights are proportional to their respective precisions (inverse variances).</li> <li>The <strong>posterior variance</strong> \(\sigma_n^2\) is always <strong>smaller</strong> than either the prior or the sample variance alone, reflecting increased certainty after combining information.</li> </ul> <hr/> <p>This Gaussian-Gaussian model forms the mathematical foundation of many applications:</p> <ul> <li><strong>Bayesian Linear Regression</strong>: Each weight in a regression model has a Gaussian prior and is updated analytically with Gaussian likelihoods. This allows regularization and closed-form uncertainty quantification.</li> <li><strong>Bayesian Updating for Streaming Data</strong>: In online learning, new data incrementally shifts the posterior, making it a new prior — enabling scalable, memory-efficient learning.</li> <li><strong>Sensor Fusion</strong>: In robotics and control systems, Bayesian Gaussian updates allow combining noisy measurements from multiple sensors to produce more confident estimates.</li> <li><strong>Kalman Filters</strong>: A specialized form of recursive Bayesian estimation based on Gaussian distributions used in tracking and forecasting.</li> </ul> <hr/> <p>Stepping back from this specific case, the same pattern—prior, likelihood, and posterior—runs through the entire Bayesian approach.</p> <ul> <li>The <strong>prior</strong> captures what we know (or assume) before seeing any data.</li> <li>The <strong>likelihood</strong> tells us how compatible the data is with different parameter values.</li> <li>The <strong>posterior</strong> combines both to give us a data-informed belief about the parameter.</li> </ul> <p>In data science, this allows:</p> <ul> <li><strong>Incorporating prior knowledge</strong> (from previous experiments, expert belief, or regulatory constraints),</li> <li><strong>Updating beliefs incrementally</strong> as more data becomes available,</li> <li><strong>Quantifying uncertainty</strong> through full distributions instead of point estimates.</li> </ul> <p>This foundation underlies a wide range of Bayesian models — from Naive Bayes classifiers and probabilistic graphical models to Gaussian Processes and Bayesian neural networks.</p> <hr/> <hr/> <h3 id="example-inferring-coin-bias">Example: Inferring Coin Bias</h3> <p>Let us assume we want to estimate the bias \(\theta\) (probability of heads) of a coin. Suppose we observe 10 tosses and get 6 heads and 4 tails. This is a Binomial process.</p> <ul> <li><strong>Prior</strong>: Assume \(\theta \sim \text{Beta}(2, 2)\) — a weakly informative prior reflecting fairness.</li> <li> <p><strong>Likelihood</strong>: For 6 heads out of 10 tosses,</p> \[P(D \mid \theta) = \binom{10}{6} \theta^6 (1 - \theta)^4\] </li> <li> <p><strong>Posterior</strong>: Since the Beta prior is conjugate to the Binomial likelihood, the posterior is:</p> \[\theta \mid D \sim \text{Beta}(2 + 6, 2 + 4) = \text{Beta}(8, 6)\] </li> </ul> <p>This posterior reflects our updated belief about the coin’s bias after observing the data.</p> <hr/> <h3 id="visualization-1">Visualization</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">from</span> <span class="n">scipy.stats</span> <span class="kn">import</span> <span class="n">beta</span>

<span class="c1"># Grid of theta values
</span><span class="n">theta</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">200</span><span class="p">)</span>

<span class="c1"># Prior: Beta(2, 2)
</span><span class="n">prior</span> <span class="o">=</span> <span class="n">beta</span><span class="p">.</span><span class="nf">pdf</span><span class="p">(</span><span class="n">theta</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>

<span class="c1"># Likelihood (up to proportionality): theta^6 * (1 - theta)^4
</span><span class="n">likelihood</span> <span class="o">=</span> <span class="n">theta</span><span class="o">**</span><span class="mi">6</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">theta</span><span class="p">)</span><span class="o">**</span><span class="mi">4</span>
<span class="n">likelihood</span> <span class="o">/=</span> <span class="n">np</span><span class="p">.</span><span class="nf">trapz</span><span class="p">(</span><span class="n">likelihood</span><span class="p">,</span> <span class="n">theta</span><span class="p">)</span>  <span class="c1"># Normalize for plotting
</span>
<span class="c1"># Posterior: Beta(8, 6)
</span><span class="n">posterior</span> <span class="o">=</span> <span class="n">beta</span><span class="p">.</span><span class="nf">pdf</span><span class="p">(</span><span class="n">theta</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">6</span><span class="p">)</span>

<span class="c1"># Plotting
</span><span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">theta</span><span class="p">,</span> <span class="n">prior</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">"</span><span class="s">Prior: Beta(2, 2)</span><span class="sh">"</span><span class="p">,</span> <span class="n">linestyle</span><span class="o">=</span><span class="sh">"</span><span class="s">--</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">theta</span><span class="p">,</span> <span class="n">likelihood</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">"</span><span class="s">Likelihood (scaled)</span><span class="sh">"</span><span class="p">,</span> <span class="n">linestyle</span><span class="o">=</span><span class="sh">"</span><span class="s">:</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">theta</span><span class="p">,</span> <span class="n">posterior</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">"</span><span class="s">Posterior: Beta(8, 6)</span><span class="sh">"</span><span class="p">,</span> <span class="n">linewidth</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">"</span><span class="s">Bayesian Update: Estimating Coin Bias</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="sh">"</span><span class="s">θ (Probability of Heads)</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">ylabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Density</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">legend</span><span class="p">()</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">grid</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">tight_layout</span><span class="p">()</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div> <div style="text-align: center; margin: 2rem 0;"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/probstat3_3-480.webp 480w,/assets/img/probstat3_3-800.webp 800w,/assets/img/probstat3_3-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/probstat3_3.png" class="img-fluid rounded shadow-sm" width="100%" height="auto" alt="Bayesian Update: Estimating Coin Bias" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p style="font-style: italic; font-size: 0.95rem; color: #666; margin-top: 0.5rem;"> Figure: Bayesian Update: Estimating Coin Bias </p> </div> <p>This visualization shows how the prior belief and the observed data interact to form a posterior that reflects both — centered slightly above 0.5 due to the 6 observed heads.</p> <hr/> <h3 id="applications-in-data-science-1">Applications in Data Science</h3> <p>This prior-likelihood-posterior triad is a universal framework used across many data science workflows:</p> <h4 id="bayesian-ab-testing"><strong>Bayesian A/B Testing</strong></h4> <ul> <li>Prior: Encodes historical conversion rates for variants.</li> <li>Likelihood: Comes from observed clicks or conversions (e.g., Binomial model).</li> <li>Posterior: Used to make probabilistic comparisons like \(P(\theta_A &gt; \theta_B \mid \text{data})\).</li> </ul> <p>This leads to more robust and interpretable decisions compared to traditional p-values.</p> <h4 id="bayesian-regression"><strong>Bayesian Regression</strong></h4> <ul> <li>Prior: Places distributions (e.g., Normal) over regression coefficients.</li> <li>Likelihood: Based on residuals from training data.</li> <li>Posterior: Yields not just point estimates, but full predictive intervals — crucial for risk-aware applications like pricing, forecasting, or credit scoring.</li> </ul> <h4 id="fraud-detection"><strong>Fraud Detection</strong></h4> <ul> <li>Prior: Reflects expected fraud rate (e.g., from industry benchmarks).</li> <li>Likelihood: Comes from behavioral or transactional data.</li> <li>Posterior: Quantifies the probability of fraud for new transactions in real time.</li> </ul> <h4 id="recommender-systems"><strong>Recommender Systems</strong></h4> <ul> <li>Prior: Reflects assumed user preferences or item popularity.</li> <li>Likelihood: Derived from user-item interaction data (ratings, clicks).</li> <li>Posterior: Enables personalized predictions with uncertainty quantification, improving exploration in recommendation.</li> </ul> <hr/> <p>The combination of <strong>prior beliefs</strong> and <strong>observed evidence</strong>, culminating in a <strong>posterior</strong>, provides a powerful and flexible inference engine. This Bayesian updating mechanism equips data scientists to not only make predictions but also understand their <strong>confidence</strong> in those predictions — a critical capability in domains where decisions have consequences.</p> <hr/> <h2 id="maximum-likelihood-estimation-mle-vs-maximum-a-posteriori-estimation-map">Maximum Likelihood Estimation (MLE) vs. Maximum A Posteriori Estimation (MAP)</h2> <p>One of the central challenges in statistical inference is the estimation of model parameters from observed data. Two important frameworks for parameter estimation are <strong>Maximum Likelihood Estimation (MLE)</strong> and <strong>Maximum A Posteriori Estimation (MAP)</strong>. While both aim to select parameter values that explain the data well, they differ in how they incorporate prior knowledge.</p> <p>MLE derives purely from the likelihood function, whereas MAP is based on the full Bayesian posterior distribution. Their distinction becomes particularly meaningful in the presence of prior information, limited data, or regularization constraints.</p> <hr/> <h3 id="mle-derivation-and-explanation">MLE: Derivation and Explanation</h3> <p>Let \(D = \{x_1, x_2, \dots, x_n\}\) be a set of i.i.d. observations drawn from a distribution parameterized by \(\theta\).</p> <p>The <strong>likelihood function</strong> is:</p> \[L(\theta \mid D) = \prod_{i=1}^{n} P(x_i \mid \theta)\] <p>Taking logs, the <strong>log-likelihood</strong> becomes:</p> \[\ell(\theta) = \log L(\theta \mid D) = \sum_{i=1}^{n} \log P(x_i \mid \theta)\] <p>The <strong>Maximum Likelihood Estimator</strong> is the value of \(\theta\) that maximizes the log-likelihood:</p> \[\hat{\theta}_{\text{MLE}} = \arg\max_\theta \, \ell(\theta)\] <hr/> <h4 id="mle-derivation-bernoulli-case">MLE Derivation: Bernoulli Case</h4> <p>Suppose each \(x_i\) is a Bernoulli trial with success probability \(\theta\). Then:</p> \[P(x_i \mid \theta) = \theta^{x_i} (1 - \theta)^{1 - x_i}\] <p>So the log-likelihood becomes:</p> \[\ell(\theta) = \sum_{i=1}^n \left[ x_i \log \theta + (1 - x_i) \log(1 - \theta) \right]\] <p>Let:</p> <ul> <li>\(k = \sum_{i=1}^n x_i\) be the number of successes,</li> <li>\(n - k\) be the number of failures.</li> </ul> <p>Then:</p> \[\ell(\theta) = k \log \theta + (n - k) \log(1 - \theta)\] <p>To maximize, differentiate with respect to \(\theta\) and set the derivative to zero:</p> \[\frac{d\ell}{d\theta} = \frac{k}{\theta} - \frac{n - k}{1 - \theta} = 0\] <p>Solving:</p> \[\frac{k}{\theta} = \frac{n - k}{1 - \theta} \Rightarrow k (1 - \theta) = (n - k) \theta\] <p>Expanding:</p> \[k - k\theta = n\theta - k\theta \Rightarrow k = n\theta \Rightarrow \hat{\theta}_{\text{MLE}} = \frac{k}{n}\] <hr/> <h3 id="map-derivation-and-explanation">MAP: Derivation and Explanation</h3> <p>In the Bayesian framework, we update our belief about \(\theta\) after observing \(D\) using Bayes’ Theorem:</p> \[P(\theta \mid D) = \frac{P(D \mid \theta) P(\theta)}{P(D)}\] <p>The <strong>MAP estimator</strong> is:</p> \[\hat{\theta}_{\text{MAP}} = \arg\max_\theta \, P(\theta \mid D) = \arg\max_\theta \, P(D \mid \theta) P(\theta)\] <p>Taking logarithms:</p> \[\hat{\theta}_{\text{MAP}} = \arg\max_\theta \left[ \log P(D \mid \theta) + \log P(\theta) \right]\] <p>This formulation shows that MAP estimation is equivalent to <strong>MLE with a regularization term</strong> derived from the prior.</p> <ul> <li>If \(P(\theta)\) is uniform (uninformative), then MAP reduces to MLE.</li> <li>If \(P(\theta)\) is Gaussian, the log-prior is quadratic and acts like L2 regularization.</li> </ul> <hr/> <h4 id="map-derivation-bernoulli-likelihood-and-beta-prior">MAP Derivation: Bernoulli Likelihood and Beta Prior</h4> <p>Let:</p> <ul> <li>Likelihood: \(P(D \mid \theta) \propto \theta^k (1 - \theta)^{n - k}\)</li> <li>Prior: \(P(\theta) = \text{Beta}(\alpha, \beta) \propto \theta^{\alpha - 1}(1 - \theta)^{\beta - 1}\)</li> </ul> <p>Then:</p> \[P(\theta \mid D) \propto \theta^{k + \alpha - 1}(1 - \theta)^{n - k + \beta - 1}\] <p>This is a <strong>Beta posterior</strong>: \(\text{Beta}(k + \alpha, n - k + \beta)\).</p> <p>To find the MAP estimate (mode of the Beta distribution), we differentiate the log-posterior:</p> \[\log P(\theta \mid D) = (k + \alpha - 1) \log \theta + (n - k + \beta - 1) \log(1 - \theta)\] <p>Take derivative and set to zero:</p> \[\frac{d}{d\theta} \log P(\theta \mid D) = \frac{k + \alpha - 1}{\theta} - \frac{n - k + \beta - 1}{1 - \theta} = 0\] <p>Solving:</p> \[\frac{k + \alpha - 1}{\theta} = \frac{n - k + \beta - 1}{1 - \theta} \Rightarrow (k + \alpha - 1)(1 - \theta) = (n - k + \beta - 1)\theta\] <p>Expanding:</p> \[k + \alpha - 1 - (k + \alpha - 1)\theta = (n - k + \beta - 1)\theta\] <p>Move terms:</p> \[k + \alpha - 1 = \theta \left[(n - k + \beta - 1) + (k + \alpha - 1)\right] = \theta (n + \alpha + \beta - 2)\] <p>Thus, the <strong>MAP estimate is</strong>:</p> \[\hat{\theta}_{\text{MAP}} = \frac{k + \alpha - 1}{n + \alpha + \beta - 2}\] <p>When \(\alpha = \beta = 1\) (uniform prior), MAP reduces to MLE:</p> \[\hat{\theta}_{\text{MAP}} = \frac{k}{n}\] <hr/> <h3 id="bernoulli-example-with-beta-prior">Bernoulli Example with Beta Prior</h3> <p>Suppose we toss a coin \(n = 5\) times and observe \(k = 3\) heads. Let \(\theta\) be the probability of heads.</p> <ul> <li> <p>The <strong>likelihood</strong> is:</p> \[P(k \mid \theta) = \binom{5}{3} \theta^3 (1 - \theta)^2 \propto \theta^3 (1 - \theta)^2\] </li> <li> <p>The <strong>prior</strong> is a Beta distribution: \(P(\theta) \propto \theta^{\alpha - 1} (1 - \theta)^{\beta - 1}\).</p> <p>Let’s use \(\text{Beta}(2, 2)\), so:</p> \[P(\theta) \propto \theta (1 - \theta)\] </li> <li> <p>The <strong>posterior</strong> is then:</p> \[P(\theta \mid D) \propto \theta^3 (1 - \theta)^2 \cdot \theta (1 - \theta) = \theta^4 (1 - \theta)^3\] </li> </ul> <p>This corresponds to a <strong>Beta(5, 4)</strong> posterior.</p> <ul> <li> <p>The <strong>MLE</strong> is:</p> \[\hat{\theta}_{\text{MLE}} = \frac{k}{n} = \frac{3}{5} = 0.6\] </li> <li> <p>The <strong>MAP</strong> estimate (mode of Beta(5,4)) is:</p> \[\hat{\theta}_{\text{MAP}} = \frac{5 - 1}{5 + 4 - 2} = \frac{4}{7} \approx 0.571\] </li> </ul> <hr/> <h3 id="visualization-2">Visualization</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">from</span> <span class="n">scipy.stats</span> <span class="kn">import</span> <span class="n">beta</span>

<span class="n">theta_vals</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">200</span><span class="p">)</span>

<span class="c1"># Likelihood (up to constant)
</span><span class="n">k</span><span class="p">,</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span>
<span class="n">likelihood</span> <span class="o">=</span> <span class="n">theta_vals</span><span class="o">**</span><span class="n">k</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">theta_vals</span><span class="p">)</span><span class="o">**</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="n">k</span><span class="p">)</span>
<span class="n">likelihood</span> <span class="o">/=</span> <span class="n">np</span><span class="p">.</span><span class="nf">trapz</span><span class="p">(</span><span class="n">likelihood</span><span class="p">,</span> <span class="n">theta_vals</span><span class="p">)</span>

<span class="c1"># Prior: Beta(2, 2)
</span><span class="n">prior</span> <span class="o">=</span> <span class="n">beta</span><span class="p">.</span><span class="nf">pdf</span><span class="p">(</span><span class="n">theta_vals</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>

<span class="c1"># Posterior: Beta(5, 4)
</span><span class="n">posterior</span> <span class="o">=</span> <span class="n">beta</span><span class="p">.</span><span class="nf">pdf</span><span class="p">(</span><span class="n">theta_vals</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>

<span class="c1"># Estimates
</span><span class="n">theta_mle</span> <span class="o">=</span> <span class="n">k</span> <span class="o">/</span> <span class="n">n</span>
<span class="n">theta_map</span> <span class="o">=</span> <span class="p">(</span><span class="mi">5</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="mi">5</span> <span class="o">+</span> <span class="mi">4</span> <span class="o">-</span> <span class="mi">2</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">theta_vals</span><span class="p">,</span> <span class="n">likelihood</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">"</span><span class="s">Likelihood (MLE)</span><span class="sh">"</span><span class="p">,</span> <span class="n">linestyle</span><span class="o">=</span><span class="sh">"</span><span class="s">--</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">theta_vals</span><span class="p">,</span> <span class="n">prior</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">"</span><span class="s">Prior: Beta(2,2)</span><span class="sh">"</span><span class="p">,</span> <span class="n">linestyle</span><span class="o">=</span><span class="sh">"</span><span class="s">:</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">theta_vals</span><span class="p">,</span> <span class="n">posterior</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">"</span><span class="s">Posterior: Beta(5,4)</span><span class="sh">"</span><span class="p">,</span> <span class="n">linewidth</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">axvline</span><span class="p">(</span><span class="n">theta_mle</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">"</span><span class="s">gray</span><span class="sh">"</span><span class="p">,</span> <span class="n">linestyle</span><span class="o">=</span><span class="sh">"</span><span class="s">--</span><span class="sh">"</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sa">f</span><span class="sh">"</span><span class="s">MLE: </span><span class="si">{</span><span class="n">theta_mle</span><span class="si">:</span><span class="p">.</span><span class="mi">2</span><span class="n">f</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">axvline</span><span class="p">(</span><span class="n">theta_map</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">"</span><span class="s">black</span><span class="sh">"</span><span class="p">,</span> <span class="n">linestyle</span><span class="o">=</span><span class="sh">"</span><span class="s">:</span><span class="sh">"</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sa">f</span><span class="sh">"</span><span class="s">MAP: </span><span class="si">{</span><span class="n">theta_map</span><span class="si">:</span><span class="p">.</span><span class="mi">2</span><span class="n">f</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">"</span><span class="s">MAP vs MLE Estimation for Coin Bias</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="sh">"</span><span class="s">θ (Probability of Heads)</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">ylabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Density</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">legend</span><span class="p">()</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">grid</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">tight_layout</span><span class="p">()</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div> <p>The plot below demonstrates how <strong>Maximum Likelihood Estimation (MLE)</strong> and <strong>Maximum A Posteriori (MAP)</strong> estimation differ when estimating the bias \(\theta\) of a coin (i.e., the probability of getting heads).</p> <p>The goal is to estimate the most likely value of \(\theta\) based on:</p> <ul> <li>A prior belief about the coin’s fairness (a Beta distribution),</li> <li>A small sample of observed data (3 heads out of 5 tosses).</li> </ul> <div style="text-align: center; margin: 2rem 0;"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/probstat3_4-480.webp 480w,/assets/img/probstat3_4-800.webp 800w,/assets/img/probstat3_4-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/probstat3_4.png" class="img-fluid rounded shadow-sm" width="100%" height="auto" alt="MAP vs MLE Estimation for Coin Bias" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p style="font-style: italic; font-size: 0.95rem; color: #666; margin-top: 0.5rem;"> Figure: MAP vs MLE Estimation for Coin Bias </p> </div> <ul> <li><strong>Prior</strong>: A \(\text{Beta}(2,2)\) distribution, centered at 0.5, representing a <strong>mild belief</strong> that the coin is fair.</li> <li><strong>Observed Data</strong>: 5 tosses, with <strong>3 heads</strong> and <strong>2 tails</strong>.</li> <li> <p><strong>Likelihood</strong>: Based on the Binomial model:</p> \[P(D \mid \theta) \propto \theta^3 (1 - \theta)^2\] </li> <li> <p><strong>Posterior</strong>: With a conjugate Beta prior and Binomial likelihood, the posterior becomes:</p> \[\text{Beta}(\alpha + k, \beta + n - k) = \text{Beta}(5, 4)\] </li> </ul> <h3 id="inferences-we-can-make">Inferences we can make:</h3> <ol> <li> <p><strong>MLE Ignores Prior Knowledge</strong>:<br/> The likelihood peaks at \(\theta = 0.6\)—which is simply the empirical ratio \(k/n = 3/5\). This is the MLE and represents the estimate <strong>purely from data</strong>.</p> </li> <li> <p><strong>MAP Blends Prior and Data</strong>:<br/> The posterior peaks at around \(\theta = 0.571\). The MAP estimate is slightly <strong>pulled toward the prior mean (0.5)</strong> compared to MLE. This reflects the influence of the prior, which assumed the coin is more likely to be fair.</p> </li> <li> <p><strong>Priors Act as Regularizers</strong>:<br/> The MAP estimator essentially acts like a <strong>regularized version of MLE</strong>—biasing the estimate toward prior beliefs, especially when sample size is small. With more data, the MAP and MLE would converge.</p> </li> <li> <p><strong>Posterior Reflects Uncertainty More Holistically</strong>:<br/> Compared to the sharper likelihood, the posterior incorporates both <strong>data and prior uncertainty</strong>, making it slightly wider and smoother—especially relevant in low-data settings.</p> </li> <li> <p><strong>MAP ≠ MLE When Priors Are Informative</strong>:<br/> This visualization is a concrete demonstration of how <strong>MAP ≠ MLE</strong> when the prior is not flat. It’s a critical concept when explaining regularization, Bayesian learning, or when modeling with limited data.</p> </li> </ol> <hr/> <p>To summarize, this plot provides a visual comparison of two common estimation strategies:</p> <ul> <li><strong>MLE</strong>: Trusts only the data.</li> <li><strong>MAP</strong>: Trusts both the data and a prior belief.</li> </ul> <p>When data is scarce (as it often is in real-world applications), the regularization effect of the prior becomes particularly useful. Bayesian methods provide a principled way to implement this regularization through <strong>posterior inference</strong>, and this example makes that visible and intuitive.</p> <hr/> <h3 id="applications-in-data-science-2">Applications in Data Science</h3> <h4 id="logistic-regression">Logistic Regression</h4> <p>MLE finds weights that minimize the negative log-likelihood. However, MAP estimation adds a prior over the weights (usually Gaussian), which leads to <strong>regularized logistic regression</strong>:</p> \[\hat{w}_{\text{MAP}} = \arg\min_w \left[ \sum_i \log(1 + e^{-y_i x_i^T w}) + \frac{\lambda}{2} \|w\|^2 \right]\] <p>This helps control overfitting, especially in high-dimensional spaces.</p> <h4 id="bayesian-linear-regression">Bayesian Linear Regression</h4> <p>In linear regression, MAP estimation with a Gaussian prior yields <strong>Ridge regression</strong>:</p> \[\hat{\beta}_{\text{MAP}} = \arg\min_{\beta} \left[ \|y - X\beta\|^2 + \lambda \|\beta\|^2 \right]\] <p>This provides stability when data is sparse or multicollinearity is present.</p> <h4 id="cold-start-and-sparse-data-problems">Cold Start and Sparse Data Problems</h4> <p>MAP estimators are essential when:</p> <ul> <li>Data is limited (e.g., few clicks or ratings per user).</li> <li>You want to encode prior beliefs (e.g., users prefer popular items).</li> <li>You want robust, regularized predictions rather than overfitting.</li> </ul> <p>MAP allows us to “pull” parameter estimates towards prior expectations when data is insufficient, making it highly useful in recommender systems and early-stage modeling.</p> <hr/> <h2 id="conjugate-priors">Conjugate Priors</h2> <p>One of the elegant outcomes in Bayesian inference is that certain choices of priors lead to mathematically convenient posteriors. When a prior and its corresponding posterior distribution belong to the same family, the prior is said to be a <strong>conjugate prior</strong> for the likelihood function.</p> <p>This property is not just algebraic elegance — it enables closed-form updates, analytical tractability, and efficient implementation in sequential or real-time inference systems.</p> <hr/> <h3 id="formal-definition">Formal Definition</h3> <p>A prior distribution \(P(\theta)\) is said to be <strong>conjugate</strong> to a likelihood function \(P(D \mid \theta)\) if the posterior \(P(\theta \mid D)\) is in the same family of distributions as the prior.</p> <p>That is:</p> \[\text{If } P(\theta) \in \mathcal{F} \text{ and } P(\theta \mid D) \in \mathcal{F} \text{ as well, then } P(\theta) \text{ is conjugate.}\] <p>Some classic conjugate prior–likelihood pairs include:</p> <table> <thead> <tr> <th style="text-align: left">Likelihood</th> <th>Conjugate Prior</th> <th style="text-align: right">Posterior</th> </tr> </thead> <tbody> <tr> <td style="text-align: left">Bernoulli/Binomial</td> <td>Beta</td> <td style="text-align: right">Beta</td> </tr> <tr> <td style="text-align: left">Poisson</td> <td>Gamma</td> <td style="text-align: right">Gamma</td> </tr> <tr> <td style="text-align: left">Normal (known variance)</td> <td>Normal</td> <td style="text-align: right">Normal</td> </tr> <tr> <td style="text-align: left">Multinomial</td> <td>Dirichlet</td> <td style="text-align: right">Dirichlet</td> </tr> </tbody> </table> <hr/> <h3 id="why-it-matters">Why It Matters</h3> <p>Conjugate priors greatly simplify Bayesian analysis. When using a conjugate prior:</p> <ul> <li>Posterior distributions can be derived analytically.</li> <li>Bayesian updating can be done incrementally and efficiently.</li> <li>The form of the prior helps encode domain knowledge (e.g., belief in fairness, expected rates, etc.)</li> </ul> <p>This is particularly useful in low-latency systems like online learning, A/B testing pipelines, and probabilistic graphical models where recomputation must be fast.</p> <hr/> <h3 id="example-beta-prior-for-a-bernoullibinomial-likelihood">Example: Beta Prior for a Bernoulli/Binomial Likelihood</h3> <p>Suppose we are modeling a binary outcome — say, a coin flip. The outcome is modeled as a <strong>Bernoulli process</strong> with unknown probability of success \(\theta\).</p> <h4 id="likelihood">Likelihood</h4> <p>Let \(x_1, \dots, x_n\) be i.i.d. Bernoulli trials with parameter \(\theta\). The likelihood is:</p> \[P(D \mid \theta) = \prod_{i=1}^{n} \theta^{x_i}(1 - \theta)^{1 - x_i}\] <p>Let \(k = \sum x_i\) (number of successes), so:</p> \[P(D \mid \theta) = \theta^k (1 - \theta)^{n - k}\] <h4 id="prior">Prior</h4> <p>We choose a <strong>Beta prior</strong>:</p> \[P(\theta) = \frac{1}{B(\alpha, \beta)} \theta^{\alpha - 1}(1 - \theta)^{\beta - 1}\] <p>Where \(\alpha, \beta &gt; 0\), and \(B(\alpha, \beta)\) is the Beta function:</p> \[B(\alpha, \beta) = \int_0^1 t^{\alpha - 1} (1 - t)^{\beta - 1} dt\] <h4 id="posterior">Posterior</h4> <p>Using Bayes’ theorem:</p> \[P(\theta \mid D) \propto P(D \mid \theta) \cdot P(\theta) = \theta^k (1 - \theta)^{n - k} \cdot \theta^{\alpha - 1} (1 - \theta)^{\beta - 1} = \theta^{\alpha + k - 1} (1 - \theta)^{\beta + n - k - 1}\] <p>Thus, the posterior is:</p> \[P(\theta \mid D) = \text{Beta}(\alpha + k, \beta + n - k)\] <p>This clean and efficient update rule makes the Beta distribution the conjugate prior for the Bernoulli and Binomial likelihood.</p> <hr/> <h3 id="interpretation-1">Interpretation</h3> <p>Each time we observe new data in the form of successes and failures (e.g., from a Bernoulli or Binomial process), we can update the parameters of the Beta prior in a simple, additive way. This is one of the most intuitive benefits of conjugate priors.</p> <p>If the prior is \(\text{Beta}(\alpha, \beta)\), and we observe:</p> <ul> <li>\(k\) successes,</li> <li>\(n - k\) failures,</li> </ul> <p>then the posterior becomes \(\text{Beta}(\alpha', \beta')\), where:</p> \[\alpha' = \alpha + k\] \[\beta' = \beta + (n - k)\] <p>This rule makes it easy to perform sequential updates — as new observations come in, we can incrementally revise our posterior without needing to recompute from scratch. It’s especially valuable in streaming, online learning, and real-time probabilistic systems.</p> <hr/> <h3 id="visualization-3">Visualization</h3> <p>To better understand how conjugate priors simplify Bayesian updating, let’s visualize how a <strong>Beta prior</strong> gets updated after observing data from a <strong>Binomial process</strong>. In this example, we assume a weakly informative prior belief about a coin’s fairness (Beta(2, 2)) and then observe 10 coin tosses with 7 heads. Because the Beta distribution is conjugate to the Binomial likelihood, we can compute the posterior analytically—resulting in another Beta distribution with updated parameters. This makes it easy to see how the prior and data interact to form the posterior.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">from</span> <span class="n">scipy.stats</span> <span class="kn">import</span> <span class="n">beta</span>

<span class="c1"># Observed data: 7 successes in 10 trials
</span><span class="n">k</span><span class="p">,</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">10</span>
<span class="n">failures</span> <span class="o">=</span> <span class="n">n</span> <span class="o">-</span> <span class="n">k</span>

<span class="c1"># Prior: Beta(2, 2)
</span><span class="n">alpha_prior</span> <span class="o">=</span> <span class="mi">2</span>
<span class="n">beta_prior</span> <span class="o">=</span> <span class="mi">2</span>

<span class="c1"># Posterior: Beta(2 + 7, 2 + 3) = Beta(9, 5)
</span><span class="n">alpha_post</span> <span class="o">=</span> <span class="n">alpha_prior</span> <span class="o">+</span> <span class="n">k</span>
<span class="n">beta_post</span> <span class="o">=</span> <span class="n">beta_prior</span> <span class="o">+</span> <span class="n">failures</span>

<span class="n">theta</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">200</span><span class="p">)</span>
<span class="n">prior_pdf</span> <span class="o">=</span> <span class="n">beta</span><span class="p">.</span><span class="nf">pdf</span><span class="p">(</span><span class="n">theta</span><span class="p">,</span> <span class="n">alpha_prior</span><span class="p">,</span> <span class="n">beta_prior</span><span class="p">)</span>
<span class="n">posterior_pdf</span> <span class="o">=</span> <span class="n">beta</span><span class="p">.</span><span class="nf">pdf</span><span class="p">(</span><span class="n">theta</span><span class="p">,</span> <span class="n">alpha_post</span><span class="p">,</span> <span class="n">beta_post</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">theta</span><span class="p">,</span> <span class="n">prior_pdf</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">"</span><span class="s">Prior: Beta(2, 2)</span><span class="sh">"</span><span class="p">,</span> <span class="n">linestyle</span><span class="o">=</span><span class="sh">"</span><span class="s">--</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">theta</span><span class="p">,</span> <span class="n">posterior_pdf</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">"</span><span class="s">Posterior: Beta(9, 5)</span><span class="sh">"</span><span class="p">,</span> <span class="n">linewidth</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">"</span><span class="s">Posterior Update with Conjugate Beta Prior</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="sh">"</span><span class="s">θ (Probability of Success)</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">ylabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Density</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">legend</span><span class="p">()</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">grid</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">tight_layout</span><span class="p">()</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div> <p>This visualization shows how the prior belief (centered at 0.5) gets updated based on data favoring higher success probability.</p> <div style="text-align: center; margin: 2rem 0;"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/probstat3_5-480.webp 480w,/assets/img/probstat3_5-800.webp 800w,/assets/img/probstat3_5-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/probstat3_5.png" class="img-fluid rounded shadow-sm" width="100%" height="auto" alt="Posterior Update with Conjugate Beta Prior" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p style="font-style: italic; font-size: 0.95rem; color: #666; margin-top: 0.5rem;"> Figure: Posterior Update with Conjugate Beta Prior </p> </div> <p>This plot compares two distributions:</p> <ul> <li>The <strong>prior</strong>: \(\text{Beta}(2, 2)\) — symmetric around 0.5, representing mild uncertainty about the coin being fair.</li> <li>The <strong>posterior</strong>: \(\text{Beta}(9, 5)\) — updated belief after observing <strong>7 heads out of 10 flips</strong>.</li> </ul> <h4 id="whats-happening-under-the-hood">What’s Happening Under the Hood:</h4> <ul> <li>The <strong>prior parameters</strong> \(\alpha = 2, \beta = 2\) represent 1 prior success and 1 prior failure (Beta counts start from one).</li> <li> <p>After observing the data, we apply the conjugate update:</p> \[\alpha_{\text{posterior}} = \alpha_{\text{prior}} + k = 2 + 7 = 9\] \[\beta_{\text{posterior}} = \beta_{\text{prior}} + (n - k) = 2 + 3 = 5\] </li> <li>The posterior is thus \(\text{Beta}(9, 5)\) — a distribution that favors \(\theta &gt; 0.5\), aligning with the observed data, but still shaped by the prior.</li> </ul> <p>The Plot Shows:</p> <ul> <li>The <strong>prior curve</strong> is flat-ish and centered at 0.5, reflecting openness to a range of \(\theta\) values.</li> <li>The <strong>posterior curve</strong> is steeper and shifted right, peaking around \(\theta \approx 0.64\).</li> <li>The update is <strong>not overconfident</strong> — the posterior still acknowledges uncertainty but now leans toward higher \(\theta\) based on evidence.</li> </ul> <h4 id="inferences-to-make">Inferences to make:</h4> <ol> <li> <p><strong>Bayesian updating is additive and intuitive</strong>:<br/> With conjugate priors, updating is just a matter of adjusting counts. This keeps the math clean and interpretability high.</p> </li> <li> <p><strong>The prior influences the posterior more when data is limited</strong>:<br/> In this example, with only 10 trials, the prior still has a noticeable effect. Had we used Beta(1, 1), the posterior would shift even further toward the empirical proportion (0.7).</p> </li> <li> <p><strong>Posterior reflects a refined belief</strong>:<br/> The posterior balances <strong>prior belief and observed data</strong>, yielding a distribution that’s sharper than the prior but not as sharp as the maximum likelihood would suggest.</p> </li> <li> <p><strong>This approach scales well</strong>:<br/> The same logic applies whether you’re flipping a coin, testing an email subject line, or modeling click-through rates. That’s why Beta-Binomial updates are widely used in <strong>A/B testing</strong>, <strong>online learning</strong>, and <strong>Bayesian filtering</strong>.</p> </li> </ol> <hr/> <h3 id="applications-in-data-science-3">Applications in Data Science</h3> <h4 id="bayesian-ab-testing-1">Bayesian A/B Testing</h4> <p>In online experimentation:</p> <ul> <li>Each version has a Beta prior over its conversion rate.</li> <li>New data updates the posterior in real-time.</li> <li>This allows comparing \(P(\theta_A &gt; \theta_B \mid \text{data})\) directly, unlike frequentist p-values.</li> </ul> <p>Conjugate priors enable this with fast, closed-form updates and interpretable distributions.</p> <h4 id="real-time-user-modeling">Real-Time User Modeling</h4> <p>Click-through rates, open rates, fraud likelihoods — all modeled as binary outcomes. Beta priors can be updated on-the-fly as new data arrives, powering systems like:</p> <ul> <li>Dynamic personalization</li> <li>Spam filtering</li> <li>Risk scoring in transactions</li> </ul> <h4 id="bayesian-filtering-and-probabilistic-robotics">Bayesian Filtering and Probabilistic Robotics</h4> <p>In robotics and control systems, conjugate priors are used for recursive Bayesian filters (e.g., Kalman filters, where Gaussians are conjugate to themselves) to update beliefs about position, velocity, or sensor noise.</p> <hr/> <p>Conjugate priors marry theory and practice in Bayesian modeling. They offer a principled way to integrate domain knowledge, perform fast posterior updates, and maintain mathematical elegance — making them an indispensable tool in the probabilistic data scientist’s toolkit.</p> <hr/> <h2 id="gaussian-processes-intro">Gaussian Processes (Intro)</h2> <p>Gaussian Processes (GPs) offer a powerful and flexible framework for <strong>non-parametric Bayesian modeling</strong>. Unlike traditional models that learn a finite set of parameters (like coefficients in linear regression), GPs treat inference as learning a <strong>distribution over functions</strong>.</p> <p>This makes them ideal when you not only want to predict a value but also <strong>quantify uncertainty</strong> about that prediction — a crucial requirement in safety-critical applications such as medical diagnostics, robotics, and autonomous systems.</p> <hr/> <h3 id="what-is-a-gaussian-process">What is a Gaussian Process?</h3> <p>A <strong>Gaussian Process</strong> is a collection of random variables, any finite number of which have a joint Gaussian distribution. It is completely specified by:</p> <ul> <li>A <strong>mean function</strong> \(m(x)\), and</li> <li>A <strong>covariance function</strong> or <strong>kernel</strong> \(k(x, x')\).</li> </ul> <p>Formally, we write:</p> \[f(x) \sim \mathcal{GP}(m(x), k(x, x'))\] <p>Where:</p> <ul> <li> \[m(x) = \mathbb{E}[f(x)]\] </li> <li> \[k(x, x') = \mathbb{E}[(f(x) - m(x))(f(x') - m(x'))]\] </li> </ul> <p>This means that for any finite set of inputs \(x_1, \dots, x_n\), the function values \(f(x_1), \dots, f(x_n)\) follow a multivariate normal distribution:</p> \[[f(x_1), \dots, f(x_n)]^\top \sim \mathcal{N}(\mu, K)\] <p>Where:</p> <ul> <li> \[\mu_i = m(x_i)\] </li> <li> \[K_{ij} = k(x_i, x_j)\] </li> </ul> <hr/> <h3 id="gaussian-process-regression-intuition">Gaussian Process Regression: Intuition</h3> <p>Let us consider a regression problem where we are given a dataset of \(n\) observed input-output pairs:</p> \[D = \{(x_i, y_i)\}_{i=1}^n\] <p>We assume the outputs are generated from an <strong>unknown latent function</strong> \(f(x)\) with added Gaussian noise:</p> \[y_i = f(x_i) + \epsilon_i, \quad \epsilon_i \sim \mathcal{N}(0, \sigma_n^2)\] <p>Our goal is to learn about \(f(x)\) — not as a fixed parametric model, but as a <strong>distribution over possible functions</strong>. This is where <strong>Gaussian Processes</strong> come into play.</p> <p>A <strong>Gaussian Process (GP)</strong> is a prior over functions such that any finite collection of function values follows a multivariate Gaussian distribution:</p> \[f(x) \sim \mathcal{GP}(m(x), k(x, x'))\] <p>Here:</p> <ul> <li>\(m(x) = \mathbb{E}[f(x)]\) is the <strong>mean function</strong>, often set to zero for simplicity.</li> <li>\(k(x, x') = \mathbb{E}[(f(x) - m(x))(f(x') - m(x'))]\) is the <strong>kernel</strong> or covariance function.</li> </ul> <p>Given training inputs \(X = [x_1, ..., x_n]\) and outputs \(\mathbf{y} = [y_1, ..., y_n]^T\), and test inputs \(X_*\), the GP framework models the joint distribution of training and test outputs as:</p> \[\begin{bmatrix} \mathbf{y} \\ \mathbf{f}_* \end{bmatrix} \sim \mathcal{N} \left( \begin{bmatrix} \mathbf{0} \\ \mathbf{0} \end{bmatrix}, \begin{bmatrix} K(X, X) + \sigma_n^2 I &amp; K(X, X_*) \\ K(X_*, X) &amp; K(X_*, X_*) \end{bmatrix} \right)\] <p>Where:</p> <ul> <li>\(K(X, X)\) is the \(n \times n\) covariance matrix for training inputs.</li> <li>\(K(X, X_*)\) is the \(n \times m\) cross-covariance between training and test inputs.</li> <li>\(K(X_*, X_*)\) is the \(m \times m\) covariance of the test inputs.</li> <li>\(\sigma_n^2 I\) adds noise to the diagonal (due to the assumed observational noise).</li> </ul> <p>The <strong>posterior predictive distribution</strong> for the function values at test points is then given by:</p> \[\mathbf{f}_* \mid X, \mathbf{y}, X_* \sim \mathcal{N}(\mu_*, \Sigma_*)\] <p>Where:</p> <ul> <li> <p><strong>Posterior mean</strong>:</p> \[\mu_* = K(X_*, X)[K(X, X) + \sigma_n^2 I]^{-1} \mathbf{y}\] </li> <li> <p><strong>Posterior covariance</strong>:</p> \[\Sigma_* = K(X_*, X_*) - K(X_*, X)[K(X, X) + \sigma_n^2 I]^{-1} K(X, X_*)\] </li> </ul> <p>This formulation gives us both predictions (mean) and uncertainty (variance) at any set of new inputs.</p> <hr/> <h3 id="the-role-of-the-kernel-function">The Role of the Kernel Function</h3> <p>The <strong>kernel function</strong> \(k(x, x')\) defines the covariance structure between the function values at different inputs. It encodes prior assumptions about the function’s properties — smoothness, periodicity, linearity, etc. The choice of kernel is crucial as it <strong>determines the shape of the functions the GP considers likely</strong>.</p> <p>Here are some commonly used kernels:</p> <hr/> <h4 id="1-radial-basis-function-rbf-or-squared-exponential-kernel">1. <strong>Radial Basis Function (RBF) or Squared Exponential Kernel</strong></h4> <p>This is the most widely used kernel due to its universal approximation properties and smoothness:</p> \[k(x, x') = \exp\left(-\frac{(x - x')^2}{2\ell^2}\right)\] <ul> <li>\(\ell\) is the <strong>length scale</strong>, controlling how quickly the function varies.</li> <li>Encourages <strong>infinitely differentiable</strong>, smooth functions.</li> <li>Implies that points closer in input space have highly correlated function values.</li> </ul> <hr/> <h4 id="2-matern-kernel">2. <strong>Matern Kernel</strong></h4> <p>A generalization of the RBF kernel that allows for less smoothness:</p> \[k_\nu(r) = \frac{2^{1-\nu}}{\Gamma(\nu)} \left( \frac{\sqrt{2\nu}r}{\ell} \right)^\nu K_\nu \left( \frac{\sqrt{2\nu}r}{\ell} \right)\] <ul> <li> \[r = |x - x'|\] </li> <li>\(\nu\) controls smoothness: e.g., \(\nu = 1/2\) gives exponential kernel, \(\nu \to \infty\) recovers RBF.</li> <li>Suitable for modeling rougher, more realistic functions in real-world applications.</li> </ul> <hr/> <h4 id="3-dot-product-linear-kernel">3. <strong>Dot Product (Linear) Kernel</strong></h4> <p>Used when the function is expected to be linear:</p> \[k(x, x') = x^T x'\] <ul> <li>Equivalent to Bayesian linear regression.</li> <li>Doesn’t model nonlinearity unless combined with other kernels.</li> </ul> <hr/> <h4 id="4-periodic-kernel">4. <strong>Periodic Kernel</strong></h4> <p>Models functions with known repeating structure:</p> \[k(x, x') = \exp\left(-\frac{2 \sin^2(\pi |x - x'| / p)}{\ell^2}\right)\] <ul> <li>\(p\) controls the period, \(\ell\) controls smoothness.</li> <li>Ideal for seasonal data, time series, and cyclic behaviors.</li> </ul> <hr/> <h3 id="why-kernels-matter-in-practice">Why Kernels Matter in Practice</h3> <p>The <strong>kernel acts as a prior over function space</strong>, shaping not only the kinds of functions the model will favor but also how information propagates across the input domain. Inference in a GP is guided entirely by the covariance implied by the kernel.</p> <p>Choosing a kernel is a modeling decision — like choosing a neural network architecture or a basis function family — but in GPs, it’s <strong>probabilistically grounded</strong>. And importantly, it’s <strong>differentiable and tunable</strong>: you can learn kernel parameters (like \(\ell\)) by maximizing the marginal likelihood.</p> <hr/> <h3 id="visualization-4">Visualization</h3> <p>To illustrate how <strong>Gaussian Processes</strong> model distributions over functions, let’s walk through a simple 1D regression example using scikit-learn. We’ll fit a GP to a <strong>small set of noisy training points</strong>, allowing it to not only predict the mean function but also provide a <strong>confidence interval</strong> that reflects its uncertainty. The GP is equipped with an <strong>RBF (Radial Basis Function)</strong> kernel, which assumes smoothness in the underlying function.</p> <p>This example visually demonstrates one of the GP’s most powerful features: it can interpolate sparse data while expressing its uncertainty about regions it has not seen.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">from</span> <span class="n">sklearn.gaussian_process</span> <span class="kn">import</span> <span class="n">GaussianProcessRegressor</span>
<span class="kn">from</span> <span class="n">sklearn.gaussian_process.kernels</span> <span class="kn">import</span> <span class="n">RBF</span>

<span class="c1"># Training data (sparse)
</span><span class="n">X_train</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">5</span><span class="p">],</span> <span class="p">[</span><span class="mi">6</span><span class="p">]])</span>
<span class="n">y_train</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">sin</span><span class="p">(</span><span class="n">X_train</span><span class="p">).</span><span class="nf">ravel</span><span class="p">()</span>

<span class="c1"># Define GP with RBF kernel
</span><span class="n">kernel</span> <span class="o">=</span> <span class="nc">RBF</span><span class="p">(</span><span class="n">length_scale</span><span class="o">=</span><span class="mf">1.0</span><span class="p">)</span>
<span class="n">gp</span> <span class="o">=</span> <span class="nc">GaussianProcessRegressor</span><span class="p">(</span><span class="n">kernel</span><span class="o">=</span><span class="n">kernel</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">1e-2</span><span class="p">)</span>
<span class="n">gp</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>

<span class="c1"># Predictive distribution at test points
</span><span class="n">X_test</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">100</span><span class="p">).</span><span class="nf">reshape</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">y_pred</span><span class="p">,</span> <span class="n">sigma</span> <span class="o">=</span> <span class="n">gp</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X_test</span><span class="p">,</span> <span class="n">return_std</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="c1"># Plot
</span><span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="sh">'</span><span class="s">ro</span><span class="sh">'</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">Training Data</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">X_test</span><span class="p">,</span> <span class="n">y_pred</span><span class="p">,</span> <span class="sh">'</span><span class="s">b-</span><span class="sh">'</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">Mean Prediction</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">fill_between</span><span class="p">(</span><span class="n">X_test</span><span class="p">.</span><span class="nf">ravel</span><span class="p">(),</span> <span class="n">y_pred</span> <span class="o">-</span> <span class="mf">1.96</span> <span class="o">*</span> <span class="n">sigma</span><span class="p">,</span> <span class="n">y_pred</span> <span class="o">+</span> <span class="mf">1.96</span> <span class="o">*</span> <span class="n">sigma</span><span class="p">,</span>
                 <span class="n">alpha</span><span class="o">=</span><span class="mf">0.3</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">95% Confidence Interval</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">"</span><span class="s">Gaussian Process Regression</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="sh">"</span><span class="s">x</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">ylabel</span><span class="p">(</span><span class="sh">"</span><span class="s">f(x)</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">legend</span><span class="p">()</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">grid</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">tight_layout</span><span class="p">()</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div> <div style="text-align: center; margin: 2rem 0;"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/probstat3_6-480.webp 480w,/assets/img/probstat3_6-800.webp 800w,/assets/img/probstat3_6-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/probstat3_6.png" class="img-fluid rounded shadow-sm" width="100%" height="auto" alt="Gaussian Process Regression" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p style="font-style: italic; font-size: 0.95rem; color: #666; margin-top: 0.5rem;"> Figure: Gaussian Process Regression </p> </div> <p>The Plot Shows:</p> <ul> <li><strong>Red dots</strong> represent the observed training data points.</li> <li>The <strong>blue line</strong> is the mean prediction of the Gaussian Process at every point in the input space.</li> <li> <p>The <strong>shaded region</strong> corresponds to a 95% confidence interval, calculated as:</p> \[\hat{f}(x) \pm 1.96 \cdot \sigma(x)\] <p>where \(\hat{f}(x)\) is the predicted mean and \(\sigma(x)\) is the standard deviation from the posterior.</p> </li> </ul> <hr/> <p>Insights we can infer from this are</p> <ol> <li> <p><strong>Probabilistic Predictions, Not Just Point Estimates</strong><br/> Unlike traditional regressors (like polynomial or linear regression), the GP predicts a <strong>distribution over functions</strong>, not a single best fit. For each input \(x\), it returns a mean prediction <strong>and</strong> a measure of uncertainty.</p> </li> <li> <p><strong>Uncertainty Reflects Data Coverage</strong><br/> The model is most confident (i.e., narrowest uncertainty band) <strong>near the observed data points</strong>, and increasingly uncertain as we move away from them. This is especially visible at the edges (near \(x = 0\) and \(x = 10\)), where the GP hasn’t seen any training data.</p> </li> <li> <p><strong>The Role of the RBF Kernel</strong><br/> The <strong>RBF kernel</strong> assumes that points closer in input space produce similar outputs. It’s what gives the GP its smooth, wavy behavior. If a different kernel were used (e.g., linear or periodic), the shape of the mean and uncertainty band would change.</p> </li> <li><strong>Handling Small Datasets Gracefully</strong><br/> Despite having only four training points, the GP constructs a smooth function that captures the structure of the underlying sine wave—without overfitting. This makes it particularly useful in low-data regimes like: <ul> <li>Experimental design,</li> <li>Bayesian optimization,</li> <li>Medical modeling, where samples are expensive.</li> </ul> </li> <li><strong>Interpretable Uncertainty</strong><br/> The shaded band gives us a principled way to <strong>quantify model confidence</strong>. Unlike confidence intervals in frequentist regression, which apply to the parameter estimate, the GP’s uncertainty is <strong>pointwise</strong> and interpretable: “Here’s how unsure the model is at this input.”</li> </ol> <hr/> <p>This showcases the core strength of Gaussian Processes: <strong>flexible, non-parametric regression with uncertainty quantification</strong>. By treating the prediction as a distribution over functions, the GP provides not only a best guess but also a principled expression of <strong>how much we trust that guess</strong> at each point. This property is crucial in settings where <strong>uncertainty is as important as accuracy</strong>.</p> <p>This visualization illustrates:</p> <ul> <li>How GPs interpolate observed points with smooth curves,</li> <li>How prediction uncertainty grows away from the training data,</li> <li>And how the kernel controls the shape of the functions we consider probable.</li> </ul> <hr/> <h3 id="applications-in-data-science-4">Applications in Data Science</h3> <h4 id="bayesian-optimization"><strong>Bayesian Optimization</strong></h4> <p>GPs are often used as <strong>surrogate models</strong> in Bayesian Optimization, where the goal is to optimize a black-box function that is expensive to evaluate. The GP captures both the function estimate and its uncertainty, enabling <strong>exploration vs. exploitation</strong> strategies.</p> <h4 id="uncertainty-aware-regression"><strong>Uncertainty-Aware Regression</strong></h4> <p>GPs naturally model <strong>predictive uncertainty</strong>. This is vital in:</p> <ul> <li>Medical diagnosis (model confidence matters),</li> <li>Sensor fusion in robotics (merging noisy measurements),</li> <li>Scientific modeling (where understanding the confidence of predictions is key).</li> </ul> <h4 id="small-data-regimes"><strong>Small-Data Regimes</strong></h4> <p>In cases where data is expensive or scarce (e.g., drug discovery, experimental physics), GPs shine because they can learn complex patterns without overfitting and provide principled uncertainty.</p> <h4 id="active-learning"><strong>Active Learning</strong></h4> <p>Because GPs quantify uncertainty, they are ideal for <strong>active learning</strong> — selecting new data points where the model is uncertain to improve learning efficiency.</p> <hr/> <p>Gaussian Processes offer an elegant solution to the problem of modeling unknown functions with uncertainty. Their interpretability, flexibility, and strong theoretical foundation make them a powerful tool for data scientists working in probabilistic modeling, especially in safety-critical and small-data domains.</p> <hr/> <h2 id="bayesian-foundations-in-modern-data-science">Bayesian Foundations in Modern Data Science</h2> <p>The concepts explored throughout this discussion—Bayes’ theorem, priors and posteriors, likelihoods, conjugate priors, MLE, MAP, and Gaussian Processes—collectively form a foundational perspective on statistical inference. These ideas extend beyond isolated techniques; they represent a systematic approach to learning from data in uncertain settings. Bayesian methods offer a coherent framework for incorporating prior knowledge, updating beliefs based on observed evidence, and reasoning in a probabilistic manner.</p> <p>Among the earliest and most accessible examples is the <strong>Naive Bayes classifier</strong>, which applies Bayes’ theorem to supervised classification tasks. Despite its assumption that features are conditionally independent given the class label, the model often performs well in practice, especially in high-dimensional problems like spam detection or document categorization. It constructs a posterior distribution over class labels:</p> \[P(C \mid x_1, x_2, \dots, x_n) \propto P(C) \prod_{i=1}^n P(x_i \mid C)\] <p>In this formulation, the prior class probabilities \(P(C)\) and the conditional likelihoods \(P(x_i \mid C)\) can be estimated using MLE or MAP techniques. If needed, conjugate priors can be used to incorporate prior knowledge and simplify inference. While simple, the model’s efficiency, transparency, and probabilistic interpretation make it a useful baseline in a variety of real-world systems.</p> <p>More expressive probabilistic modeling is possible when one relaxes the independence assumptions and considers the dependency structure among variables. This leads to the framework of <strong>Bayesian networks</strong>, which use directed acyclic graphs to represent conditional dependencies. The joint distribution is factored as:</p> \[P(X_1, X_2, \dots, X_n) = \prod_{i=1}^n P(X_i \mid \text{Parents}(X_i))\] <p>Each node in the graph corresponds to a random variable, and each edge indicates a dependency. This decomposition generalizes the ideas seen in Naive Bayes by allowing richer structures that capture causality, interaction effects, and shared influences. Parameters in Bayesian networks can be estimated using MLE or MAP, and conjugate priors are often employed to simplify learning, especially in the presence of missing or noisy data. These models are well-suited for complex reasoning tasks, such as medical diagnosis, credit risk modeling, and user behavior analysis.</p> <p>While the models discussed so far rely on explicit parameterizations, <strong>Gaussian Processes</strong> offer a non-parametric alternative by placing a prior over the space of functions themselves. Rather than defining a fixed number of parameters, a Gaussian Process assumes that any finite set of function values follows a multivariate normal distribution. This is particularly valuable in regression tasks where predictive uncertainty is as important as the predicted value.</p> <p>A Gaussian Process model, once conditioned on observed data, yields a posterior distribution over possible functions, complete with mean predictions and confidence intervals. The choice of kernel function encodes assumptions about smoothness, periodicity, or other properties of the underlying function. This makes Gaussian Processes especially useful when working with small datasets, where flexibility and uncertainty quantification are critical.</p> <p>A prominent use case for Gaussian Processes is in <strong>Bayesian optimization</strong>, a strategy for optimizing functions that are expensive or difficult to evaluate. Here, a GP acts as a surrogate model that approximates the true objective, guiding the selection of future evaluations based on both predicted values and uncertainty. This methodology has become a standard tool in hyperparameter tuning, experimental design, and materials discovery.</p> <p>The broader value of Bayesian modeling lies in its capacity to quantify and propagate uncertainty. In domains such as healthcare, autonomous systems, and finance, uncertainty-aware predictions support better decision-making under risk. For instance, posterior class probabilities from a Naive Bayes model can inform risk thresholds in a classifier; MAP estimates provide regularization by incorporating prior constraints; and Gaussian Processes yield confidence bounds that reflect the limits of available information. These capabilities are not peripheral—they are central to deploying models that must make informed decisions under real-world conditions.</p> <hr/> <p>As we close our discussion on Bayesian inference, the natural next step in our learning journey is to explore how <strong>statistical inference</strong>—particularly in its frequentist form—shapes decision-making in data science. In the upcoming part of this series, we will dive into the core principles behind <strong>A/B testing</strong>, <strong>sampling techniques</strong>, <strong>confidence intervals</strong>, and <strong>hypothesis testing</strong> frameworks such as the Z-test, T-test, and ANOVA. We’ll also unpack concepts like <strong>p-values</strong>, <strong>statistical power</strong>, and <strong>Type I/II errors</strong> to understand how to validate results under uncertainty. These tools are critical when measuring the effect of product changes, analyzing experiment results, or quantifying the impact of features in machine learning workflows. If Bayesian inference teaches us how to update beliefs, classical inference equips us to rigorously evaluate them—and together, they form a powerful toolkit for modern data science.</p>]]></content><author><name></name></author><category term="machine-learning"/><category term="math"/><category term="math-for-ml"/><category term="ml"/><category term="ai"/><category term="probability-statistics"/><category term="math"/><summary type="html"><![CDATA[Probability & Statistics 3 - Mathematics for Machine Learning]]></summary></entry><entry><title type="html">Probability &amp;amp; Statistics for Data Science - Probability Distributions</title><link href="https://joyoshish.github.io/blog/2022/mathforml-probstat2/" rel="alternate" type="text/html" title="Probability &amp;amp; Statistics for Data Science - Probability Distributions"/><published>2022-06-05T00:00:00+00:00</published><updated>2022-06-05T00:00:00+00:00</updated><id>https://joyoshish.github.io/blog/2022/mathforml-probstat2</id><content type="html" xml:base="https://joyoshish.github.io/blog/2022/mathforml-probstat2/"><![CDATA[<p>Probability distributions are the foundation of machine learning. They shape how we simulate data, quantify uncertainty, and reason about model behavior. Whether you are generating synthetic samples, fitting probabilistic models, or understanding errors, distributions provide the structure for everything that follows.</p> <p>In this article, we will explore:</p> <ul> <li>Important <strong>discrete and continuous distributions</strong></li> <li>Concepts around <strong>multivariate distributions</strong></li> <li>Key <strong>applications in machine learning and data science</strong></li> <li>Demonstrations using <strong>Python and Plotly visualizations</strong></li> </ul> <hr/> <h2 id="discrete-distributions">Discrete Distributions</h2> <p>Discrete probability distributions represent outcomes that are countable — such as binary labels, event counts, or integer results of repeated trials. These are particularly relevant in classification tasks, anomaly detection, and simulations of real-world processes.</p> <hr/> <h3 id="1-bernoulli-distribution">1. Bernoulli Distribution</h3> <p>The Bernoulli distribution is used to model a single trial with two possible outcomes: success (1) or failure (0). It is the building block of binary classification problems.</p> <p><strong>Probability Mass Function (PMF)</strong>: \(P(X = x) = p^x (1 - p)^{1 - x}, \quad x \in \{0,1\}\)</p> <ul> <li><strong>Mean</strong>: \(\mathbb{E}[X] = p\)</li> <li><strong>Variance</strong>: \(\text{Var}(X) = p(1 - p)\)</li> </ul> <p><strong>Applications</strong>:</p> <ul> <li>Binary classification (e.g., logistic regression target)</li> <li>Simulating binary labels for synthetic datasets</li> </ul> <blockquote> <p>The plot below illustrates a Bernoulli distribution where the probability of success (1) is 0.7 and failure (0) is 0.3. This type of distribution is ideal for binary classification tasks where outcomes are either “yes” or “no”, such as predicting if a customer will churn. The interactive bar chart helps visualize how the probability is distributed between the two outcomes.</p> </blockquote> <div class="jupyter-notebook" style="position: relative; width: 100%; margin: 0 auto;"> <div class="jupyter-notebook-iframe-container"> <iframe src="/assets/jupyter/probstat2_1_bernoulli.ipynb.html" style="position: absolute; top: 0; left: 0; border-style: none;" width="100%" height="100%" onload="this.parentElement.style.paddingBottom = (this.contentWindow.document.documentElement.scrollHeight + 10) + 'px'"></iframe> </div> </div> <hr/> <h3 id="2-binomial-distribution">2. Binomial Distribution</h3> <p>The Binomial distribution generalizes the Bernoulli trial to \(n\) repeated trials. It models the number of successes in a fixed number of independent experiments.</p> <p><strong>PMF</strong>: \(P(X = k) = \binom{n}{k} p^k (1 - p)^{n - k}\)</p> <ul> <li><strong>Mean</strong>: \(\mathbb{E}[X] = np\)</li> <li><strong>Variance</strong>: \(\text{Var}(X) = np(1 - p)\)</li> </ul> <p><strong>Applications</strong>:</p> <ul> <li>Ensemble model success probability</li> <li>Simulating repeated trials</li> </ul> <blockquote> <p>This interactive chart represents the probability of getting a certain number of successes in 10 independent trials, each with a 50% success rate. The binomial distribution models many real-world situations in machine learning, such as predicting how many models in an ensemble will make correct predictions. Notice how the distribution is symmetric when \(p = 0.5\) and peaks around \(n \cdot p = 5\).</p> </blockquote> <div class="jupyter-notebook" style="position: relative; width: 100%; margin: 0 auto;"> <div class="jupyter-notebook-iframe-container"> <iframe src="/assets/jupyter/probstat2_2_binomial.ipynb.html" style="position: absolute; top: 0; left: 0; border-style: none;" width="100%" height="100%" onload="this.parentElement.style.paddingBottom = (this.contentWindow.document.documentElement.scrollHeight + 10) + 'px'"></iframe> </div> </div> <hr/> <h3 id="3-poisson-distribution">3. Poisson Distribution</h3> <p>The Poisson distribution models the number of events that occur in a fixed interval of time or space, assuming the events occur independently and at a constant rate \(\lambda\).</p> <p><strong>PMF</strong>: \(P(X = k) = \frac{\lambda^k e^{-\lambda}}{k!}\)</p> <ul> <li><strong>Mean</strong>: \(\mathbb{E}[X] = \lambda\)</li> <li><strong>Variance</strong>: \(\text{Var}(X) = \lambda\)</li> </ul> <p><strong>Applications</strong>:</p> <ul> <li>Anomaly detection (e.g., fraud or system failures)</li> <li>Modeling event frequency (web traffic, queueing)</li> </ul> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">scipy.stats</span> <span class="kn">import</span> <span class="n">poisson</span>

<span class="n">lmbda</span> <span class="o">=</span> <span class="mi">4</span>
<span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">15</span><span class="p">)</span>
<span class="n">pmf</span> <span class="o">=</span> <span class="n">poisson</span><span class="p">.</span><span class="nf">pmf</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">lmbda</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="nf">bar</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">pmf</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Poisson Distribution (λ=</span><span class="si">{</span><span class="n">lmbda</span><span class="si">}</span><span class="s">)</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="sh">"</span><span class="s">k (events)</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">ylabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Probability</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div> <blockquote> <p>The Poisson distribution is commonly used for modeling the number of times an event occurs in a fixed interval. In the plot below, we use \(\lambda = 4\) to show the probability distribution of event counts. This distribution is especially useful in anomaly detection — for example, identifying if the number of failed login attempts is abnormally high.</p> </blockquote> <div id="poissonPlot" style="width:100%;max-width:700px; margin: 2rem auto;"></div> <script src="https://cdn.plot.ly/plotly-latest.min.js"></script> <script>document.addEventListener("DOMContentLoaded",function(){const t=Array.from({length:15},(t,o)=>o),o=4,e=t=>t?t*e(t-1):1,i=t.map(t=>Math.pow(o,t)*Math.exp(-o)/e(t));Plotly.newPlot("poissonPlot",[{x:t,y:i,type:"bar",marker:{color:"slateblue"}}],{title:"Poisson Distribution (\u03bb = 4)",xaxis:{title:"k (Events)"},yaxis:{title:"Probability"}})});</script> <hr/> <h2 id="continuous-distributions">Continuous Distributions</h2> <p>Continuous distributions represent variables that can take on any value within a range. They are essential in feature modeling, regression analysis, generative modeling, and more.</p> <hr/> <h3 id="1-uniform-distribution">1. Uniform Distribution</h3> <p>This distribution assigns equal probability to all values in an interval $[a, b]$.</p> <p><strong>PDF</strong>: \(f(x) = \frac{1}{b - a}, \quad a \leq x \leq b\)</p> <p><strong>Applications</strong>:</p> <ul> <li>Random initialization (e.g., neural network weights)</li> <li>Data simulation and control baselines</li> </ul> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">samples</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">uniform</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">10000</span><span class="p">)</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">histplot</span><span class="p">(</span><span class="n">samples</span><span class="p">,</span> <span class="n">bins</span><span class="o">=</span><span class="mi">30</span><span class="p">,</span> <span class="n">kde</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">"</span><span class="s">Uniform Distribution [0,1]</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div> <hr/> <h3 id="2-normal-gaussian-distribution">2. Normal (Gaussian) Distribution</h3> <p>The Normal distribution is the most widely used distribution in statistics and machine learning, due to the Central Limit Theorem.</p> <p><strong>PDF</strong>: \(f(x) = \frac{1}{\sqrt{2\pi \sigma^2}} e^{- \frac{(x - \mu)^2}{2\sigma^2}}\)</p> <ul> <li><strong>Mean</strong>: \(\mu\)</li> <li><strong>Variance</strong>: \(\sigma^2\)</li> </ul> <p><strong>Applications</strong>:</p> <ul> <li>Linear regression assumptions</li> <li>PCA and feature decorrelation</li> <li>Modeling errors and noise</li> </ul> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mu</span><span class="p">,</span> <span class="n">sigma</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span>
<span class="n">samples</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">normal</span><span class="p">(</span><span class="n">mu</span><span class="p">,</span> <span class="n">sigma</span><span class="p">,</span> <span class="mi">10000</span><span class="p">)</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">histplot</span><span class="p">(</span><span class="n">samples</span><span class="p">,</span> <span class="n">bins</span><span class="o">=</span><span class="mi">30</span><span class="p">,</span> <span class="n">kde</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">"</span><span class="s">Normal Distribution (μ=0, σ=1)</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div> <blockquote> <p>The bell-shaped curve shown below represents the standard normal distribution. This is foundational to many algorithms in statistics and machine learning. It models noise, errors, and is used in methods like Principal Component Analysis (PCA). Thanks to the Central Limit Theorem, many sample-based statistics tend to follow this distribution even when the original data is not normal.</p> </blockquote> <div style="display: flex; justify-content: center;"> <div id="normalPlot" style="width:100%;max-width:700px;"></div> </div> <script>const normalX=Array.from({length:100},(t,a)=>(a-50)/10),mu=0,sigma=1,normalY=normalX.map(t=>1/(Math.sqrt(2*Math.PI)*sigma)*Math.exp(-.5*Math.pow((t-mu)/sigma,2)));Plotly.newPlot("normalPlot",[{x:normalX,y:normalY,type:"scatter",mode:"lines",line:{color:"seagreen"}}],{title:"Normal Distribution (\u03bc = 0, \u03c3 = 1)",xaxis:{title:"x"},yaxis:{title:"Density"}});</script> <hr/> <h3 id="3-exponential-distribution">3. Exponential Distribution</h3> <p>The exponential distribution describes the time between events in a Poisson process.</p> <p><strong>PDF</strong>: \(f(x) = \lambda e^{-\lambda x}, \quad x \geq 0\)</p> <p><strong>Applications</strong>:</p> <ul> <li>Survival and reliability analysis</li> <li>Modeling waiting times</li> </ul> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">lmbda</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">samples</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">exponential</span><span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="n">lmbda</span><span class="p">,</span> <span class="mi">10000</span><span class="p">)</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">histplot</span><span class="p">(</span><span class="n">samples</span><span class="p">,</span> <span class="n">bins</span><span class="o">=</span><span class="mi">30</span><span class="p">,</span> <span class="n">kde</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">"</span><span class="s">Exponential Distribution</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div> <blockquote> <p>This visualization shows the exponential distribution, which is often used to model the time between events in a Poisson process. It’s especially useful in survival analysis and reliability engineering. The curve declines rapidly, showing that events are most likely to happen shortly after the last one, and become less likely over time.</p> </blockquote> <div style="display: flex; justify-content: center;"> <div id="exponentialPlot" style="width:100%;max-width:700px;"></div> </div> <script>const expX=Array.from({length:100},(t,e)=>.1*e),lambdaExp=1,expY=expX.map(t=>lambdaExp*Math.exp(-lambdaExp*t));Plotly.newPlot("exponentialPlot",[{x:expX,y:expY,type:"scatter",mode:"lines",line:{color:"tomato"}}],{title:"Exponential Distribution (\u03bb = 1)",xaxis:{title:"x"},yaxis:{title:"Density"}});</script> <hr/> <h3 id="4-beta-distribution">4. Beta Distribution</h3> <p>A flexible distribution on the interval [0,1], defined by two shape parameters \(\alpha\) and \(\beta\).</p> <p><strong>PDF</strong>: \(f(x; \alpha, \beta) = \frac{x^{\alpha-1}(1-x)^{\beta-1}}{B(\alpha, \beta)}\)</p> <p><strong>Applications</strong>:</p> <ul> <li>Bayesian modeling of probabilities</li> <li>Thompson sampling in reinforcement learning</li> </ul> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">scipy.stats</span> <span class="kn">import</span> <span class="n">beta</span>

<span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1000</span><span class="p">)</span>
<span class="k">for</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="ow">in</span> <span class="p">[(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">)]:</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">beta</span><span class="p">.</span><span class="nf">pdf</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">),</span> <span class="n">label</span><span class="o">=</span><span class="sa">f</span><span class="sh">"</span><span class="s">α=</span><span class="si">{</span><span class="n">a</span><span class="si">}</span><span class="s">, β=</span><span class="si">{</span><span class="n">b</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">"</span><span class="s">Beta Distributions</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">legend</span><span class="p">()</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div> <blockquote> <p>The Beta distribution is defined over the interval [0,1] and is commonly used to model probabilities themselves. In the visualization below, we use shape parameters \(\alpha = 2\) and \(\beta = 5\). This creates a distribution skewed toward 0, reflecting a belief that lower probability values are more likely. Beta distributions are essential in Bayesian statistics and exploration-exploitation algorithms like Thompson Sampling.</p> </blockquote> <div style="display: flex; justify-content: center;"> <div id="betaPlot" style="width:100%;max-width:700px;"></div> </div> <script>function gamma(t){return 1===t?1:(t-1)*gamma(t-1)}function betaPDF(t,a,e){const o=(t,a)=>gamma(t)*gamma(a)/gamma(t+a);return Math.pow(t,a-1)*Math.pow(1-t,e-1)/o(a,e)}const betaX=Array.from({length:100},(t,a)=>a/100),betaY=betaX.map(t=>betaPDF(t,2,5));Plotly.newPlot("betaPlot",[{x:betaX,y:betaY,type:"scatter",mode:"lines",line:{color:"steelblue"}}],{title:"Beta Distribution (\u03b1 = 2, \u03b2 = 5)",xaxis:{title:"x (0 to 1)"},yaxis:{title:"Density"}});</script> <hr/> <h3 id="5-gamma-distribution">5. Gamma Distribution</h3> <p>A two-parameter generalization of the exponential distribution.</p> <p><strong>PDF</strong>: \(f(x) = \frac{\beta^\alpha}{\Gamma(\alpha)} x^{\alpha-1} e^{-\beta x}\)</p> <p><strong>Applications</strong>:</p> <ul> <li>Waiting time models</li> <li>Priors in Bayesian inference</li> </ul> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">scipy.stats</span> <span class="kn">import</span> <span class="n">gamma</span>

<span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">1000</span><span class="p">)</span>
<span class="k">for</span> <span class="n">shape</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">]:</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">gamma</span><span class="p">.</span><span class="nf">pdf</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">shape</span><span class="p">),</span> <span class="n">label</span><span class="o">=</span><span class="sa">f</span><span class="sh">"</span><span class="s">Shape=</span><span class="si">{</span><span class="n">shape</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">"</span><span class="s">Gamma Distributions</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">legend</span><span class="p">()</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div> <hr/> <h2 id="multivariate-distributions">Multivariate Distributions</h2> <p>Multivariate distributions model <strong>joint behavior of multiple variables</strong>, especially when they are correlated.</p> <hr/> <h3 id="joint-marginal-and-conditional-distributions">Joint, Marginal, and Conditional Distributions</h3> <ul> <li><strong>Joint distribution</strong>: \(P(X, Y)\) gives the probability of two variables occurring together.</li> <li><strong>Marginal distribution</strong>: \(P(X) = \sum_Y P(X, Y)\), projecting one variable.</li> <li><strong>Conditional distribution</strong>: \(P(Y \mid X) = \frac{P(X, Y)}{P(X)}\)</li> </ul> <p>These are critical for reasoning about dependencies, causality, and generative models.</p> <hr/> <h3 id="multivariate-normal-distribution">Multivariate Normal Distribution</h3> <p>Defined by a mean vector \(\mu\) and a covariance matrix \(\Sigma\).</p> \[X \sim \mathcal{N}(\mu, \Sigma)\] <p><strong>Applications</strong>:</p> <ul> <li>PCA (eigen decomposition of \(\Sigma\))</li> <li>Gaussian Mixture Models (GMMs)</li> <li>Modeling correlated features</li> </ul> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="n">seaborn</span> <span class="k">as</span> <span class="n">sns</span>

<span class="n">mean</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span>
<span class="n">cov</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mf">0.8</span><span class="p">],</span> <span class="p">[</span><span class="mf">0.8</span><span class="p">,</span> <span class="mi">1</span><span class="p">]]</span>

<span class="n">samples</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">multivariate_normal</span><span class="p">(</span><span class="n">mean</span><span class="p">,</span> <span class="n">cov</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">1000</span><span class="p">)</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">scatterplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">samples</span><span class="p">[:,</span> <span class="mi">0</span><span class="p">],</span> <span class="n">y</span><span class="o">=</span><span class="n">samples</span><span class="p">[:,</span> <span class="mi">1</span><span class="p">])</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">"</span><span class="s">Samples from Bivariate Normal Distribution</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="sh">"</span><span class="s">X1</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">ylabel</span><span class="p">(</span><span class="sh">"</span><span class="s">X2</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">axis</span><span class="p">(</span><span class="sh">"</span><span class="s">equal</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div> <hr/> <h2 id="simulating-datasets-in-practice">Simulating Datasets in Practice</h2> <p>Simulating data allows us to prototype models, test ideas, and understand algorithms.</p> <h3 id="example-binary-classification-dataset">Example: Binary Classification Dataset</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">sklearn.datasets</span> <span class="kn">import</span> <span class="n">make_classification</span>
<span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>

<span class="n">X</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="nf">make_classification</span><span class="p">(</span><span class="n">n_samples</span><span class="o">=</span><span class="mi">1000</span><span class="p">,</span> <span class="n">n_features</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">n_informative</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">n_classes</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="sa">f</span><span class="sh">"</span><span class="s">Feature_</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="sh">"</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">X</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">])])</span>
<span class="n">df</span><span class="p">[</span><span class="sh">"</span><span class="s">Target</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">y</span>
<span class="nf">print</span><span class="p">(</span><span class="n">df</span><span class="p">.</span><span class="nf">head</span><span class="p">())</span>
</code></pre></div></div> <h3 id="example-two-class-gaussian-clusters">Example: Two-Class Gaussian Clusters</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">class0</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">normal</span><span class="p">(</span><span class="n">loc</span><span class="o">=-</span><span class="mi">2</span><span class="p">,</span> <span class="n">scale</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="p">(</span><span class="mi">500</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
<span class="n">class1</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">normal</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">scale</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="p">(</span><span class="mi">500</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
<span class="n">labels</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="mi">500</span> <span class="o">+</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="mi">500</span><span class="p">)</span>
<span class="n">X</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">vstack</span><span class="p">([</span><span class="n">class0</span><span class="p">,</span> <span class="n">class1</span><span class="p">])</span>
</code></pre></div></div> <hr/> <h2 id="summary-table-choosing-the-right-distribution">Summary Table: Choosing the Right Distribution</h2> <table> <thead> <tr> <th><strong>Distribution</strong></th> <th><strong>Common Application</strong></th> </tr> </thead> <tbody> <tr> <td>Bernoulli</td> <td>Binary classification</td> </tr> <tr> <td>Binomial</td> <td>Ensemble voting, success trials</td> </tr> <tr> <td>Poisson</td> <td>Anomaly detection, event counts</td> </tr> <tr> <td>Normal</td> <td>Error modeling, PCA, regression</td> </tr> <tr> <td>Exponential</td> <td>Time-to-event, survival modeling</td> </tr> <tr> <td>Beta</td> <td>Probability modeling, Bayesian inference</td> </tr> <tr> <td>Gamma</td> <td>Duration modeling, Bayesian priors</td> </tr> <tr> <td>Multivariate Normal</td> <td>Feature correlation, PCA, GMM</td> </tr> </tbody> </table> <hr/> <p>Probability distributions are at the core of every model you build in machine learning. They guide how you generate, structure, and analyze data. Whether you are simulating features, modeling uncertainty, or decomposing variance in PCA, the right distribution makes all the difference.</p> <p>In the next post, we’ll move into the world of <strong>Bayesian inference</strong> and learn how concepts like <strong>MLE, MAP</strong>, and <strong>priors</strong> shape our understanding of parameter estimation.</p>]]></content><author><name></name></author><category term="machine-learning"/><category term="math"/><category term="math-for-ml"/><category term="ml"/><category term="ai"/><category term="probability-statistics"/><category term="math"/><summary type="html"><![CDATA[Probability & Statistics 2 - Mathematics for Machine Learning]]></summary></entry><entry><title type="html">Probability &amp;amp; Statistics for Data Science - Foundations of Probability</title><link href="https://joyoshish.github.io/blog/2022/mathforml-probstat1/" rel="alternate" type="text/html" title="Probability &amp;amp; Statistics for Data Science - Foundations of Probability"/><published>2022-06-01T00:00:00+00:00</published><updated>2022-06-01T00:00:00+00:00</updated><id>https://joyoshish.github.io/blog/2022/mathforml-probstat1</id><content type="html" xml:base="https://joyoshish.github.io/blog/2022/mathforml-probstat1/"><![CDATA[<p>When we build machine learning models, we’re not just dealing with data — we’re dealing with <strong>uncertainty</strong>. Whether we’re classifying emails, predicting stock prices, or detecting fraud, our models are built on probabilistic foundations that allow them to reason under uncertainty.</p> <p>This post covers the <strong>core probability theory concepts</strong> that underpin machine learning, deep learning, and AI. We’ll explore how concepts like <strong>sample space, events, random variables, expectation, variance, the Law of Large Numbers</strong>, and the <strong>Central Limit Theorem</strong> connect directly to real-world ML applications.</p> <hr/> <h2 id="sample-space-events-and-conditional-probability">Sample Space, Events, and Conditional Probability</h2> <p>To understand how probability plays a role in ML, we must first start with the basics.</p> <ul> <li><strong>Sample Space ( \(\Omega\) )</strong>: The set of all possible outcomes of an experiment.</li> <li><strong>Event</strong>: A subset of the sample space. It’s a collection of outcomes we’re interested in.</li> <li><strong>Probability Function</strong>: Assigns a number between 0 and 1 to each event, satisfying the axioms of probability.</li> </ul> <p><strong>Example</strong>: Suppose we build a binary classifier to detect spam.</p> <ul> <li> \[\Omega = \{\text{spam}, \text{not spam}\}\] </li> <li>\(P(\text{spam}) = 0.4\), \(P(\text{not spam}) = 0.6\)</li> </ul> <h3 id="independence">Independence</h3> <p>Two events \(A\) and \(B\) are <strong>independent</strong> if the occurrence of one does not affect the probability of the other:</p> \[P(A \cap B) = P(A) \cdot P(B)\] <p>In ML, this concept appears in <strong>Naive Bayes classifiers</strong>, where we assume that features are conditionally independent given the class label — a simplification that works surprisingly well in practice.</p> <h3 id="conditional-probability">Conditional Probability</h3> <p>Conditional probability tells us the probability of an event \(A\) given that event \(B\) has occurred:</p> \[P(A \mid B) = \frac{P(A \cap B)}{P(B)}\] <p>This is the foundation of <strong>Bayes’ Theorem</strong>, which is used to update predictions as new information becomes available — exactly what happens when your email spam filter learns from new messages.</p> <hr/> <h2 id="random-variables-discrete-and-continuous">Random Variables (Discrete and Continuous)</h2> <p>A <strong>random variable</strong> maps outcomes from the sample space to numerical values.</p> <h3 id="discrete-random-variables">Discrete Random Variables</h3> <p>These take <strong>countable</strong> values (like integers). Examples include:</p> <ul> <li>Number of clicks on an ad</li> <li>Whether a transaction is fraudulent (0 or 1)</li> </ul> <p>A discrete random variable \(X\) has a <strong>probability mass function (PMF)</strong>:</p> \[P(X = x) = p(x)\] <h3 id="continuous-random-variables">Continuous Random Variables</h3> <p>These take <strong>uncountably infinite</strong> values (e.g., any real number). Examples:</p> <ul> <li>The exact temperature in a room</li> <li>Probability of customer spending</li> </ul> <p>A continuous random variable has a <strong>probability density function (PDF)</strong> such that:</p> \[P(a \leq X \leq b) = \int_a^b f(x) \, dx\] <p>In ML, we use random variables to model data distributions. For example, we assume weights in Bayesian models come from a Gaussian prior — a continuous random variable.</p> <hr/> <h2 id="expectation-variance-and-standard-deviation">Expectation, Variance, and Standard Deviation</h2> <p>These are the building blocks of <strong>descriptive statistics</strong> and are critical to understanding model behavior.</p> <h3 id="expectation">Expectation</h3> <p>Also called the <strong>mean</strong> or expected value:</p> <ul> <li> <p>For discrete \(X\): \(\mathbb{E}[X] = \sum_x x \cdot P(X = x)\)</p> </li> <li> <p>For continuous \(X\): \(\mathbb{E}[X] = \int_{-\infty}^{\infty} x \cdot f(x) \, dx\)</p> </li> </ul> <p>Think of it as the <strong>center of mass</strong> of the distribution.</p> <h3 id="variance">Variance</h3> <p>Measures the <strong>spread</strong> of the random variable around the mean:</p> \[\text{Var}(X) = \mathbb{E}[(X - \mathbb{E}[X])^2]\] <p>This gives us insight into how uncertain a prediction might be. A model with low variance makes <strong>consistent predictions</strong>.</p> <h3 id="standard-deviation">Standard Deviation</h3> <p>The square root of variance:</p> \[\sigma = \sqrt{\text{Var}(X)}\] <p>Used commonly in ML to <strong>normalize features</strong> and analyze error distributions.</p> <hr/> <h2 id="law-of-large-numbers-lln">Law of Large Numbers (LLN)</h2> <p>The Law of Large Numbers states that as the sample size \(n\) increases, the <strong>sample mean</strong> of random variables converges to the <strong>true mean</strong>:</p> \[\lim_{n \to \infty} \frac{1}{n} \sum_{i=1}^n X_i = \mathbb{E}[X]\] <p>This justifies why <strong>averaging predictions across many models (ensembles)</strong> improves performance — individual errors average out.</p> <p>Let’s simulate this idea by drawing samples from a uniform distribution \(\mathcal{U}(0, 1)\) and watching how the sample mean stabilizes:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>

<span class="c1"># Reproducibility
</span><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">seed</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span>

<span class="c1"># Generate 10,000 samples from a Uniform[0,1] distribution
</span><span class="n">samples</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">uniform</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">10000</span><span class="p">)</span>

<span class="c1"># Compute sample means as we increase sample size
</span><span class="n">sample_means</span> <span class="o">=</span> <span class="p">[</span><span class="n">np</span><span class="p">.</span><span class="nf">mean</span><span class="p">(</span><span class="n">samples</span><span class="p">[:</span><span class="n">i</span><span class="p">])</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">samples</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)]</span>

<span class="c1"># Plotting
</span><span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">sample_means</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">Sample Mean</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">axhline</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">red</span><span class="sh">'</span><span class="p">,</span> <span class="n">linestyle</span><span class="o">=</span><span class="sh">'</span><span class="s">--</span><span class="sh">'</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">True Mean = 0.5</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Number of Samples</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">ylabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Sample Mean</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">"</span><span class="s">Law of Large Numbers (LLN)</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">legend</span><span class="p">()</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div> <div style="display: flex; justify-content: center;"> <div id="llnPlot" style="width:100%;max-width:700px;"></div> </div> <script src="https://cdn.plot.ly/plotly-latest.min.js"></script> <script>const xVals=Array.from({length:1e3},(e,a)=>a+1),yVals=xVals.map(e=>{let a=0;for(let l=0;l<e;l++)a+=Math.random();return a/e}),trace1={x:xVals,y:yVals,mode:"lines",name:"Sample Mean"},trace2={x:xVals,y:Array(xVals.length).fill(.5),mode:"lines",name:"True Mean = 0.5",line:{dash:"dot",color:"red"}};Plotly.newPlot("llnPlot",[trace1,trace2],{title:"Law of Large Numbers",xaxis:{title:"Number of Samples"},yaxis:{title:"Sample Mean"}});</script> <p>As shown in the plot, the sample mean starts off noisy but <strong>converges toward 0.5</strong>, which is the true expected value of a uniform distribution over [0, 1].</p> <h3 id="ml-insight">ML Insight:</h3> <p>In <strong>bagging methods</strong> (e.g., Random Forests), we train many models on bootstrapped samples and average their predictions. The LLN guarantees that as the number of trees increases, the aggregate prediction becomes more stable and closer to the true signal.</p> <hr/> <h2 id="central-limit-theorem-clt">Central Limit Theorem (CLT)</h2> <p>The CLT is one of the most powerful ideas in all of statistics.</p> <blockquote> <p><strong>Theorem</strong>: The sum (or average) of a large number of <strong>independent, identically distributed (i.i.d.)</strong> random variables approaches a <strong>Normal distribution</strong>, regardless of the original distribution.</p> </blockquote> <p>Formally, for i.i.d. variables \(X_1, X_2, \dots, X_n\):</p> \[\bar{X}_n = \frac{1}{n} \sum_{i=1}^n X_i \quad \text{and} \quad \frac{\bar{X}_n - \mu}{\sigma / \sqrt{n}} \xrightarrow{d} \mathcal{N}(0,1)\] <p>This explains <strong>why the normal distribution is so prevalent</strong> in ML — it naturally arises when averaging data, sampling errors, or even when computing model parameter estimates.</p> <hr/> <p>Let’s visualize this with a non-Gaussian distribution — the <strong>exponential distribution</strong>:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="n">seaborn</span> <span class="k">as</span> <span class="n">sns</span>

<span class="c1"># Draw means from 1000 samples, each of size 50, from an Exponential distribution
</span><span class="n">means</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1000</span><span class="p">):</span>
    <span class="n">sample</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">exponential</span><span class="p">(</span><span class="n">scale</span><span class="o">=</span><span class="mf">1.0</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">50</span><span class="p">)</span>
    <span class="n">means</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">mean</span><span class="p">(</span><span class="n">sample</span><span class="p">))</span>

<span class="c1"># Plotting
</span><span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">histplot</span><span class="p">(</span><span class="n">means</span><span class="p">,</span> <span class="n">bins</span><span class="o">=</span><span class="mi">30</span><span class="p">,</span> <span class="n">kde</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">"</span><span class="s">Central Limit Theorem (CLT): Means from Exponential Distribution</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Sample Mean</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">ylabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Frequency</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div> <div style="display: flex; justify-content: center;"> <div id="cltPlot" style="width:100%;max-width:700px;"></div> </div> <script src="https://cdn.plot.ly/plotly-latest.min.js"></script> <script>const sampleMeans=[];for(let e=0;e<1e3;e++){let e=0;for(let t=0;t<50;t++){const t=Math.random();e+=-Math.log(1-t)}sampleMeans.push(e/50)}const trace={x:sampleMeans,type:"histogram",marker:{color:"skyblue"}};Plotly.newPlot("cltPlot",[trace],{title:"Central Limit Theorem: Sampling Means from Exponential Distribution",xaxis:{title:"Sample Mean"},yaxis:{title:"Frequency"}});</script> <p>Despite the exponential distribution being <strong>highly skewed</strong>, the <strong>histogram of sample means is bell-shaped</strong>, showing the CLT in action.</p> <hr/> <h2 id="applications-in-machine-learning">Applications in Machine Learning</h2> <p>Now that we’ve built up the mathematical foundations, let’s see how they <strong>directly impact practical machine learning workflows</strong>.</p> <hr/> <h3 id="probabilistic-modeling">Probabilistic Modeling</h3> <p>Probabilistic models like:</p> <ul> <li><strong>Naive Bayes</strong></li> <li><strong>Gaussian Mixture Models</strong></li> <li><strong>Bayesian Linear Regression</strong></li> </ul> <p>…are all rooted in these probability concepts. They define <strong>likelihoods</strong>, <strong>priors</strong>, and <strong>posteriors</strong>, which use <strong>conditional probability</strong>, <strong>distributions</strong>, and <strong>expectation</strong>.</p> <p>Even advanced models like <strong>Variational Autoencoders (VAEs)</strong> rely on these basics — using expectations, KL divergence, and Normal distributions.</p> <hr/> <h3 id="uncertainty-quantification">Uncertainty Quantification</h3> <p>Models that output probabilities (like softmax classifiers or probabilistic regressors) provide a <strong>distribution over outputs</strong>, allowing you to quantify uncertainty.</p> <ul> <li>Knowing the <strong>variance</strong> of a model’s prediction helps determine confidence.</li> <li>Using the <strong>CLT</strong>, you can estimate confidence intervals around predictions.</li> </ul> <p>This is critical in <strong>high-stakes applications</strong> like medicine, finance, and autonomous driving.</p> <hr/> <h3 id="why-empirical-means-work-ensemble-models">Why Empirical Means Work (Ensemble Models)</h3> <p>Ensemble techniques like:</p> <ul> <li><strong>Bagging (Random Forests)</strong></li> <li><strong>Boosting (XGBoost, LightGBM)</strong></li> <li><strong>Model Averaging (e.g., Stacking)</strong></li> </ul> <p>…all rely on the <strong>Law of Large Numbers</strong> and <strong>Central Limit Theorem</strong>.</p> <p>By aggregating multiple noisy models, the final prediction has:</p> <ul> <li>Lower variance</li> <li>Greater stability</li> <li>Better generalization</li> </ul> <p>The magic lies in averaging — and the math tells us why that works.</p> <hr/> <h2 id="wrapping-up">Wrapping Up</h2> <p>Probability theory is more than a theoretical curiosity — it’s the <strong>engine behind machine learning</strong>. From modeling uncertainties, understanding feature distributions, building generative models, and even constructing deep learning layers — these foundational ideas are everywhere.</p> <hr/> <p><strong>Next Up</strong>: In the next post, we’ll dive into <strong>Probability Distributions</strong> — understanding Bernoulli, Binomial, Gaussian, and how they shape the models we build.</p>]]></content><author><name></name></author><category term="machine-learning"/><category term="math"/><category term="math-for-ml"/><category term="ml"/><category term="ai"/><category term="probability-statistics"/><category term="math"/><summary type="html"><![CDATA[Probability & Statistics 1 - Mathematics for Machine Learning]]></summary></entry><entry><title type="html">Linear Algebra Basics for ML - Vector Spaces and Transformations</title><link href="https://joyoshish.github.io/blog/2022/mathforml-linalg5/" rel="alternate" type="text/html" title="Linear Algebra Basics for ML - Vector Spaces and Transformations"/><published>2022-02-07T00:00:00+00:00</published><updated>2022-02-07T00:00:00+00:00</updated><id>https://joyoshish.github.io/blog/2022/mathforml-linalg5</id><content type="html" xml:base="https://joyoshish.github.io/blog/2022/mathforml-linalg5/"><![CDATA[<h2 id="the-need-for-vector-spaces-and-transformations">The Need for Vector Spaces and Transformations</h2> <p>When we work with machine learning and data science, we often deal with data in various forms, such as images, text, or numerical tables. The real challenge is to represent and manipulate this data efficiently. This is where the concept of vector spaces and transformations comes into play. In simple terms, vector spaces allow us to represent data, and transformations help us modify or map this data to different representations.</p> <p>In machine learning, data is typically represented as vectors in a vector space, and various algorithms manipulate these vectors to extract features, perform operations, or make predictions. Linear transformations help us understand how the data changes when we move it between different coordinate systems. Affine transformations go a step further by adding translations, which are particularly useful in fields like computer vision, where we often deal with translations and rotations of images.</p> <p>In this blog post, we will explore vector spaces and transformations in detail, linking them to feature engineering and model performance improvements. Let’s start by understanding vector spaces and linear transformations.</p> <h2 id="vector-spaces-the-foundation-of-data-representation">Vector Spaces: The Foundation of Data Representation</h2> <h3 id="what-is-a-vector-space">What is a Vector Space?</h3> <p>A vector space (or linear space) is a collection of vectors that can be added together and multiplied by scalars, subject to certain rules. Mathematically, a vector space \(V\) over a field \(F\) is a set of objects (called vectors), along with two operations: vector addition and scalar multiplication. These operations must satisfy the following axioms:</p> <ul> <li> <p><strong>Commutativity of addition</strong>:<br/> \(\mathbf{v} + \mathbf{w} = \mathbf{w} + \mathbf{v}\)</p> </li> <li> <p><strong>Associativity of addition</strong>:<br/> \((\mathbf{v} + \mathbf{w}) + \mathbf{u} = \mathbf{v} + (\mathbf{w} + \mathbf{u})\)</p> </li> <li> <p><strong>Additive identity</strong>: There exists a zero vector \(\mathbf{0}\) such that<br/> \(\mathbf{v} + \mathbf{0} = \mathbf{v}\)</p> </li> <li> <p><strong>Additive inverse</strong>: For every vector \(\mathbf{v}\), there exists \(-\mathbf{v}\) such that<br/> \(\mathbf{v} + (-\mathbf{v}) = \mathbf{0}\)</p> </li> <li> <p><strong>Distributive properties of scalar multiplication</strong>:<br/> \(a(\mathbf{v} + \mathbf{w}) = a\mathbf{v} + a\mathbf{w}\)<br/> \((a + b)\mathbf{v} = a\mathbf{v} + b\mathbf{v}\)</p> </li> <li> <p><strong>Multiplicative identity of scalars</strong>:<br/> \(1 \cdot \mathbf{v} = \mathbf{v}\)</p> </li> <li> <p><strong>Compatibility of scalar multiplication</strong>:<br/> \(a(b\mathbf{v}) = (ab)\mathbf{v}\)</p> </li> </ul> <p>In machine learning, we often think of a vector space as the space in which the data exists. For example, if you have a dataset with \(n\) features, each data point is a vector in \(n\)-dimensional space. The entire dataset is a collection of vectors that form a subspace of that \(n\)-dimensional space.</p> <h3 id="example-vector-space-in-feature-engineering">Example: Vector Space in Feature Engineering</h3> <p>Let’s say we are working with a dataset containing two features, such as height and weight of individuals. These features can be represented as vectors in a 2-dimensional vector space, where each point corresponds to a person’s height and weight. The feature vectors in this space can be manipulated, transformed, and analyzed for machine learning tasks like clustering, regression, and classification.</p> <h2 id="motivation-behind-linear-transformations">Motivation Behind Linear Transformations</h2> <p>A linear transformation is a function that maps a vector in one vector space to a vector in another vector space, preserving the operations of vector addition and scalar multiplication. This is extremely important in machine learning, as many algorithms involve transforming data into new spaces to extract more useful features or to make it easier for the model to learn.</p> <p>For example, in Principal Component Analysis (PCA), we perform a linear transformation that projects high-dimensional data onto a lower-dimensional subspace, allowing us to visualize or analyze the data more effectively. The key point is that linear transformations preserve the structure of the data in a way that simplifies operations like regression or classification.</p> <h2 id="linear-transformations-and-change-of-basis">Linear Transformations and Change of Basis</h2> <h3 id="what-is-a-change-of-basis">What is a Change of Basis?</h3> <p>In machine learning, we may need to switch between different coordinate systems, depending on how we want to represent our data. This is where the concept of a change of basis comes in. When we apply a linear transformation to a vector, we can represent it in a new basis (a new set of basis vectors) that might be more convenient for our analysis.</p> <p>For example, imagine you have a 2D dataset with features height and weight. These features are represented in the standard basis of the 2D plane, i.e., the x-axis and y-axis. However, you may want to rotate the data such that the axes align with the directions of maximum variance. This is a change of basis, where we apply a linear transformation to rotate the data.</p> <p>Mathematically, if \(A\) is the transformation matrix and \(\mathbf{x}\) is a vector in the original basis, then the transformed vector \(\mathbf{x'}\) in the new basis is given by:<br/> \(\mathbf{x'} = A \mathbf{x}\)</p> <h3 id="practical-example-change-of-basis-in-pca">Practical Example: Change of Basis in PCA</h3> <p>Consider PCA, where we perform an eigen-decomposition of the covariance matrix to find the principal components. These principal components form a new basis, and we can transform the data into this new basis by applying the linear transformation defined by the eigenvectors of the covariance matrix. The new dataset will have the same data points but represented in terms of the directions of maximum variance (the principal components).</p> <p>This transformation often helps in reducing the dimensionality of the data while retaining the most important features. In essence, PCA is a linear transformation that changes the basis from the original feature space to the space of principal components.</p> <h2 id="affine-transformations-beyond-linear-mappings">Affine Transformations: Beyond Linear Mappings</h2> <h3 id="what-is-an-affine-transformation">What is an Affine Transformation?</h3> <p>An affine transformation is a linear transformation followed by a translation. This means that affine transformations include not just rotations, scaling, and shearing, but also shifts in space. Mathematically, an affine transformation can be represented as:<br/> \(\mathbf{x'} = A \mathbf{x} + \mathbf{b}\) where \(A\) is the linear transformation matrix, \(\mathbf{x}\) is the original vector, \(\mathbf{b}\) is the translation vector, and \(\mathbf{x'}\) is the transformed vector.</p> <p>Affine transformations are extremely useful in image processing and computer vision, where we often need to rotate, scale, or translate images.</p> <h3 id="example-image-manipulation-with-affine-transformations">Example: Image Manipulation with Affine Transformations</h3> <p>In computer vision, affine transformations are commonly used for tasks such as rotating or resizing images. Consider a scenario where we want to rotate an image by a certain angle or scale it up or down. These operations can be represented as affine transformations.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">cv2</span>
<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="c1"># Load image
</span><span class="n">image</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">imread</span><span class="p">(</span><span class="sh">'</span><span class="s">image.jpg</span><span class="sh">'</span><span class="p">)</span>

<span class="c1"># Define affine transformation matrix (rotation)
</span><span class="n">angle</span> <span class="o">=</span> <span class="mi">45</span>
<span class="n">center</span> <span class="o">=</span> <span class="p">(</span><span class="n">image</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">//</span> <span class="mi">2</span><span class="p">,</span> <span class="n">image</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">//</span> <span class="mi">2</span><span class="p">)</span>
<span class="n">rotation_matrix</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">getRotationMatrix2D</span><span class="p">(</span><span class="n">center</span><span class="p">,</span> <span class="n">angle</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>

<span class="c1"># Apply affine transformation (rotation)
</span><span class="n">rotated_image</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">warpAffine</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">rotation_matrix</span><span class="p">,</span> <span class="p">(</span><span class="n">image</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">image</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>

<span class="c1"># Show the result
</span><span class="n">cv2</span><span class="p">.</span><span class="nf">imshow</span><span class="p">(</span><span class="sh">'</span><span class="s">Rotated Image</span><span class="sh">'</span><span class="p">,</span> <span class="n">rotated_image</span><span class="p">)</span>
<span class="n">cv2</span><span class="p">.</span><span class="nf">waitKey</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">cv2</span><span class="p">.</span><span class="nf">destroyAllWindows</span><span class="p">()</span>
</code></pre></div></div> <p>In this example, the image is rotated by 45 degrees around its center, and the transformation is applied using an affine matrix.</p> <h3 id="affine-transformations-in-feature-engineering">Affine Transformations in Feature Engineering</h3> <p>In feature engineering, affine transformations can be used to modify data features, for example, by scaling or translating them. This can help improve the performance of machine learning models, especially when the features vary widely in magnitude or range.</p> <p>For instance, we might apply an affine transformation to normalize or standardize data by subtracting the mean (translation) and scaling the data by its standard deviation (scaling). This is a common preprocessing step to improve the performance of algorithms like linear regression or neural networks.</p> <h2 id="application-data-transformation-in-feature-engineering">Application: Data Transformation in Feature Engineering</h2> <h3 id="why-transform-data">Why Transform Data?</h3> <p>In machine learning, feature engineering refers to the process of applying mathematical functions to features to improve model performance. Data transformations, such as scaling, normalizing, and encoding, are common operations used in feature engineering.</p> <ul> <li> <p><strong>Scaling</strong>: Many machine learning algorithms, such as k-nearest neighbors or gradient descent, perform better when features are on a similar scale. Affine transformations such as min-max scaling or standardization (subtracting the mean and dividing by the standard deviation) are commonly used to scale features.</p> </li> <li> <p><strong>Dimensionality Reduction</strong>: Techniques like PCA, as we mentioned earlier, involve linear transformations to reduce the dimensionality of data. By transforming the data into a lower-dimensional space, we retain the most important features while discarding noise or less useful features.</p> </li> <li> <p><strong>Non-linear Transformations</strong>: Sometimes, applying non-linear transformations to data, such as log transformations or polynomial features, can help make the data more suitable for machine learning models.</p> </li> </ul> <h3 id="example-data-scaling-with-an-affine-transformation">Example: Data Scaling with an Affine Transformation</h3> <p>Consider a dataset with two features, age and income, that have vastly different scales. Income may range from thousands to millions, while age ranges from 0 to 100. Applying an affine transformation like standardization can help bring both features onto a similar scale:</p> <ul> <li>Translate each feature by subtracting the mean.</li> <li>Scale each feature by dividing by its standard deviation.</li> </ul> <p>Mathematically, we can apply this affine transformation to each feature:<br/> \(\mathbf{x'} = \frac{\mathbf{x} - \mu}{\sigma}\) where \(\mu\) is the mean and \(\sigma\) is the standard deviation of the feature.</p> <p>In Python, we can perform this transformation using <code class="language-plaintext highlighter-rouge">sklearn</code>:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">sklearn.preprocessing</span> <span class="kn">import</span> <span class="n">StandardScaler</span>
<span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>

<span class="c1"># Example dataset
</span><span class="n">data</span> <span class="o">=</span> <span class="p">{</span><span class="sh">'</span><span class="s">Age</span><span class="sh">'</span><span class="p">:</span> <span class="p">[</span><span class="mi">23</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">29</span><span class="p">],</span> <span class="sh">'</span><span class="s">Income</span><span class="sh">'</span><span class="p">:</span> <span class="p">[</span><span class="mi">50000</span><span class="p">,</span> <span class="mi">120000</span><span class="p">,</span> <span class="mi">85000</span><span class="p">,</span> <span class="mi">150000</span><span class="p">,</span> <span class="mi">65000</span><span class="p">]}</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>

<span class="c1"># Apply standardization (affine transformation)
</span><span class="n">scaler</span> <span class="o">=</span> <span class="nc">StandardScaler</span><span class="p">()</span>
<span class="n">df_scaled</span> <span class="o">=</span> <span class="n">scaler</span><span class="p">.</span><span class="nf">fit_transform</span><span class="p">(</span><span class="n">df</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="n">df_scaled</span><span class="p">)</span>
</code></pre></div></div> <p>This will standardize both features, bringing them to the same scale, which can help improve the performance of models like linear regression or k-means clustering.</p> <hr/> <p>In this post, we explored <strong>vector spaces</strong>, <strong>linear transformations</strong>, and <strong>affine transformations</strong>, all of which are foundational concepts in linear algebra that play a critical role in machine learning and data science. From <strong>representing data in vector spaces</strong> to <strong>transforming that data</strong> in meaningful ways, these concepts help us better understand and manipulate data, improving our ability to build and refine machine learning models.</p> <p>Whether you’re working with <strong>feature engineering</strong>, <strong>dimensionality reduction</strong>, or <strong>image transformations</strong>, understanding vector spaces and transformations allows you to tackle complex problems and improve your models’ performance.</p> <p>Remember, the next time you’re faced with a complex dataset or need to manipulate features, think about how <strong>vector spaces</strong> and <strong>transformations</strong> can help simplify the problem and enhance your machine learning pipeline.</p>]]></content><author><name></name></author><category term="machine-learning"/><category term="math"/><category term="math-for-ml"/><category term="ml"/><category term="ai"/><category term="linear-algebra"/><category term="math"/><summary type="html"><![CDATA[Linear Algebra 5 - Mathematics for Machine Learning]]></summary></entry><entry><title type="html">Linear Algebra Basics for ML - Advanced Topics</title><link href="https://joyoshish.github.io/blog/2022/mathforml-linalg6/" rel="alternate" type="text/html" title="Linear Algebra Basics for ML - Advanced Topics"/><published>2022-02-07T00:00:00+00:00</published><updated>2022-02-07T00:00:00+00:00</updated><id>https://joyoshish.github.io/blog/2022/mathforml-linalg6</id><content type="html" xml:base="https://joyoshish.github.io/blog/2022/mathforml-linalg6/"><![CDATA[<h1 id="advanced-matrix-factorizations-in-machine-learning">Advanced Matrix Factorizations in Machine Learning</h1> <p>Matrix factorizations are a foundational tool in linear algebra and play a critical role in modern machine learning. They simplify matrix computations, enable numerical stability, and reveal latent structures in data. This post explores several advanced matrix factorizations used in machine learning and deep learning, with complete mathematical derivations and practical insights.</p> <p>This section covers:</p> <ul> <li>LU Decomposition</li> <li>Cholesky Decomposition</li> <li>QR Decomposition</li> <li>Non-negative Matrix Factorization (NMF)</li> </ul> <hr/> <h2 id="1-lu-decomposition">1. LU Decomposition</h2> <h3 id="definition">Definition</h3> <p>LU decomposition factors a square matrix \(A \in \mathbb{R}^{n \times n}\) into the product of two matrices:</p> \[A = LU\] <p>Where:</p> <ul> <li>\(L\) is a lower triangular matrix with ones on its diagonal (\(L_{ii} = 1\)),</li> <li>\(U\) is an upper triangular matrix.</li> </ul> <p>If row pivoting is required, the decomposition is written as:</p> \[PA = LU\] <p>Where \(P\) is a permutation matrix.</p> <h3 id="algorithm">Algorithm</h3> <p>Given:</p> \[A = \begin{bmatrix} a_{11} &amp; a_{12} &amp; \cdots &amp; a_{1n} \\ a_{21} &amp; a_{22} &amp; \cdots &amp; a_{2n} \\ \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\ a_{n1} &amp; a_{n2} &amp; \cdots &amp; a_{nn} \end{bmatrix},\] <p>we use Gaussian elimination to eliminate entries below the diagonal. The multipliers used are stored in \(L\), and the remaining upper triangular form becomes \(U\).</p> <p>For each row \(j &gt; i\), compute the multiplier:</p> \[l_{ji} = \frac{a_{ji}}{a_{ii}}\] <p>Then update row \(j\):</p> \[a_{j\cdot} = a_{j\cdot} - l_{ji} \cdot a_{i\cdot}\] <p>After completing all iterations, the matrix \(A\) is factorized into \(L\) and \(U\).</p> <h3 id="applications-in-machine-learning">Applications in Machine Learning</h3> <ul> <li>Efficiently solving systems of equations \(Ax = b\) by solving \(Ly = b\) then \(Ux = y\),</li> <li>Matrix inversion,</li> <li>Numerical optimization routines in regression and convex problems.</li> </ul> <hr/> <h2 id="2-cholesky-decomposition">2. Cholesky Decomposition</h2> <h3 id="definition-1">Definition</h3> <p>Cholesky decomposition applies to <strong>symmetric, positive-definite</strong> matrices. For a matrix \(A \in \mathbb{R}^{n \times n}\) satisfying:</p> <ul> <li>\(A = A^T\) (symmetry),</li> <li>\(x^T A x &gt; 0\) for all non-zero \(x \in \mathbb{R}^n\) (positive-definiteness),</li> </ul> <p>there exists a unique lower triangular matrix \(L\) such that:</p> \[A = LL^T\] <h3 id="construction">Construction</h3> <p>We compute each entry of \(L\) as follows:</p> <p>For diagonal entries:</p> \[L_{ii} = \sqrt{A_{ii} - \sum_{k=1}^{i-1} L_{ik}^2}\] <p>For off-diagonal entries where \(i &gt; j\):</p> \[L_{ij} = \frac{1}{L_{jj}} \left( A_{ij} - \sum_{k=1}^{j-1} L_{ik} L_{jk} \right)\] <p>All entries above the diagonal are zero.</p> <h3 id="applications-in-machine-learning-1">Applications in Machine Learning</h3> <ul> <li>Efficient sampling from multivariate Gaussian distributions,</li> <li>Gaussian Processes (for inverting the kernel matrix),</li> <li>Kalman filters and Bayesian updates.</li> </ul> <hr/> <h2 id="3-qr-decomposition">3. QR Decomposition</h2> <h3 id="definition-2">Definition</h3> <p>For any matrix \(A \in \mathbb{R}^{m \times n}\) where \(m \geq n\), the QR decomposition expresses \(A\) as:</p> \[A = QR\] <p>Where:</p> <ul> <li>\(Q \in \mathbb{R}^{m \times m}\) is orthogonal (\(Q^T Q = I\)),</li> <li>\(R \in \mathbb{R}^{m \times n}\) is upper triangular.</li> </ul> <p>For economy-size decomposition (when only \(n\) orthogonal vectors are needed), we use:</p> \[A = Q_{\text{red}} R, \quad Q_{\text{red}} \in \mathbb{R}^{m \times n}\] <h3 id="gram-schmidt-orthogonalization">Gram-Schmidt Orthogonalization</h3> <p>Let \(a_1, a_2, \ldots, a_n\) be the columns of \(A\). We generate orthonormal vectors \(q_1, q_2, \ldots, q_n\) using:</p> <ol> <li>Initialization:</li> </ol> \[u_1 = a_1, \quad q_1 = \frac{u_1}{\|u_1\|}\] <ol> <li>For \(k = 2, \ldots, n\):</li> </ol> \[u_k = a_k - \sum_{j=1}^{k-1} \langle a_k, q_j \rangle q_j\] \[q_k = \frac{u_k}{\|u_k\|}\] <p>Then define:</p> \[Q = [q_1, q_2, \ldots, q_n], \quad R = Q^T A\] <h3 id="least-squares-via-qr">Least Squares via QR</h3> <p>Given an overdetermined system \(Ax = b\), we solve:</p> \[A = QR \Rightarrow QRx = b\] <p>Then:</p> \[Rx = Q^T b\] <p>Since \(R\) is upper triangular, this is solved efficiently via back substitution.</p> <h3 id="applications-in-machine-learning-2">Applications in Machine Learning</h3> <ul> <li>Numerically stable solution for linear regression,</li> <li>Eigenvalue computations using the QR algorithm,</li> <li>Orthonormal basis construction.</li> </ul> <hr/> <h2 id="4-non-negative-matrix-factorization-nmf">4. Non-negative Matrix Factorization (NMF)</h2> <h3 id="definition-3">Definition</h3> <p>Given a non-negative matrix \(A \in \mathbb{R}^{m \times n}\) (i.e., \(A_{ij} \geq 0\)), NMF seeks matrices \(W \in \mathbb{R}^{m \times k}\) and \(H \in \mathbb{R}^{k \times n}\) such that:</p> \[A \approx WH\] <p>subject to:</p> \[W \geq 0, \quad H \geq 0\] <h3 id="optimization-problem">Optimization Problem</h3> <p>The factorization is found by solving:</p> \[\min_{W, H \geq 0} \|A - WH\|_F^2\] <p>where \(\|\cdot\|_F\) denotes the Frobenius norm.</p> <h3 id="multiplicative-update-rules">Multiplicative Update Rules</h3> <p>A common approach (Lee &amp; Seung, 2001) involves the following update rules:</p> <ol> <li>Update \(H\):</li> </ol> \[H_{ij} \leftarrow H_{ij} \cdot \frac{(W^T A)_{ij}}{(W^T W H)_{ij}}\] <ol> <li>Update \(W\):</li> </ol> \[W_{ij} \leftarrow W_{ij} \cdot \frac{(A H^T)_{ij}}{(W H H^T)_{ij}}\] <p>These updates are applied iteratively until convergence.</p> <h3 id="applications-in-machine-learning-3">Applications in Machine Learning</h3> <ul> <li><strong>Topic modeling</strong> from document-term matrices,</li> <li><strong>Collaborative filtering</strong> in recommendation systems,</li> <li><strong>Image compression and decomposition</strong>,</li> <li><strong>Clustering</strong> with parts-based representation.</li> </ul> <hr/> <h1 id="orthogonalization-techniques-in-machine-learning-and-deep-learning">Orthogonalization Techniques in Machine Learning and Deep Learning</h1> <p>Orthogonalization plays a central role in linear algebra and is extensively used in various machine learning and deep learning tasks. Whether it’s <strong>constructing orthonormal bases</strong>, <strong>decorrelating features</strong>, or <strong>stabilizing neural network training</strong>, orthogonal structures are powerful due to their numerical and geometric properties.</p> <p>Now we shall cover:</p> <ul> <li>The <strong>Gram-Schmidt orthogonalization process</strong> for constructing orthonormal bases,</li> <li><strong>Orthogonal initialization</strong> in neural networks for improved stability and convergence.</li> </ul> <hr/> <h2 id="1-orthogonalization-and-orthonormal-bases">1. Orthogonalization and Orthonormal Bases</h2> <h3 id="motivation">Motivation</h3> <p>Given a set of linearly independent vectors \(\{v_1, v_2, \ldots, v_n\}\) in \(\mathbb{R}^n\), it is often desirable to construct an orthonormal basis \(\{q_1, q_2, \ldots, q_n\}\) that spans the same subspace, where:</p> <ul> <li>Vectors are <strong>orthogonal</strong>: \(\langle q_i, q_j \rangle = 0\) for \(i \ne j\),</li> <li>Vectors are <strong>normalized</strong>: \(\|q_i\| = 1\).</li> </ul> <p>Orthonormal bases are easier to work with:</p> <ul> <li>Projections are straightforward,</li> <li>Matrix representations (e.g., \(Q^T Q = I\)) are numerically stable,</li> <li>Useful for dimensionality reduction and decorrelation (e.g., PCA).</li> </ul> <hr/> <h2 id="2-the-gram-schmidt-process">2. The Gram-Schmidt Process</h2> <h3 id="definition-4">Definition</h3> <p>The <strong>Gram-Schmidt process</strong> transforms a set of linearly independent vectors \(\{v_1, v_2, \ldots, v_n\}\) into an orthonormal set \(\{q_1, q_2, \ldots, q_n\}\) spanning the same subspace.</p> <p>This is achieved by iteratively subtracting projections onto previously computed vectors and normalizing.</p> <hr/> <h3 id="step-by-step-algorithm">Step-by-step Algorithm</h3> <p>Let the input be vectors \(v_1, v_2, \ldots, v_n \in \mathbb{R}^d\).</p> <ol> <li><strong>Initialize</strong> the first orthonormal vector:</li> </ol> \[q_1 = \frac{v_1}{\|v_1\|}\] <ol> <li> <p><strong>Iterate</strong> for \(k = 2, \ldots, n\):</p> <ul> <li>Project \(v_k\) onto each previous \(q_j\):</li> </ul> \[\text{proj}_{q_j}(v_k) = \langle v_k, q_j \rangle q_j\] <ul> <li>Subtract the projections:</li> </ul> \[u_k = v_k - \sum_{j=1}^{k-1} \langle v_k, q_j \rangle q_j\] <ul> <li>Normalize to get the next orthonormal vector:</li> </ul> \[q_k = \frac{u_k}{\|u_k\|}\] </li> </ol> <p>After the process, the vectors \(\{q_1, \ldots, q_n\}\) form an <strong>orthonormal basis</strong> of the span of \(\{v_1, \ldots, v_n\}\).</p> <hr/> <h3 id="example">Example</h3> <p>Let:</p> \[v_1 = \begin{bmatrix} 1 \\ 1 \end{bmatrix}, \quad v_2 = \begin{bmatrix} 1 \\ 0 \end{bmatrix}\] <p>Compute:</p> \[q_1 = \frac{v_1}{\|v_1\|} = \frac{1}{\sqrt{2}} \begin{bmatrix} 1 \\ 1 \end{bmatrix}\] <p>Project \(v_2\) onto \(q_1\):</p> \[\langle v_2, q_1 \rangle = \frac{1}{\sqrt{2}}(1 \cdot 1 + 0 \cdot 1) = \frac{1}{\sqrt{2}}\] <p>Then:</p> \[u_2 = v_2 - \langle v_2, q_1 \rangle q_1 = \begin{bmatrix} 1 \\ 0 \end{bmatrix} - \frac{1}{\sqrt{2}} \cdot \frac{1}{\sqrt{2}} \begin{bmatrix} 1 \\ 1 \end{bmatrix} = \begin{bmatrix} 1 \\ 0 \end{bmatrix} - \frac{1}{2} \begin{bmatrix} 1 \\ 1 \end{bmatrix} = \begin{bmatrix} \frac{1}{2} \\ -\frac{1}{2} \end{bmatrix}\] <p>Normalize:</p> \[q_2 = \frac{u_2}{\|u_2\|} = \frac{1}{\sqrt{2}} \begin{bmatrix} 1 \\ -1 \end{bmatrix}\] <p>So the orthonormal basis is:</p> \[q_1 = \frac{1}{\sqrt{2}} \begin{bmatrix} 1 \\ 1 \end{bmatrix}, \quad q_2 = \frac{1}{\sqrt{2}} \begin{bmatrix} 1 \\ -1 \end{bmatrix}\] <hr/> <h3 id="applications">Applications</h3> <ul> <li><strong>QR Decomposition</strong>: Gram-Schmidt is used to compute orthogonal matrix \(Q\) in QR.</li> <li><strong>PCA and SVD</strong>: Constructs orthonormal eigenvectors or singular vectors.</li> <li><strong>Feature Embeddings</strong>: Ensures orthogonality between embedding dimensions for decorrelation.</li> </ul> <hr/> <h2 id="3-orthogonal-initialization-in-neural-networks">3. Orthogonal Initialization in Neural Networks</h2> <h3 id="motivation-1">Motivation</h3> <p>Deep networks are sensitive to weight initialization. Poorly chosen initializations can lead to:</p> <ul> <li>Vanishing or exploding gradients,</li> <li>Poor convergence,</li> <li>Suboptimal generalization.</li> </ul> <p>Orthogonal initialization addresses these issues by ensuring that:</p> <ul> <li>The weight matrix \(W\) preserves the norm of the signal during forward and backward passes,</li> <li>Gradients are not distorted across layers.</li> </ul> <hr/> <h3 id="mathematical-principle">Mathematical Principle</h3> <p>Let \(W \in \mathbb{R}^{n \times n}\) be an orthogonal matrix, so that:</p> \[W^T W = WW^T = I\] <p>If input \(x \in \mathbb{R}^n\) is passed through such a weight matrix:</p> \[y = Wx \Rightarrow \|y\|_2 = \|x\|_2\] <p>Hence, the norm is preserved, avoiding scaling issues layer by layer.</p> <p>In backpropagation, the gradient flow also remains stable:</p> \[\frac{\partial L}{\partial x} = W^T \frac{\partial L}{\partial y}\] <p>If \(W\) is orthogonal, the gradient is rotated but not scaled, avoiding vanishing/exploding gradients.</p> <hr/> <h3 id="how-to-initialize-orthogonal-matrices">How to Initialize Orthogonal Matrices</h3> <ul> <li>Generate a random matrix \(A\),</li> <li>Perform QR decomposition: \(A = QR\),</li> <li>Use \(Q\) as the initialization matrix (optionally scale by a factor \(\sigma\)):</li> </ul> \[W = \sigma Q\] <h3 id="implementing-in-deep-learning-libraries">Implementing in Deep Learning Libraries</h3> <p>In PyTorch:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">torch.nn</span> <span class="k">as</span> <span class="n">nn</span>
<span class="n">nn</span><span class="p">.</span><span class="n">init</span><span class="p">.</span><span class="nf">orthogonal_</span><span class="p">(</span><span class="n">tensor</span><span class="p">,</span> <span class="n">gain</span><span class="o">=</span><span class="mf">1.0</span><span class="p">)</span>
</code></pre></div></div> <p>In TensorFlow:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">initializer</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">initializers</span><span class="p">.</span><span class="nc">Orthogonal</span><span class="p">(</span><span class="n">gain</span><span class="o">=</span><span class="mf">1.0</span><span class="p">)</span>
</code></pre></div></div> <h3 id="applications-1">Applications</h3> <ul> <li><strong>Recurrent Neural Networks (RNNs)</strong>: Orthogonal or unitary weight matrices are crucial for long-term memory retention.</li> <li><strong>Deep Fully Connected Networks</strong>: Improves training dynamics for very deep MLPs.</li> <li><strong>Transformer Layers</strong>: Can help in initializing dense layers to preserve signal variance.</li> </ul> <hr/> <p>Orthogonalization is not only a theoretical concept but also a practical tool that:</p> <ul> <li>Enhances numerical stability,</li> <li>Helps decorrelate features,</li> <li>Enables better gradient flow in deep neural networks.</li> </ul> <p>Whether through <strong>Gram-Schmidt orthogonalization</strong> for structured bases or <strong>orthogonal initialization</strong> for training deep networks, mastering these tools improves both understanding and implementation of modern ML models.</p> <hr/> <h1 id="kernel-methods-and-hilbert-spaces-in-machine-learning">Kernel Methods and Hilbert Spaces in Machine Learning</h1> <p>Kernel methods are powerful tools that enable learning algorithms to operate in <strong>high-dimensional feature spaces</strong> without explicitly computing those spaces. They are foundational to algorithms like <strong>Support Vector Machines (SVMs)</strong>, <strong>Gaussian Processes (GPs)</strong>, and <strong>Kernel PCA</strong>. This is achieved through the <strong>kernel trick</strong> and formalized via the theory of <strong>Hilbert spaces</strong> and <strong>Mercer’s theorem</strong>.</p> <p>In this section, we will cover:</p> <ul> <li>Inner products in high-dimensional (possibly infinite-dimensional) spaces,</li> <li>The concept of Reproducing Kernel Hilbert Spaces (RKHS),</li> <li>The kernel trick and its use in ML algorithms,</li> <li>Mercer’s theorem and the mathematical foundation of kernels.</li> </ul> <hr/> <h2 id="1-inner-products-in-high-dimensional-spaces">1. Inner Products in High-Dimensional Spaces</h2> <h3 id="motivation-2">Motivation</h3> <p>In many ML algorithms, we compute <strong>inner products</strong> between feature vectors:</p> \[\langle x, x' \rangle = x^\top x'\] <p>However, linear models using this inner product are limited to <strong>linear decision boundaries</strong>.</p> <p>To handle <strong>non-linear patterns</strong>, we can <strong>map</strong> the inputs into a higher-dimensional space:</p> \[\phi: \mathcal{X} \rightarrow \mathcal{H}, \quad x \mapsto \phi(x)\] <p>where \(\mathcal{H}\) is a <strong>Hilbert space</strong> (a complete inner product space). Then, inner products become:</p> \[\langle \phi(x), \phi(x') \rangle\] <p>If \(\phi\) maps into a <strong>very high-dimensional</strong> or <strong>infinite-dimensional</strong> space, computation becomes infeasible. However, we can avoid this cost using <strong>kernels</strong>.</p> <hr/> <h2 id="2-kernel-functions-and-the-kernel-trick">2. Kernel Functions and the Kernel Trick</h2> <h3 id="definition-5">Definition</h3> <p>A <strong>kernel function</strong> \(k: \mathcal{X} \times \mathcal{X} \rightarrow \mathbb{R}\) is defined as:</p> \[k(x, x') = \langle \phi(x), \phi(x') \rangle_{\mathcal{H}}\] <p>This allows computing the inner product <strong>without explicitly computing</strong> \(\phi(x)\) or \(\phi(x')\).</p> <p>This is known as the <strong>kernel trick</strong>.</p> <h3 id="examples-of-kernel-functions">Examples of Kernel Functions</h3> <ul> <li><strong>Linear kernel</strong>:</li> </ul> \[k(x, x') = x^\top x'\] <ul> <li><strong>Polynomial kernel</strong> (degree \(d\)):</li> </ul> \[k(x, x') = (x^\top x' + c)^d\] <ul> <li><strong>Radial Basis Function (RBF) / Gaussian kernel</strong>:</li> </ul> \[k(x, x') = \exp\left(-\frac{\|x - x'\|^2}{2\sigma^2}\right)\] <ul> <li><strong>Sigmoid kernel</strong>:</li> </ul> \[k(x, x') = \tanh(\alpha x^\top x' + c)\] <hr/> <h3 id="why-it-works">Why It Works</h3> <p>Many algorithms (like SVMs) rely on computing dot products between data points:</p> <ul> <li>Training: \(x_i^\top x_j\)</li> <li>Prediction: \(x^\top x_i\)</li> </ul> <p>By replacing these with \(k(x_i, x_j)\) and \(k(x, x_i)\), we effectively operate in the high-dimensional space <strong>without ever computing it</strong> explicitly.</p> <p>This is computationally and memory-efficient and allows fitting complex, non-linear decision boundaries.</p> <hr/> <h2 id="3-reproducing-kernel-hilbert-space-rkhs">3. Reproducing Kernel Hilbert Space (RKHS)</h2> <h3 id="definition-6">Definition</h3> <p>A <strong>Reproducing Kernel Hilbert Space</strong> is a Hilbert space \(\mathcal{H}\) of functions from \(\mathcal{X} \rightarrow \mathbb{R}\) such that:</p> <ol> <li>For all \(x \in \mathcal{X}\), the evaluation functional \(f \mapsto f(x)\) is continuous.</li> <li>There exists a <strong>kernel function</strong> \(k(x, \cdot) \in \mathcal{H}\) such that for all \(f \in \mathcal{H}\):</li> </ol> \[f(x) = \langle f, k(x, \cdot) \rangle_{\mathcal{H}}\] <p>This is called the <strong>reproducing property</strong>, and it guarantees that the kernel uniquely defines the Hilbert space.</p> <h3 id="intuition">Intuition</h3> <p>RKHS is the space induced by the kernel. Every function in the RKHS can be written in terms of kernels evaluated at training points. This leads to <strong>kernel representer theorems</strong> and simplifies optimization.</p> <hr/> <h2 id="4-mercers-theorem">4. Mercer’s Theorem</h2> <h3 id="statement">Statement</h3> <p>Mercer’s Theorem provides a condition under which a function is a <strong>valid kernel</strong> (i.e., corresponds to an inner product in some Hilbert space).</p> <p>Let \(k(x, x')\) be a continuous, symmetric, and positive semi-definite kernel on a compact domain \(\mathcal{X} \subset \mathbb{R}^n\). Then:</p> <ul> <li>There exists a sequence of <strong>orthonormal eigenfunctions</strong> \(\{\phi_i\}\) and <strong>non-negative eigenvalues</strong> \(\{\lambda_i\}\) such that:</li> </ul> \[k(x, x') = \sum_{i=1}^{\infty} \lambda_i \phi_i(x) \phi_i(x')\] <p>This shows that a kernel corresponds to an inner product in a (possibly infinite-dimensional) feature space.</p> <h3 id="practical-use">Practical Use</h3> <p>Mercer’s Theorem justifies that functions like the RBF or polynomial kernel are <strong>valid kernels</strong> and thus induce a real Hilbert space with meaningful inner products.</p> <hr/> <h2 id="5-applications-in-machine-learning">5. Applications in Machine Learning</h2> <h3 id="51-support-vector-machines-svms">5.1 Support Vector Machines (SVMs)</h3> <p>The dual form of the SVM optimization problem involves only dot products. With a kernel function:</p> \[\text{maximize}_\alpha \sum_i \alpha_i - \frac{1}{2} \sum_{i,j} \alpha_i \alpha_j y_i y_j k(x_i, x_j)\] <p>Predictions are made using:</p> \[f(x) = \sum_i \alpha_i y_i k(x, x_i) + b\] <p>This enables <strong>non-linear classification</strong> by implicitly mapping into a high-dimensional space.</p> <hr/> <h3 id="52-gaussian-processes-gps">5.2 Gaussian Processes (GPs)</h3> <p>A Gaussian Process is a distribution over functions:</p> \[f(x) \sim \mathcal{GP}(0, k(x, x'))\] <p>The kernel function \(k\) defines the <strong>covariance</strong> between function values. This allows modeling smoothness, periodicity, and other function properties.</p> <p>Prediction involves computing:</p> \[\mathbb{E}[f(x_*)] = k(x_*, X) [K(X, X) + \sigma^2 I]^{-1} y\] <p>Where:</p> <ul> <li>\(K(X, X)\) is the Gram matrix over the training data using kernel \(k\),</li> <li>\(x_*\) is the test input.</li> </ul> <hr/> <h3 id="53-kernel-pca">5.3 Kernel PCA</h3> <p>Standard PCA uses the covariance matrix:</p> \[C = \frac{1}{n} \sum_{i=1}^n x_i x_i^T\] <p>Kernel PCA generalizes this using the kernel trick by computing the <strong>kernel Gram matrix</strong>:</p> \[K_{ij} = k(x_i, x_j)\] <p>Then perform eigen-decomposition on the <strong>centered</strong> kernel matrix:</p> \[K_c = K - \mathbf{1}K - K\mathbf{1} + \mathbf{1}K\mathbf{1}\] <p>Where \(\mathbf{1}\) is the centering matrix.</p> <p>The result is non-linear dimensionality reduction using kernel-defined similarities.</p> <hr/> <h2 id="summary">Summary</h2> <table> <thead> <tr> <th style="text-align: left">Concept</th> <th style="text-align: center">Mathematical Foundation</th> <th style="text-align: right">Role in Machine Learning</th> </tr> </thead> <tbody> <tr> <td style="text-align: left">Feature Mapping</td> <td style="text-align: center">\(\phi: x \mapsto \mathcal{H}\)</td> <td style="text-align: right">Transforms data into high-dimensional space</td> </tr> <tr> <td style="text-align: left">Kernel Function</td> <td style="text-align: center">\(k(x, x') = \langle \phi(x), \phi(x') \rangle\)</td> <td style="text-align: right">Computes inner products without explicit mapping</td> </tr> <tr> <td style="text-align: left">RKHS</td> <td style="text-align: center">Function space induced by a valid kernel</td> <td style="text-align: right">Guarantees expressiveness and optimization theory</td> </tr> <tr> <td style="text-align: left">Mercer’s Theorem</td> <td style="text-align: center">\(k(x, x') = \sum \lambda_i \phi_i(x) \phi_i(x')\)</td> <td style="text-align: right">Validates kernel as inner product in Hilbert space</td> </tr> <tr> <td style="text-align: left">Kernel Trick</td> <td style="text-align: center">Replace \(\langle x, x' \rangle\) with \(k(x, x')\)</td> <td style="text-align: right">Enables non-linear learning with linear algorithms</td> </tr> </tbody> </table> <hr/> <p>Kernel methods let us apply powerful linear algorithms in high-dimensional non-linear spaces—<strong>without computing those spaces directly</strong>. The kernel trick, rooted in Hilbert space theory and Mercer’s theorem, forms the backbone of some of the most elegant and effective machine learning algorithms.</p> <hr/> <h1 id="sparse-matrices-and-sparsity-in-machine-learning">Sparse Matrices and Sparsity in Machine Learning</h1> <p>Modern machine learning applications often involve <strong>high-dimensional data</strong>, where most entries are <strong>zero</strong>. In such settings, <strong>sparsity</strong> becomes a powerful property to exploit—both for <strong>computational efficiency</strong> and for <strong>improving generalization</strong>.</p> <p>This section explores:</p> <ul> <li>Sparse matrix representation and storage,</li> <li>The role of sparsity in large-scale ML problems,</li> <li>Compressed sensing and sparse coding,</li> <li>Applications in recommender systems, NLP, computer vision, and feature selection.</li> </ul> <hr/> <h2 id="1-sparse-representations">1. Sparse Representations</h2> <h3 id="definition-7">Definition</h3> <p>A matrix \(A \in \mathbb{R}^{m \times n}\) is called <strong>sparse</strong> if most of its entries are zero:</p> \[\text{Sparsity}(A) = \frac{\text{Number of zero entries}}{mn} \gg 0\] <p>Equivalently, it has <strong>only a few non-zero entries</strong> compared to its total size.</p> <hr/> <h3 id="storage-and-efficiency">Storage and Efficiency</h3> <p>Instead of storing all \(mn\) entries, we store only the non-zero elements and their indices. Common sparse matrix formats include:</p> <ul> <li> <p><strong>Compressed Sparse Row (CSR)</strong>: Stores non-zero values, column indices, and row pointer.</p> </li> <li> <p><strong>Compressed Sparse Column (CSC)</strong>: Similar to CSR, but column-wise.</p> </li> <li> <p><strong>Coordinate (COO)</strong>: Stores each non-zero entry as a tuple \((i, j, A_{ij})\).</p> </li> </ul> <p>These formats enable:</p> <ul> <li><strong>O(1)</strong> access to non-zero elements,</li> <li>Efficient matrix-vector multiplication in \(O(\text{nnz})\) time,</li> <li>Reduced memory usage.</li> </ul> <hr/> <h3 id="use-cases">Use Cases</h3> <ul> <li> <p><strong>Recommender Systems</strong>: User-item interaction matrices are sparse; most users rate very few items.</p> </li> <li> <p><strong>NLP</strong>: Bag-of-Words, TF-IDF, one-hot encoding—all result in sparse representations.</p> </li> <li> <p><strong>Graph ML</strong>: Adjacency matrices of large graphs (social networks, web graphs) are sparse.</p> </li> </ul> <hr/> <h2 id="2-compressed-sensing">2. Compressed Sensing</h2> <h3 id="motivation-3">Motivation</h3> <p>Compressed sensing addresses the question:</p> <p><strong>Can we recover high-dimensional signals from few linear measurements if the signal is sparse?</strong></p> <p>The answer is yes—under specific conditions.</p> <hr/> <h3 id="problem-setup">Problem Setup</h3> <p>Let:</p> <ul> <li>\(x \in \mathbb{R}^n\) be the <strong>original signal</strong>, sparse in some basis.</li> <li>\(y \in \mathbb{R}^m\) be the <strong>observed measurements</strong>, where \(m \ll n\).</li> <li>\(A \in \mathbb{R}^{m \times n}\) be a measurement matrix.</li> </ul> <p>We want to solve:</p> \[y = A x \quad \text{with} \quad x \text{ sparse}\] <p>Since \(m &lt; n\), this is underdetermined. But if \(x\) is sparse (i.e., \(\|x\|_0 \ll n\)), recovery is possible.</p> <hr/> <h3 id="recovery-via-optimization">Recovery via Optimization</h3> <p>The sparse recovery problem is posed as:</p> \[\min_x \|x\|_0 \quad \text{subject to} \quad y = Ax\] <p>But this is NP-hard. Instead, we solve:</p> \[\min_x \|x\|_1 \quad \text{subject to} \quad y = Ax\] <p>This is known as <strong>Basis Pursuit</strong>, and under the <strong>Restricted Isometry Property (RIP)</strong>, it provably recovers the sparse signal.</p> <h3 id="lasso-relaxed-version">Lasso (Relaxed version)</h3> <p>If measurements are noisy:</p> \[y = Ax + \varepsilon\] <p>Then we solve:</p> \[\min_x \|y - Ax\|_2^2 + \lambda \|x\|_1\] <p>This is the <strong>Lasso</strong> (Least Absolute Shrinkage and Selection Operator) formulation.</p> <hr/> <h3 id="applications-2">Applications</h3> <ul> <li><strong>Medical imaging</strong>: MRI and CT scan reconstruction from fewer samples.</li> <li><strong>Signal processing</strong>: Denoising, compression.</li> <li><strong>NLP and CV</strong>: Learning compact word/image representations.</li> </ul> <hr/> <h2 id="3-sparse-coding">3. Sparse Coding</h2> <h3 id="definition-8">Definition</h3> <p>Given an input signal \(x \in \mathbb{R}^d\), sparse coding assumes:</p> \[x \approx D h\] <p>Where:</p> <ul> <li>\(D \in \mathbb{R}^{d \times k}\) is a <strong>dictionary</strong> of basis vectors (atoms),</li> <li>\(h \in \mathbb{R}^k\) is a <strong>sparse code</strong> (i.e., few non-zero entries).</li> </ul> <p>The goal is to <strong>learn \(D\) and \(h\)</strong> such that \(x\) is well-represented with a <strong>sparse \(h\)</strong>.</p> <hr/> <h3 id="optimization-objective">Optimization Objective</h3> <p>Given training data \(X = [x^{(1)}, \ldots, x^{(n)}]\), we solve:</p> \[\min_{D, H} \sum_{i=1}^n \left( \|x^{(i)} - D h^{(i)}\|_2^2 + \lambda \|h^{(i)}\|_1 \right)\] <p>Subject to normalization constraints on \(D\) (e.g., \(\|d_j\|_2 \leq 1\)).</p> <p>This problem is <strong>bi-convex</strong> and typically solved via alternating minimization:</p> <ol> <li>Fix \(D\), update sparse codes \(H\).</li> <li>Fix \(H\), update dictionary \(D\).</li> </ol> <hr/> <h3 id="interpretation">Interpretation</h3> <ul> <li>Sparse coding learns <strong>overcomplete dictionaries</strong> that can represent inputs efficiently.</li> <li>The sparse codes \(h\) capture <strong>salient features</strong> with fewer active components.</li> </ul> <hr/> <h3 id="applications-3">Applications</h3> <ul> <li><strong>Image processing</strong>: <ul> <li>Denoising, super-resolution, texture synthesis.</li> </ul> </li> <li><strong>NLP</strong>: <ul> <li>Sparse embedding representations.</li> </ul> </li> <li><strong>Feature learning</strong>: <ul> <li>Unsupervised pretraining for deep networks.</li> </ul> </li> <li><strong>Compression</strong>: <ul> <li>Reduces storage and computation for large models.</li> </ul> </li> </ul> <hr/> <h2 id="summary-1">Summary</h2> <table> <thead> <tr> <th style="text-align: left">Concept</th> <th style="text-align: center">Mathematical Description</th> <th style="text-align: right">Applications</th> </tr> </thead> <tbody> <tr> <td style="text-align: left">Sparse Matrix</td> <td style="text-align: center">Mostly zero entries, stored in CSR/COO format</td> <td style="text-align: right">Recommender systems, NLP, graph ML</td> </tr> <tr> <td style="text-align: left">Compressed Sensing</td> <td style="text-align: center">\(y = Ax, |x|_0 \ll n\), recover \(x\) from \(y\)</td> <td style="text-align: right">Imaging, signal processing, low-data regimes</td> </tr> <tr> <td style="text-align: left">Lasso</td> <td style="text-align: center">\(\min_x |y - Ax|_2^2 + \lambda |x|_1\)</td> <td style="text-align: right">Feature selection, regularization</td> </tr> <tr> <td style="text-align: left">Sparse Coding</td> <td style="text-align: center">\(x \approx D h\) with sparse \(h\)</td> <td style="text-align: right">Feature learning, representation compression</td> </tr> </tbody> </table> <hr/> <p>Sparsity is a crucial structural assumption in many ML settings. Whether it’s handling massive sparse data structures, recovering signals from limited observations, or learning compressed representations, <strong>sparsity enables scalable and interpretable learning</strong>.</p> <p>The underlying mathematical principles—\(\ell_0\) and \(\ell_1\) norms, underdetermined systems, and structured optimization—form the basis of compressed sensing and sparse coding.</p> <hr/> <h1 id="numerical-stability-and-conditioning-in-machine-learning">Numerical Stability and Conditioning in Machine Learning</h1> <p>In large-scale machine learning models and numerical computations, <strong>numerical stability</strong> plays a vital role in ensuring accuracy, convergence, and generalization. When data is high-dimensional, features are correlated, or optimization problems are ill-posed, small numerical errors can lead to large deviations in results.</p> <p>This section explores:</p> <ul> <li>Matrix conditioning and condition numbers,</li> <li>Their effect on optimization and linear models,</li> <li>Regularization strategies like <strong>Tikhonov regularization</strong> and <strong>Ridge regression</strong>,</li> <li>Real-world applications after each theoretical concept.</li> </ul> <hr/> <h2 id="1-matrix-conditioning-and-condition-numbers">1. Matrix Conditioning and Condition Numbers</h2> <h3 id="definition-9">Definition</h3> <p>Given a matrix \(A \in \mathbb{R}^{n \times n}\), its <strong>condition number</strong> in the 2-norm is:</p> \[\kappa(A) = \|A\|_2 \cdot \|A^{-1}\|_2\] <p>If \(A\) is symmetric positive definite:</p> \[\kappa(A) = \frac{\lambda_{\max}}{\lambda_{\min}}\] <p>Where \(\lambda_{\max}\) and \(\lambda_{\min}\) are the largest and smallest eigenvalues of \(A\).</p> <p>This value measures the sensitivity of the solution \(x\) to small perturbations in the system \(Ax = b\).</p> <hr/> <h3 id="application-linear-systems-and-inversion-stability">Application: Linear Systems and Inversion Stability</h3> <p>In <strong>linear regression</strong> or <strong>least squares</strong>, solving:</p> \[\hat{x} = (X^T X)^{-1} X^T y\] <p>can be unstable if \(X^T X\) is ill-conditioned (e.g., due to multicollinearity).</p> <p><strong>Real-World Scenarios</strong>:</p> <ul> <li>High-dimensional regression models,</li> <li>Polynomial regression (where powers of features become highly correlated),</li> <li>PCA: covariance matrix conditioning affects eigenvalue computation.</li> </ul> <hr/> <h2 id="2-instability-in-optimization">2. Instability in Optimization</h2> <h3 id="gradient-descent-sensitivity">Gradient Descent Sensitivity</h3> <p>Consider optimizing a quadratic loss:</p> \[f(x) = \frac{1}{2} x^T A x\] <p>Gradient descent update:</p> \[x_{k+1} = x_k - \eta A x_k\] <p>If \(A\) is ill-conditioned (i.e., eigenvalues vary widely), the optimization will:</p> <ul> <li>Converge slowly,</li> <li>Zigzag across the cost surface,</li> <li>Require small learning rates to remain stable.</li> </ul> <hr/> <h3 id="application-neural-network-training">Application: Neural Network Training</h3> <p>In <strong>deep networks</strong>, layers may learn at drastically different rates due to ill-conditioning. Common symptoms include:</p> <ul> <li>Exploding or vanishing gradients,</li> <li>Slow convergence even on simple tasks,</li> <li>Difficulty tuning learning rates.</li> </ul> <p><strong>Example</strong>: In early training of deep MLPs or RNNs, poor weight scaling leads to ill-conditioned Jacobians and Hessians.</p> <hr/> <h2 id="3-tikhonov-regularization">3. Tikhonov Regularization</h2> <h3 id="theory">Theory</h3> <p>To solve an ill-posed least squares problem:</p> \[\min_x \|Ax - b\|_2^2\] <p>we add a regularization term:</p> \[\min_x \|Ax - b\|_2^2 + \lambda \|x\|_2^2\] <p>This is <strong>Tikhonov regularization</strong>. The solution becomes:</p> \[\hat{x}_\lambda = (A^T A + \lambda I)^{-1} A^T b\] <p>This improves conditioning by ensuring the matrix being inverted is better-behaved.</p> <hr/> <h3 id="application-ill-posed-inverse-problems">Application: Ill-posed Inverse Problems</h3> <p><strong>Tikhonov regularization</strong> is used in:</p> <ul> <li><strong>Image deblurring and denoising</strong>,</li> <li><strong>Medical imaging (MRI, CT)</strong>,</li> <li><strong>Physics-based simulations</strong> with uncertain measurements.</li> </ul> <p>In ML, it improves:</p> <ul> <li><strong>Matrix inversion stability</strong> in linear models,</li> <li><strong>Numerical robustness</strong> in batch/mini-batch computations.</li> </ul> <hr/> <h2 id="4-ridge-regression">4. Ridge Regression</h2> <h3 id="theory-1">Theory</h3> <p>Ridge regression is a specific case of Tikhonov regularization applied to linear regression. Given \(X \in \mathbb{R}^{n \times d}\) and \(y \in \mathbb{R}^n\):</p> \[\min_w \|Xw - y\|_2^2 + \lambda \|w\|_2^2\] <p>Solution:</p> \[w = (X^T X + \lambda I)^{-1} X^T y\] <p>Benefits:</p> <ul> <li>Stabilizes matrix inversion,</li> <li>Reduces overfitting in high-dimensional settings.</li> </ul> <hr/> <h3 id="application-high-dimensional-linear-models">Application: High-Dimensional Linear Models</h3> <p>Ridge regression is essential when:</p> <ul> <li>The number of features exceeds the number of samples,</li> <li>Features are highly correlated (multicollinearity),</li> <li>Predictors are noisy or redundant.</li> </ul> <p><strong>Example</strong>:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">sklearn.linear_model</span> <span class="kn">import</span> <span class="n">Ridge</span>
<span class="n">model</span> <span class="o">=</span> <span class="nc">Ridge</span><span class="p">(</span><span class="n">alpha</span><span class="o">=</span><span class="mf">1.0</span><span class="p">)</span>
<span class="n">model</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</code></pre></div></div> <p>Common in:</p> <ul> <li><strong>Genomics</strong> (p » n),</li> <li><strong>Text regression models</strong> with bag-of-words features,</li> <li><strong>Financial models</strong> with redundant indicators.</li> </ul> <hr/> <h2 id="5-conditioning-in-deep-learning">5. Conditioning in Deep Learning</h2> <h3 id="common-problems">Common Problems</h3> <p>In deep neural networks:</p> <ul> <li>Weight matrices may become poorly conditioned,</li> <li>Gradients may vanish or explode during backpropagation,</li> <li>Activations may saturate, leading to optimization stalls.</li> </ul> <hr/> <h3 id="solutions-and-their-mathematical-roles">Solutions and Their Mathematical Roles</h3> <ol> <li> <p><strong>Orthogonal Initialization</strong>: Weight matrices initialized to be orthogonal preserve input norm and maintain conditioning.</p> \[W^T W = I \Rightarrow \|Wx\|_2 = \|x\|_2\] <p><strong>Code</strong>:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">torch</span><span class="p">.</span><span class="n">nn</span><span class="p">.</span><span class="n">init</span><span class="p">.</span><span class="nf">orthogonal_</span><span class="p">(</span><span class="n">tensor</span><span class="p">)</span>
</code></pre></div> </div> </li> <li> <p><strong>Weight Decay</strong> (L2 regularization): Equivalent to Ridge on weights. Controls weight growth, stabilizes learning.</p> \[\min_w \mathcal{L}(w) + \lambda \|w\|_2^2\] </li> <li> <p><strong>Gradient Clipping</strong>: Prevents gradient explosion by clipping:</p> \[\nabla \mathcal{L} \leftarrow \frac{\nabla \mathcal{L}}{\max(1, \|\nabla \mathcal{L}\| / \tau)}\] <p><strong>Code</strong>:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">torch</span><span class="p">.</span><span class="n">nn</span><span class="p">.</span><span class="n">utils</span><span class="p">.</span><span class="nf">clip_grad_norm_</span><span class="p">(</span><span class="n">model</span><span class="p">.</span><span class="nf">parameters</span><span class="p">(),</span> <span class="n">max_norm</span><span class="o">=</span><span class="mf">5.0</span><span class="p">)</span>
</code></pre></div> </div> </li> </ol> <hr/> <h3 id="application-training-stability-in-deep-networks">Application: Training Stability in Deep Networks</h3> <p>These techniques are used in:</p> <ul> <li><strong>RNNs</strong>: To avoid exploding gradients through time.</li> <li><strong>Transformers</strong>: LayerNorm and initialization stabilize long-depth training.</li> <li><strong>CNNs</strong>: Weight decay improves generalization and convergence.</li> </ul> <hr/> <h2 id="summary-2">Summary</h2> <table> <thead> <tr> <th style="text-align: left">Concept</th> <th style="text-align: center">Mathematical Description</th> <th style="text-align: right">Role in ML / DL</th> </tr> </thead> <tbody> <tr> <td style="text-align: left">Condition Number</td> <td style="text-align: center">\(\kappa(A) = |A| \cdot |A^{-1}|\)</td> <td style="text-align: right">Measures sensitivity to noise</td> </tr> <tr> <td style="text-align: left">Ill-conditioning</td> <td style="text-align: center">\(\kappa(A) \gg 1\)</td> <td style="text-align: right">Leads to instability in training and optimization</td> </tr> <tr> <td style="text-align: left">Tikhonov Regularization</td> <td style="text-align: center">\(\min_x |Ax - b|^2 + \lambda |x|^2\)</td> <td style="text-align: right">Improves matrix invertibility</td> </tr> <tr> <td style="text-align: left">Ridge Regression</td> <td style="text-align: center">\(w = (X^T X + \lambda I)^{-1} X^T y\)</td> <td style="text-align: right">Stabilizes regression with correlated features</td> </tr> <tr> <td style="text-align: left">Orthogonal Init.</td> <td style="text-align: center">\(W^T W = I\)</td> <td style="text-align: right">Preserves norm in forward/backward pass</td> </tr> <tr> <td style="text-align: left">Weight Decay</td> <td style="text-align: center">\(\min_w \mathcal{L} + \lambda |w|^2\)</td> <td style="text-align: right">Regularizes weights and enhances generalization</td> </tr> <tr> <td style="text-align: left">Gradient Clipping</td> <td style="text-align: center">\(\nabla \mathcal{L} \rightarrow \frac{\nabla \mathcal{L}}{\max(\cdot)}\)</td> <td style="text-align: right">Prevents exploding gradients during training</td> </tr> </tbody> </table> <hr/> <p>Understanding numerical stability and matrix conditioning helps you:</p> <ul> <li>Design models that train efficiently,</li> <li>Use optimization methods that converge reliably,</li> <li>Avoid silent failures due to ill-conditioning.</li> </ul> <p>By incorporating <strong>regularization</strong>, <strong>better initialization</strong>, and <strong>gradient control</strong>, you can ensure your machine learning models are not only performant—but also numerically robust.</p> <hr/> <h1 id="rotation-reflection-and-markov-matrices-in-machine-learning">Rotation, Reflection, and Markov Matrices in Machine Learning</h1> <p>Geometric and probabilistic transformations form the backbone of many machine learning systems—especially in computer vision, robotics, and probabilistic reasoning. This section explores two foundational categories of matrices:</p> <ol> <li><strong>Rotation and Reflection matrices</strong> (used in spatial transformations),</li> <li><strong>Markov (Stochastic) matrices</strong> (used in probabilistic models and temporal systems).</li> </ol> <hr/> <h2 id="rotation-and-reflection-matrices">Rotation and Reflection Matrices</h2> <p>Geometric transformations such as rotation and reflection are represented by orthogonal matrices in linear algebra. These are crucial for tasks in <strong>computer vision</strong>, <strong>robotics</strong>, <strong>3D graphics</strong>, and <strong>data augmentation</strong>.</p> <hr/> <h3 id="rotation-matrices">Rotation Matrices</h3> <p>A <strong>rotation matrix</strong> in \(\mathbb{R}^n\) rotates a vector about the origin while preserving its norm. A matrix \(R\) is a rotation matrix if:</p> \[R^T R = RR^T = I \quad \text{and} \quad \det(R) = 1\] <h4 id="2d-rotation">2D Rotation</h4> <p>In two dimensions, rotation by an angle \(\theta\) counterclockwise is given by:</p> \[R(\theta) = \begin{bmatrix} \cos\theta &amp; -\sin\theta \\ \sin\theta &amp; \cos\theta \end{bmatrix}\] <p>For any vector \(x = \begin{bmatrix} x_1 \\ x_2 \end{bmatrix}\), the rotated vector is:</p> \[x' = R(\theta) x\] <h4 id="3d-rotation-and-euler-angles">3D Rotation and Euler Angles</h4> <p>In 3D, rotations can be performed around each axis. The elementary rotations are:</p> <ul> <li> <p>Around \(x\)-axis: \(R_x(\theta) = \begin{bmatrix} 1 &amp; 0 &amp; 0 \\ 0 &amp; \cos\theta &amp; -\sin\theta \\ 0 &amp; \sin\theta &amp; \cos\theta \end{bmatrix}\)</p> </li> <li> <p>Around \(y\)-axis: \(R_y(\theta) = \begin{bmatrix} \cos\theta &amp; 0 &amp; \sin\theta \\ 0 &amp; 1 &amp; 0 \\ -\sin\theta &amp; 0 &amp; \cos\theta \end{bmatrix}\)</p> </li> <li> <p>Around \(z\)-axis: \(R_z(\theta) = \begin{bmatrix} \cos\theta &amp; -\sin\theta &amp; 0 \\ \sin\theta &amp; \cos\theta &amp; 0 \\ 0 &amp; 0 &amp; 1 \end{bmatrix}\)</p> </li> </ul> <p>Any 3D rotation can be represented by a combination of these, often using <strong>Euler angles</strong>.</p> <hr/> <h3 id="application-computer-vision-and-robotics">Application: Computer Vision and Robotics</h3> <ul> <li><strong>Image Augmentation</strong>: Rotating images during training increases robustness to orientation.</li> <li><strong>Pose Estimation</strong>: Estimating camera or robot orientation using rotation matrices.</li> <li><strong>3D Reconstruction</strong>: Applying transformations to point clouds and mesh data.</li> <li><strong>Robotics Control</strong>: Planning and executing movement using rotation matrices in kinematics.</li> </ul> <p><strong>Example</strong>:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">torchvision.transforms</span> <span class="k">as</span> <span class="n">T</span>
<span class="n">T</span><span class="p">.</span><span class="nc">RandomRotation</span><span class="p">(</span><span class="n">degrees</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
</code></pre></div></div> <hr/> <h3 id="reflection-matrices">Reflection Matrices</h3> <p>A <strong>reflection matrix</strong> flips a vector across a subspace (hyperplane). It is also orthogonal, but unlike a rotation matrix:</p> \[\det(R) = -1\] <h4 id="reflection-in-2d">Reflection in 2D</h4> <p>Reflection across the \(x\)-axis:</p> \[R = \begin{bmatrix} 1 &amp; 0 \\ 0 &amp; -1 \end{bmatrix}\] <p>Reflection across an arbitrary line through the origin with unit normal vector \(n\):</p> \[R = I - 2nn^T\] <p>Where \(n \in \mathbb{R}^d\) and \(\|n\| = 1\).</p> <hr/> <h3 id="application-data-augmentation-in-cv">Application: Data Augmentation in CV</h3> <p>Reflections are used to simulate different perspectives of the same object.</p> <ul> <li><strong>Horizontal Flip</strong>: <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">T</span><span class="p">.</span><span class="nc">RandomHorizontalFlip</span><span class="p">(</span><span class="n">p</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>
</code></pre></div> </div> </li> <li><strong>Vertical Flip</strong>: <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">T</span><span class="p">.</span><span class="nc">RandomVerticalFlip</span><span class="p">(</span><span class="n">p</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>
</code></pre></div> </div> </li> <li><strong>Symmetry-based Learning</strong>: Useful in object detection and scene understanding.</li> </ul> <hr/> <h2 id="markov-matrices-and-stochastic-processes">Markov Matrices and Stochastic Processes</h2> <p>Markov models describe systems that evolve probabilistically over time, where the future depends only on the current state. Their underlying structure is captured by <strong>stochastic (Markov) matrices</strong>.</p> <hr/> <h3 id="stochastic-matrices">Stochastic Matrices</h3> <p>A <strong>Markov matrix</strong> (or <strong>row-stochastic matrix</strong>) is a square matrix \(P \in \mathbb{R}^{n \times n}\) where:</p> <ol> <li>\(P_{ij} \geq 0\) for all \(i, j\),</li> <li>\(\sum_{j=1}^n P_{ij} = 1\) for all \(i\) (each row sums to 1).</li> </ol> <p>This means \(P_{ij}\) is the probability of transitioning from state \(i\) to state \(j\).</p> <p>Let \(x_t\) be a <strong>probability distribution vector</strong> at time \(t\). Then:</p> \[x_{t+1} = x_t P\] <p>This recurrence describes the <strong>evolution of a Markov chain</strong> over time.</p> <hr/> <h3 id="stationary-distribution">Stationary Distribution</h3> <p>A distribution \(\pi\) is <strong>stationary</strong> if:</p> \[\pi = \pi P\] <p>This represents the long-term distribution of states. Under mild conditions (irreducibility, aperiodicity), every Markov chain has a unique stationary distribution.</p> <hr/> <h3 id="application-pagerank-and-random-walks">Application: PageRank and Random Walks</h3> <p><strong>PageRank Algorithm</strong>:</p> <ul> <li>Models the web as a Markov chain.</li> <li>Pages are states, links are transitions.</li> <li>Uses a stochastic matrix with damping:</li> </ul> \[P' = \alpha P + (1 - \alpha) \frac{1}{n} \mathbf{1}\mathbf{1}^T\] <p>Stationary distribution \(\pi\) is computed such that:</p> \[\pi = \pi P'\] <p>Other Applications:</p> <ul> <li><strong>Language Modeling</strong>: Character or word-level Markov chains.</li> <li><strong>Hidden Markov Models (HMMs)</strong>: NLP, speech, time-series.</li> <li><strong>Graph algorithms</strong>: Random walk-based node ranking and clustering.</li> </ul> <hr/> <h2 id="summary-3">Summary</h2> <table> <thead> <tr> <th style="text-align: left">Concept</th> <th style="text-align: center">Mathematical Description</th> <th style="text-align: right">Applications</th> </tr> </thead> <tbody> <tr> <td style="text-align: left">Rotation Matrix</td> <td style="text-align: center">\(R^T R = I, \ \det(R) = 1\)</td> <td style="text-align: right">CV, robotics, 3D vision, pose estimation</td> </tr> <tr> <td style="text-align: left">Reflection Matrix</td> <td style="text-align: center">\(R = I - 2nn^T, \ \det(R) = -1\)</td> <td style="text-align: right">Data augmentation, symmetry modeling</td> </tr> <tr> <td style="text-align: left">Euler Angles</td> <td style="text-align: center">Composition of axis-wise rotations</td> <td style="text-align: right">Robotics, camera modeling</td> </tr> <tr> <td style="text-align: left">Stochastic Matrix</td> <td style="text-align: center">\(P_{ij} \geq 0, \ \sum_j P_{ij} = 1\)</td> <td style="text-align: right">Markov chains, PageRank, probabilistic models</td> </tr> <tr> <td style="text-align: left">Stationary Distribution</td> <td style="text-align: center">\(\pi = \pi P\)</td> <td style="text-align: right">Long-term behavior modeling</td> </tr> </tbody> </table> <hr/> <p>Rotation and reflection matrices form the mathematical backbone of <strong>spatial transformations</strong> in ML applications like vision and robotics. Meanwhile, Markov matrices provide a <strong>probabilistic framework</strong> to model temporal evolution in tasks such as <strong>language modeling</strong>, <strong>search ranking</strong>, and <strong>sequence prediction</strong>.</p> <hr/> <h1 id="advanced-projections-random-projections-and-the-johnsonlindenstrauss-lemma">Advanced Projections: Random Projections and the Johnson–Lindenstrauss Lemma</h1> <p>In modern machine learning and data science, high-dimensional datasets are common—particularly in fields like <strong>natural language processing</strong>, <strong>image processing</strong>, and <strong>information retrieval</strong>. However, high dimensionality brings computational and storage challenges, as well as the <strong>curse of dimensionality</strong>.</p> <p>One elegant solution to this is <strong>random projection</strong>, a method for dimensionality reduction that is fast, scalable, and surprisingly effective. Its theoretical foundation is the <strong>Johnson–Lindenstrauss Lemma</strong>, which guarantees that random projections approximately preserve distances between points.</p> <p>This section explains:</p> <ul> <li>The theory and math behind random projections,</li> <li>The Johnson–Lindenstrauss Lemma and its guarantees,</li> <li>Applications in NLP, IR, privacy, and beyond.</li> </ul> <hr/> <h2 id="1-the-need-for-dimensionality-reduction">1. The Need for Dimensionality Reduction</h2> <p>Let \(X \in \mathbb{R}^{n \times d}\) be a dataset with \(n\) samples in a high-dimensional space \(\mathbb{R}^d\).</p> <p>Problems with large \(d\):</p> <ul> <li><strong>Computational inefficiency</strong>: Matrix operations are expensive.</li> <li><strong>Memory consumption</strong>: Storing all features is costly.</li> <li><strong>Overfitting</strong>: Too many features relative to data points.</li> <li><strong>Distance concentration</strong>: In high dimensions, pairwise distances become less informative.</li> </ul> <p>Goal: Reduce the dimensionality from \(d\) to \(k \ll d\) such that <strong>geometric structure (e.g., pairwise distances)</strong> is preserved.</p> <hr/> <h2 id="2-random-projections">2. Random Projections</h2> <p>Instead of learning an optimal projection (like PCA), <strong>random projections</strong> use a <strong>random linear map</strong>:</p> <p>Let \(R \in \mathbb{R}^{k \times d}\) be a random matrix. Then:</p> \[z_i = \frac{1}{\sqrt{k}} R x_i \in \mathbb{R}^k\] <p>for each data point \(x_i \in \mathbb{R}^d\).</p> <p>The random matrix \(R\) typically has entries sampled from:</p> <ul> <li>Standard Gaussian: \(R_{ij} \sim \mathcal{N}(0, 1)\),</li> <li>Sparse sign matrices: \(R_{ij} \in \{-1, 0, +1\}\) with controlled sparsity.</li> </ul> <hr/> <h2 id="3-johnsonlindenstrauss-lemma">3. Johnson–Lindenstrauss Lemma</h2> <p>The <strong>Johnson–Lindenstrauss Lemma</strong> states that a small set of points in high-dimensional space can be mapped into a lower-dimensional space such that pairwise distances are approximately preserved.</p> <h3 id="theorem-jl-lemma">Theorem (JL Lemma)</h3> <p>For any \(0 &lt; \epsilon &lt; 1\) and integer \(n\), let \(X = \{x_1, \ldots, x_n\} \subset \mathbb{R}^d\) be a set of \(n\) points. Then for:</p> \[k = O\left(\frac{\log n}{\epsilon^2}\right),\] <p>there exists a linear map \(f: \mathbb{R}^d \rightarrow \mathbb{R}^k\) such that for all \(i, j\):</p> \[(1 - \epsilon)\|x_i - x_j\|_2^2 \leq \|f(x_i) - f(x_j)\|_2^2 \leq (1 + \epsilon)\|x_i - x_j\|_2^2\] <p>This means that <strong>random projections preserve pairwise distances up to small distortion</strong> with high probability.</p> <hr/> <h3 id="intuition-1">Intuition</h3> <ul> <li>The JL Lemma shows that <strong>no information-theoretic bottleneck</strong> exists when compressing data from \(\mathbb{R}^d\) to \(\mathbb{R}^k\), as long as \(k = O(\log n)\).</li> <li>This is <strong>data-independent</strong>: No need to look at the data when designing the projection.</li> </ul> <hr/> <h2 id="4-construction-of-projection-matrix">4. Construction of Projection Matrix</h2> <p>Let \(R \in \mathbb{R}^{k \times d}\) be the random matrix. Some common constructions:</p> <h3 id="41-gaussian-random-projection">4.1 Gaussian Random Projection</h3> <p>Each entry is drawn i.i.d. from:</p> \[R_{ij} \sim \mathcal{N}(0, 1)\] <p>Then the projection is:</p> \[f(x) = \frac{1}{\sqrt{k}} R x\] <p>This satisfies the JL lemma with high probability.</p> <hr/> <h3 id="42-sparse-random-projection">4.2 Sparse Random Projection</h3> <p>To improve speed and memory:</p> \[R_{ij} = \sqrt{s} \cdot \begin{cases} +1 &amp; \text{with probability } \frac{1}{2s}, \\ 0 &amp; \text{with probability } 1 - \frac{1}{s}, \\ -1 &amp; \text{with probability } \frac{1}{2s} \end{cases}\] <p>For example, \(s = 3\) gives ~67% sparsity.</p> <hr/> <h2 id="5-applications">5. Applications</h2> <h3 id="51-natural-language-processing-nlp">5.1 Natural Language Processing (NLP)</h3> <ul> <li><strong>TF-IDF vectors</strong> for documents can have tens of thousands of dimensions.</li> <li>Random projections reduce dimensionality for: <ul> <li><strong>Document classification</strong>,</li> <li><strong>Similarity search</strong>,</li> <li><strong>Topic modeling</strong> pre-processing.</li> </ul> </li> </ul> <p><strong>Example</strong>:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">sklearn.random_projection</span> <span class="kn">import</span> <span class="n">GaussianRandomProjection</span>
<span class="n">transformer</span> <span class="o">=</span> <span class="nc">GaussianRandomProjection</span><span class="p">(</span><span class="n">n_components</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
<span class="n">X_new</span> <span class="o">=</span> <span class="n">transformer</span><span class="p">.</span><span class="nf">fit_transform</span><span class="p">(</span><span class="n">X_tfidf</span><span class="p">)</span>
</code></pre></div></div> <hr/> <h3 id="52-information-retrieval-and-ann-search">5.2 Information Retrieval and ANN Search</h3> <ul> <li>Used to <strong>index high-dimensional vectors</strong> for approximate nearest neighbors (ANN).</li> <li>Efficiently reduce the dimension of image embeddings, word embeddings, etc.</li> <li>Compatible with LSH (Locality-Sensitive Hashing).</li> </ul> <hr/> <h3 id="53-differential-privacy-and-data-privacy">5.3 Differential Privacy and Data Privacy</h3> <ul> <li>Random projections are used to <strong>obscure sensitive dimensions</strong> while preserving utility.</li> <li>Also appear in <strong>private matrix factorization</strong> and federated learning pipelines.</li> </ul> <hr/> <h3 id="54-kernel-approximation">5.4 Kernel Approximation</h3> <ul> <li><strong>Random Fourier Features</strong> approximate Gaussian/RBF kernels by projecting into a low-dimensional space.</li> <li>Scales kernel methods to large datasets: \(k(x, y) \approx \phi(x)^T \phi(y)\)</li> </ul> <p>Where \(\phi(x)\) is obtained via random projections.</p> <hr/> <h2 id="6-comparison-with-pca">6. Comparison with PCA</h2> <table> <thead> <tr> <th style="text-align: left">Aspect</th> <th style="text-align: center">PCA</th> <th style="text-align: right">Random Projection</th> </tr> </thead> <tbody> <tr> <td style="text-align: left">Data-dependent</td> <td style="text-align: center">Yes</td> <td style="text-align: right">No</td> </tr> <tr> <td style="text-align: left">Computational cost</td> <td style="text-align: center">High (SVD-based)</td> <td style="text-align: right">Low (matrix multiplication)</td> </tr> <tr> <td style="text-align: left">Distance preservation</td> <td style="text-align: center">Optimal for top-variance directions</td> <td style="text-align: right">Approximate, but probabilistically guaranteed</td> </tr> <tr> <td style="text-align: left">Scalability</td> <td style="text-align: center">Less scalable for large \(d\)</td> <td style="text-align: right">Highly scalable</td> </tr> <tr> <td style="text-align: left">Interpretability</td> <td style="text-align: center">High (axes = principal components)</td> <td style="text-align: right">Low</td> </tr> </tbody> </table> <hr/> <h2 id="summary-4">Summary</h2> <table> <thead> <tr> <th style="text-align: left">Concept</th> <th style="text-align: center">Mathematical Idea</th> <th style="text-align: right">Application Domains</th> </tr> </thead> <tbody> <tr> <td style="text-align: left">Johnson–Lindenstrauss Lemma</td> <td style="text-align: center">\(k = O\left(\frac{\log n}{\epsilon^2}\right)\)</td> <td style="text-align: right">Distance-preserving low-dim embedding</td> </tr> <tr> <td style="text-align: left">Gaussian Projection</td> <td style="text-align: center">\(R_{ij} \sim \mathcal{N}(0, 1)\)</td> <td style="text-align: right">NLP, embeddings, privacy</td> </tr> <tr> <td style="text-align: left">Sparse Projection</td> <td style="text-align: center">\(R_{ij} \in \{-1, 0, +1\}\) with sparsity</td> <td style="text-align: right">Faster computation</td> </tr> <tr> <td style="text-align: left">Random Fourier Features</td> <td style="text-align: center">Approx. kernel projection via random bases</td> <td style="text-align: right">Kernel methods on large datasets</td> </tr> <tr> <td style="text-align: left">Distance Preservation</td> <td style="text-align: center">\(|x_i - x_j| \approx |f(x_i) - f(x_j)|\)</td> <td style="text-align: right">ANN, clustering, manifold learning</td> </tr> </tbody> </table> <hr/> <p><strong>Random projections</strong> offer a principled, efficient, and theoretically sound method to <strong>compress high-dimensional data</strong> while preserving its <strong>geometric structure</strong>. Thanks to the <strong>Johnson–Lindenstrauss Lemma</strong>, we can apply these projections without worrying about distortion—making them perfect for large-scale ML systems.</p> <p>Whether you’re dealing with:</p> <ul> <li>Large vocabulary document matrices in NLP,</li> <li>Embedding vectors in image retrieval,</li> <li>Kernel methods in high dimensions,</li> </ul> <p>random projections are a tool you should definitely have in your toolbox.</p>]]></content><author><name></name></author><category term="machine-learning"/><category term="math"/><category term="math-for-ml"/><category term="ml"/><category term="ai"/><category term="linear-algebra"/><category term="math"/><summary type="html"><![CDATA[Linear Algebra 6 - Mathematics for Machine Learning]]></summary></entry><entry><title type="html">Linear Algebra Basics for ML - Eigenvalues, Eigenvectors, and Singular Value Decomposition</title><link href="https://joyoshish.github.io/blog/2022/mathforml-linalg4/" rel="alternate" type="text/html" title="Linear Algebra Basics for ML - Eigenvalues, Eigenvectors, and Singular Value Decomposition"/><published>2022-02-03T00:00:00+00:00</published><updated>2022-02-03T00:00:00+00:00</updated><id>https://joyoshish.github.io/blog/2022/mathforml-linalg4</id><content type="html" xml:base="https://joyoshish.github.io/blog/2022/mathforml-linalg4/"><![CDATA[<p>Understanding how data transforms under linear mappings is core to machine learning, and eigenvalues and eigenvectors lie at the heart of this. Whether we’re analyzing variance in high-dimensional data or compressing information with minimal loss, these concepts help us simplify and interpret complex systems. In this post, we’ll build intuition, explore the math behind eigen decomposition and diagonalization, and connect the dots to key ML applications.</p> <hr/> <h2 id="what-makes-eigenvectors-special">What Makes Eigenvectors Special?</h2> <p>When we apply a matrix transformation to a vector, we typically expect its direction to change. But some vectors resist this change—they may get stretched or shrunk, but they stay on the same line. These are the <strong>eigenvectors</strong> of the transformation.</p> <p>Formally, if \(A\) is a square matrix, and \(\mathbf{v}\) is a vector such that:</p> \[A \mathbf{v} = \lambda \mathbf{v},\] <p>then \(\mathbf{v}\) is called an eigenvector of \(A\) and \(\lambda\) is the corresponding <strong>eigenvalue</strong>. The transformation scales the vector by \(\lambda\) without rotating it.</p> <p>To visualize this, imagine applying a matrix that stretches space vertically. Vectors aligned with the vertical axis simply stretch—those are eigenvectors with eigenvalues greater than 1. Vectors aligned with the horizontal axis may stay the same length (eigenvalue = 1) or stretch differently. But vectors at diagonal angles typically change direction; they’re not eigenvectors.</p> <p>This geometric idea is powerful in ML: eigenvectors identify the key <strong>directions</strong> in which data varies, and eigenvalues tell us <strong>how much</strong> variation lies in each direction.</p> <hr/> <h2 id="why-do-eigenvectors-matter-in-ml">Why Do Eigenvectors Matter in ML?</h2> <p>In machine learning, eigen decomposition helps us understand structure and simplify computations. Take <strong>Principal Component Analysis (PCA)</strong> as an example—it identifies the directions (principal components) along which data varies most. These directions are eigenvectors of the covariance matrix. The corresponding eigenvalues tell us how much variance each direction captures.</p> <p>This insight drives a wide range of applications:</p> <ul> <li><strong>Dimensionality reduction:</strong> Eliminate less informative directions to compress data.</li> <li><strong>Feature selection:</strong> Identify directions with the most meaningful variation.</li> <li><strong>Interpretability:</strong> Understand how transformations like matrix multiplications affect data.</li> <li><strong>Stability and convergence:</strong> In optimization and iterative methods, the dominant eigenvalue often controls convergence speed.</li> </ul> <p>In short, eigenvalues and eigenvectors distill the essence of a transformation.</p> <hr/> <h2 id="eigen-decomposition-and-diagonalization">Eigen-Decomposition and Diagonalization</h2> <p>Let’s now formalize this intuition. Given a square matrix \(A \in \mathbb{R}^{n \times n}\), an eigen-decomposition expresses it in terms of its eigenvectors and eigenvalues. First, we solve the <strong>characteristic equation</strong>:</p> \[\det(A - \lambda I) = 0\] <p>The roots \(\lambda_1, \lambda_2, \dots, \lambda_n\) are the eigenvalues of \(A\). For each eigenvalue, we solve:</p> \[(A - \lambda I)\mathbf{v} = 0\] <p>to find the corresponding eigenvector \(\mathbf{v}\).</p> <p>If \(A\) has \(n\) linearly independent eigenvectors, we can form a matrix \(Q\) whose columns are those eigenvectors. Let \(\Lambda\) be the diagonal matrix of the corresponding eigenvalues:</p> \[Q = [\mathbf{v}_1\ \mathbf{v}_2\ \cdots\ \mathbf{v}_n], \quad \Lambda = \begin{bmatrix} \lambda_1 &amp; 0 &amp; \cdots &amp; 0 \\ 0 &amp; \lambda_2 &amp; \cdots &amp; 0 \\ \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\ 0 &amp; 0 &amp; \cdots &amp; \lambda_n \end{bmatrix}\] <p>Then the matrix \(A\) can be written as:</p> \[A = Q \Lambda Q^{-1}\] <p>This is the <strong>diagonalization</strong> of \(A\). It tells us that in the basis formed by eigenvectors, the transformation \(A\) just scales each coordinate by its eigenvalue.</p> <p>For <strong>symmetric matrices</strong>, the situation is even better: the eigenvectors are orthogonal and \(Q\) becomes an orthogonal matrix (i.e., \(Q^{-1} = Q^T\)), giving:</p> \[A = Q \Lambda Q^T\] <p>This is known as the <strong>spectral theorem</strong>, and it holds for any real symmetric matrix—like covariance matrices, Laplacians, and Gram matrices in ML. The eigenvalues are always real, and the eigenvectors form an orthonormal basis.</p> <hr/> <h2 id="a-concrete-example-diagonalizing-a-matrix">A Concrete Example: Diagonalizing a Matrix</h2> <p>Let’s walk through an example. Suppose:</p> \[A = \begin{pmatrix} 3 &amp; 1 \\ 0 &amp; 2 \end{pmatrix}\] <p>To find the eigenvalues, solve:</p> \[\det(A - \lambda I) = (3 - \lambda)(2 - \lambda) = 0\] <p>The roots are \(\lambda_1 = 3\) and \(\lambda_2 = 2\).</p> <p>To find eigenvectors:</p> <ul> <li>For \(\lambda_1 = 3\), solve \((A - 3I)\mathbf{v} = 0\):</li> </ul> \[\begin{pmatrix} 0 &amp; 1 \\ 0 &amp; -1 \end{pmatrix} \begin{pmatrix} v_1 \\ v_2 \end{pmatrix} = 0 \quad \Rightarrow \quad v_2 = 0\] <p>Choose \(v_1 = 1\). So one eigenvector is \(\mathbf{v}^{(1)} = \begin{pmatrix} 1 \\ 0 \end{pmatrix}\).</p> <ul> <li>For \(\lambda_2 = 2\), solve \((A - 2I)\mathbf{v} = 0\):</li> </ul> \[\begin{pmatrix} 1 &amp; 1 \\ 0 &amp; 0 \end{pmatrix} \begin{pmatrix} v_1 \\ v_2 \end{pmatrix} = 0 \quad \Rightarrow \quad v_2 = -v_1\] <p>Choose \(v_1 = 1\). So \(\mathbf{v}^{(2)} = \begin{pmatrix} 1 \\ -1 \end{pmatrix}\).</p> <p>Now we build:</p> \[Q = \begin{pmatrix} 1 &amp; 1 \\ 0 &amp; -1 \end{pmatrix}, \quad \Lambda = \begin{pmatrix} 3 &amp; 0 \\ 0 &amp; 2 \end{pmatrix}\] <p>We can verify that:</p> \[A = Q \Lambda Q^{-1}\] <p>In this eigenbasis, applying \(A\) is as simple as scaling by 3 and 2 along the new axes.</p> <hr/> <h2 id="why-diagonalization-matters-in-machine-learning">Why Diagonalization Matters in Machine Learning</h2> <p>In ML, diagonalization is not just a theoretical convenience—it enables faster computation and deeper insight.</p> <p>When matrices are diagonalizable, operations like computing \(A^k\), solving \(A \mathbf{x} = \mathbf{b}\), or evaluating matrix exponentials become much easier. This is vital in <strong>graph analysis</strong>, <strong>dynamical systems</strong>, and <strong>deep learning</strong>, where matrix powers and iterative updates are common.</p> <p>In <strong>PCA</strong>, the covariance matrix is symmetric and positive semi-definite, so we can always decompose it into eigenvectors and eigenvalues. The eigenvectors give us <strong>uncorrelated directions</strong> in feature space, and eigenvalues quantify how much variance lies in each direction. Keeping only the top \(k\) components (largest eigenvalues) gives a compressed yet informative view of the data.</p> <p>Diagonalization also underlies <strong>spectral clustering</strong>, <strong>recommendation systems</strong>, and <strong>natural language processing</strong>. In these cases, the eigenvectors often correspond to <strong>latent patterns</strong> or <strong>community structures</strong>, and the eigenvalues measure their significance. For instance, in spectral clustering, the eigenvectors of a graph Laplacian can reveal cluster boundaries. In NLP, eigenvectors from co-occurrence matrices highlight semantic dimensions in word relationships.</p> <p>Another powerful insight comes from <strong>power iteration</strong>—a technique that leverages repeated matrix multiplication to find the dominant eigenvector. This behavior is at the core of algorithms like <strong>PageRank</strong>.</p> <p>Lastly, the diagonalized form \(A = Q \Lambda Q^{-1}\) gives us a <strong>spectrum</strong> of the transformation: the eigenvalues summarize key properties like total variance (via the trace) and overall scaling (via the determinant). These quantities link abstract algebra to concrete geometry and help us interpret the transformation as acting independently along each eigenvector axis.</p> <h2 id="properties-of-eigenvalues-and-eigenvectors">Properties of Eigenvalues and Eigenvectors</h2> <p>Understanding the properties of eigenvalues and eigenvectors reveals deep insights into linear transformations, variance, and the structure of data in machine learning. Here’s a concise overview:</p> <ul> <li><strong>Scaling and Linearity</strong><br/> If \(A \mathbf{v} = \lambda \mathbf{v}\), then for any scalar \(c\),<br/> \(A (c \mathbf{v}) = \lambda (c \mathbf{v})\).<br/> So, any nonzero scalar multiple of an eigenvector is still an eigenvector associated with the same eigenvalue. <ul> <li>The set of all such vectors (plus the zero vector) forms the <strong>eigenspace</strong>.</li> <li>A linear combination of two eigenvectors is generally not an eigenvector unless they share the same eigenvalue.</li> </ul> </li> <li><strong>Invariant Subspaces</strong><br/> Eigenvectors define one-dimensional invariant subspaces under transformation. <ul> <li>The span of multiple eigenvectors (with corresponding eigenvalues \(\{\lambda_1, \lambda_2\}\)) also forms an invariant subspace.</li> <li>In PCA, the subspace spanned by the top \(k\) eigenvectors captures the principal variance in data.</li> </ul> </li> <li><strong>Geometric Interpretation</strong><br/> Eigenvectors are directions in which the matrix acts as a pure stretch/compression: <ul> <li>\(\mid\lambda\mid &gt; 1\) → stretched</li> <li>\(\mid\lambda\mid &lt; 1\) → compressed</li> <li>\(\lambda = -1\) → flipped (180° rotation)</li> <li>\(\lambda = 0\) → squashed to the origin<br/> In symmetric matrices, eigenvectors form orthogonal axes—ideal for interpreting transformations.</li> </ul> </li> <li><strong>Variance Interpretation (PCA)</strong><br/> For a covariance matrix \(S\): <ul> <li>The eigenvector with the largest eigenvalue corresponds to the direction of <strong>maximum variance</strong>.</li> <li>Eigenvalues represent the <strong>amount of variance</strong> along their eigenvector directions.</li> <li>If eigenvalues are \(\lambda_1 \ge \lambda_2 \ge \dots \ge \lambda_n\) with eigenvectors \(e_1, e_2, \dots, e_n\), then: <ul> <li>\(e_1\) is the direction of highest variance.</li> <li>\(\frac{\lambda_1}{\sum_i \lambda_i}\) is the proportion of total variance captured by that direction.</li> </ul> </li> <li>The <strong>sum</strong> of all eigenvalues equals the <strong>trace</strong> of \(S\) (total variance).</li> </ul> </li> <li><strong>Orthogonality (for symmetric matrices)</strong> <ul> <li>Eigenvectors corresponding to different eigenvalues are orthogonal:<br/> \(e_i^T e_j = 0 \text{ for } i \ne j\)</li> <li>We can choose an <strong>orthonormal</strong> set of eigenvectors for symmetric matrices, making projections and decompositions simpler.</li> </ul> </li> <li><strong>Sum and Product of Eigenvalues</strong> <ul> <li>The <strong>sum</strong> of the eigenvalues of \(A\) is equal to its <strong>trace</strong>: \(\sum_{i=1}^{n} \lambda_i = \text{tr}(A)\)</li> <li>The <strong>product</strong> of the eigenvalues equals the <strong>determinant</strong> of \(A\): \(\prod_{i=1}^{n} \lambda_i = \det(A)\)</li> <li>If any eigenvalue is zero, \(A\) is <strong>singular</strong>. If all eigenvalues are positive, \(A\) is <strong>positive definite</strong>.</li> </ul> </li> <li><strong>Left vs Right Eigenvectors</strong> <ul> <li>Typically, we refer to <strong>right eigenvectors</strong> satisfying \(A \mathbf{v} = \lambda \mathbf{v}\).</li> <li><strong>Left eigenvectors</strong> satisfy \(\mathbf{w}^T A = \lambda \mathbf{w}^T\).</li> <li>For <strong>symmetric matrices</strong>, left and right eigenvectors are transposes of each other.</li> <li>In applications like <strong>PageRank</strong>, the left eigenvector of the transition matrix (eigenvector of \(P^T\)) represents the stationary distribution.</li> </ul> </li> </ul> <p>These properties show how eigenvalues and eigenvectors help us understand invariant directions, the strength of transformation along those directions, and variance structure in data.</p> <h2 id="principal-component-analysis-pca-using-eigen-decomposition">Principal Component Analysis (PCA) Using Eigen Decomposition</h2> <p>Principal Component Analysis (PCA) is a powerful technique that reduces the dimensionality of data while preserving as much variance as possible. Given an \(m \times n\) data matrix \(X\) (with \(m\) samples and \(n\) features), the key idea is to find new axes—orthogonal directions in the feature space—that best capture the variance in the data. These axes are the principal components, which correspond to the top eigenvectors of the data’s covariance matrix.</p> <p>To derive PCA, we first center the data by subtracting the mean from each feature, so that each column of \(X\) has mean zero. Then, we compute the sample covariance matrix:</p> \[S = \frac{1}{m - 1} X^T X\] <p>The goal is to find a unit vector \(\mathbf{w} \in \mathbb{R}^n\) such that the projection of the data onto \(\mathbf{w}\) has the maximum possible variance. The variance along \(\mathbf{w}\) is given by:</p> \[\mathrm{Var}(X\mathbf{w}) = \mathbf{w}^T S \mathbf{w}\] <p>We maximize this subject to the constraint \(\|\mathbf{w}\| = 1\). This leads us to an eigenvalue problem. Since \(S\) is symmetric and positive semidefinite, we can write:</p> \[S = Q \Lambda Q^T\] <p>Here, \(\Lambda\) is a diagonal matrix of eigenvalues \(\lambda_1 \ge \lambda_2 \ge \cdots \ge \lambda_n \ge 0\), and \(Q\) contains the corresponding orthonormal eigenvectors \(\mathbf{q}_1, \mathbf{q}_2, \dots, \mathbf{q}_n\) as columns.</p> <p>If we express \(\mathbf{w}\) as \(Q \mathbf{v}\) for some unit vector \(\mathbf{v}\) (since \(Q\) is orthonormal), the objective becomes:</p> \[\mathbf{w}^T S \mathbf{w} = \mathbf{v}^T \Lambda \mathbf{v} = \sum_{i=1}^n \lambda_i v_i^2\] <p>To maximize this weighted average of eigenvalues, we assign all weight to the largest eigenvalue by choosing \(\mathbf{v} = (1, 0, 0, \dots, 0)^T\). This corresponds to choosing \(\mathbf{w} = \mathbf{q}_1\), the eigenvector associated with \(\lambda_1\). Thus, the first principal component is the direction of greatest variance in the data.</p> <p>Subsequent components are found by selecting eigenvectors orthogonal to the previous ones, associated with the next highest eigenvalues. This way, projecting data onto the top \(k\) eigenvectors captures the most variance possible among all \(k\)-dimensional subspaces.</p> <p>Another perspective is that PCA finds the best rank-\(k\) approximation of the data in terms of minimizing reconstruction error. This makes PCA not only a tool for understanding variance but also for efficient data compression and noise reduction.</p> <p>To summarize, compute the covariance matrix:</p> \[S = \frac{1}{m - 1} X^T X\] <p>Then find eigenvectors \(\mathbf{e}_1, \mathbf{e}_2, \dots, \mathbf{e}_n\) and corresponding eigenvalues \(\lambda_1 \ge \lambda_2 \ge \cdots \ge \lambda_n\). The proportion of variance captured by the top \(k\) components is:</p> \[\frac{\sum_{i=1}^{k} \lambda_i}{\sum_{i=1}^{n} \lambda_i}\] <p>Typically, one selects \(k\) so that this ratio exceeds a threshold like 95%, ensuring most of the information is retained while significantly reducing dimensionality.</p> <p>Once eigenvalues are computed, we often visualize them using a scree plot. This plot displays eigenvalues in descending order versus their component indices. A sharp “elbow” in the curve suggests that components beyond that point contribute little variance. For example, in the Iris dataset with four features, the scree plot shows the first eigenvalue around 4.2, the second about 0.24, and the remaining two near zero. This suggests that one or two principal components are sufficient to explain most of the variance.</p> <p>In practice, PCA is widely used for visualization, especially when reducing high-dimensional data to 2 or 3 components. It also serves as a preprocessing step for other algorithms, helping to mitigate the curse of dimensionality or reduce noise. Since the principal components are uncorrelated (due to orthogonality of eigenvectors), they provide cleaner inputs for downstream models.</p> <p>Here’s a Python example using scikit-learn on the Iris dataset:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">from</span> <span class="n">sklearn.decomposition</span> <span class="kn">import</span> <span class="n">PCA</span>
<span class="kn">from</span> <span class="n">sklearn.datasets</span> <span class="kn">import</span> <span class="n">load_iris</span>

<span class="c1"># Load and center the data
</span><span class="n">iris</span> <span class="o">=</span> <span class="nf">load_iris</span><span class="p">()</span>
<span class="n">X</span> <span class="o">=</span> <span class="n">iris</span><span class="p">.</span><span class="n">data</span>
<span class="n">X</span> <span class="o">=</span> <span class="n">X</span> <span class="o">-</span> <span class="n">X</span><span class="p">.</span><span class="nf">mean</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>

<span class="c1"># Fit PCA
</span><span class="n">pca</span> <span class="o">=</span> <span class="nc">PCA</span><span class="p">(</span><span class="n">n_components</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>
<span class="n">pca</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Eigenvalues:</span><span class="sh">"</span><span class="p">,</span> <span class="n">pca</span><span class="p">.</span><span class="n">explained_variance_</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Explained variance ratio:</span><span class="sh">"</span><span class="p">,</span> <span class="n">pca</span><span class="p">.</span><span class="n">explained_variance_ratio_</span><span class="p">)</span>
</code></pre></div></div> <p>Typical output might be:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Eigenvalues: [4.228 0.243 0.078 0.024]
Explained variance ratio: [0.9246 0.0531 0.0171 0.0052]
</code></pre></div></div> <p>This confirms that the first component alone captures over 92% of the total variance, and the first two together over 97%. Projecting the data into these two dimensions gives a near-complete representation of the structure, making it ideal for plotting and exploratory analysis.</p> <p>Finally, PCA also helps denoise data. Noise tends to appear as low-variance components (low eigenvalues), and by discarding those, we remove irrelevant variation. In real-world ML pipelines, one typically performs PCA on training data, selects the number of components via a scree or cumulative variance plot, and then transforms both training and test data into the lower-dimensional space for modeling. Libraries like scikit-learn internally use efficient algorithms like Singular Value Decomposition (SVD) to compute PCA, especially when the number of features is large.</p> <hr/> <h1 id="singular-value-decomposition-svd">Singular Value Decomposition (SVD)</h1> <p>Eigen-decomposition we discussed is for square matrices (and especially symmetric matrices in many ML contexts). Singular Value Decomposition (SVD) is a more general matrix factorization that works for any \(m \times n\) matrix (square or rectangular, symmetric or not). SVD is one of the most important algorithms in linear algebra – often described as the “Swiss Army knife” of matrix factorizations – because it has a wide range of applications from solving inverse problems to dimensionality reduction.</p> <p>The Singular Value Decomposition of a matrix \(M\) is a factorization of the form:</p> \[M = U\, \Sigma\, V^T,\] <p>where:</p> <p>\(M\) is an \(m \times n\) real matrix (think of m samples and n features, or an image matrix, etc.).</p> <p>\(U\) is an \(m \times m\) orthogonal matrix (its columns are orthonormal vectors \(u_1, u_2, \dots, u_m\), called left singular vectors).</p> <p>\(V\) is an \(n \times n\) orthogonal matrix (its columns are orthonormal vectors \(v_1, \dots, v_n\), called right singular vectors).</p> <p>\(\Sigma\) is an \(m \times n\) diagonal matrix (not necessarily square) with nonnegative values on the diagonal. These diagonal entries \(\sigma_1, \sigma_2, \dots\) are called singular values, and by convention are ordered \(\sigma_1 \ge \sigma_2 \ge \dots \ge 0\).</p> <p>Only the first \(\min(m,n)\) diagonal entries of \(\Sigma\) are non-zero; the rest of \(\Sigma\) (if \(m \ne n\)) are effectively padded with zeros. Intuitively, SVD says that any linear transformation \(M\) can be viewed as a rotation (by \(V^T\)), then a scaling (by \(\Sigma\)), then another rotation (by \(U\)). This is analogous to eigen-decomposition but doesn’t require the matrix to be square or symmetric. In fact, if \(M\) is symmetric and orthogonally diagonalizable, SVD and eigen-decomposition coincide (U and V will be the same aside from dimension).</p> <p>Historical note: SVD was discovered in the 19th century by Eugenio Beltrami (1873) and Camille Jordan (1874) independentl (What Is the Singular Value Decomposition? – Nick Higham)】, though it wasn’t widely used until much later. It was popularized in numerical computing by Gene Golub and collaborators in the 1960s, who developed efficient algorithms (the Golub–Reinsch algorithm) to compute i (What Is the Singular Value Decomposition? – Nick Higham)】. With the advent of computers, SVD became a fundamental tool because it’s stable and reliable for solving linear systems and least squares, even when matrices are ill-conditioned or singular.</p> <h2 id="mathematical-intuition-and-relation-to-eigenvalues">Mathematical Intuition and Relation to Eigenvalues</h2> <p>SVD can be derived or understood via the eigen-decomposition of \(M^T M\) (an \(n \times n\) symmetric matrix) or \(M M^T\) (an \(m \times m\) symmetric matrix). Note that \(M^T M\) is symmetric positive semidefinite, so it has an eigen-decomposition:</p> \[M^T M = V\,D\,V^T,\] <p>where \(D\) is diagonal with eigenvalues \(\mu_1, \mu_2, \dots, \mu_n \ge 0\), and \(V\)’s columns are the eigenvectors (right singular vectors of \(M\)). It turns out the non-zero eigenvalues of \(M^T M\) (and \(M M^T\)) are the squares of the singular values (\(\sigma_i^2\)). In fact:</p> <ul> <li>The singular values \(\sigma_i = \sqrt{\mu_i}\)</li> <li>The eigenvectors of \(M^T M\) are the right singular vectors</li> <li>Similarly, eigenvectors of \(M M^T\) (which has the same non-zero eigenvalues) are the left singular vectors (columns of \(U\))</li> </ul> \[M M^T = U D' U^T\] <p>with the same non-zero eigenvalues \(\mu_i\) filling \(D'\) (plus additional zeros if \(m &gt; n\)).</p> <p>So the way to compute the SVD is: find eigenvalues and eigenvectors of \(M^T M\). Suppose \(\mu_1 \ge \mu_2 \ge \dots \ge \mu_r &gt; 0\) are the non-zero eigenvalues (\(r = \text{rank of } M\)), with eigenvectors \(v_1, \dots, v_r\). Set \(\sigma_i = \sqrt{\mu_i}\). Let \(v_i\) be the i-th column of \(V\). Then define:</p> \[u_i = \frac{1}{\sigma_i} M v_i\] <p>One can show \(u_i\) are unit vectors and are eigenvectors of \(M M^T\). These form the first \(r\) columns of \(U\). The remaining columns of \(U\) (if any) can be any orthonormal vectors completing the basis. Similarly, if \(n &gt; r\), the last columns of \(V\) can be any orthonormal completion (or correspond to the zero eigenvalues). This construction yields:</p> \[M = \sum_{i=1}^r \sigma_i u_i v_i^T,\] <p>which is the SVD.</p> <p>In summary, \(U\)’s columns are eigenvectors of \(M M^T\), \(V\)’s columns are eigenvectors of \(M^T M\), and \(\Sigma\)’s diagonal entries are the square roots of those eigenvalues.</p> <p>Another intuition: think of \(M\) as transforming an n-dimensional vector (input) into an m-dimensional vector (output). The SVD tells us there is an orthonormal basis of input vectors \(v_i\) and an orthonormal basis of output vectors \(u_i\) such that:</p> \[M v_i = \sigma_i u_i\] <p>For those familiar with eigenvectors, this looks almost like an eigen equation, except \(v_i\) and \(u_i\) live in different spaces if \(m \ne n\). But:</p> \[M^T M v_i = \sigma_i^2 v_i\] <p>does hold (so \(v_i\) is an eigenvector of \(M^T M\) with eigenvalue \(\sigma_i^2\)). So SVD is an extension of eigen-decomposition to rectangular matrices.</p> <h3 id="geometric-interpretation">Geometric interpretation</h3> <p>As mentioned, any linear map can be seen as a rotation/reflection (by \(V^T\)), then axis-aligned stretching (by \(\Sigma\)), then another rotation/reflection (by \(U\)). If you imagine a unit sphere in \(\mathbb{R}^n\), applying \(M\) to it produces an m-dimensional ellipsoid. The principal semi-axes of that ellipsoid are \(u_1, u_2, \dots\) (the left singular vectors), and their lengths are the singular values \(\sigma_1, \sigma_2, \dots\). They tell us the directions in the input space that get mapped to those principal axes in the output. So singular values are basically the “strengths” of \(M\) along those special input/output directions.</p> <hr/> <h2 id="svd-in-practice-low-rank-approximations-and-computation">SVD in Practice: Low-Rank Approximations and Computation</h2> <p>One of the most useful aspects of SVD is that it gives the best low-rank approximations of a matrix. If we have:</p> \[M = U \Sigma V^T = \sum_{i=1}^r \sigma_i (u_i v_i^T)\] <p>(where \(r = \text{rank of } M\)), we can approximate \(M\) by truncating this sum to \(k &lt; r\) terms:</p> \[M_k = \sum_{i=1}^k \sigma_i\, u_i\, v_i^T\] <p>This \(M_k\) is a rank-\(k\) matrix (only \(k\) singular values/vectors used). It turns out \(M_k\) is the best approximation of \(M\) among all rank-\(k\) matrices in terms of least-squares error (minimum Frobenius norm error) – this is known as the <strong>Eckart–Young theorem</strong>.</p> <p>The intuition is that since the singular values are in descending order, we are keeping the largest “components” of \(M\) and discarding the rest. If singular values drop off quickly, then \(M\) is well-approximated by a much smaller rank matrix.</p> <hr/> <p>For example, if you have a big matrix of data but most of its structure lies in a few dimensions (e.g., a topic-document matrix where only a few underlying topics span the data), the top singular vectors capture those and the rest may be noise. In PCA terms, using SVD on the data matrix directly can give similar results to PCA on the covariance.</p> <p>Computing SVD: In code, computing SVD is easy with libraries. For instance, using NumPy:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">rand</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>  <span class="c1"># a 6x4 matrix
</span><span class="n">U</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">Vt</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">linalg</span><span class="p">.</span><span class="nf">svd</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">full_matrices</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</code></pre></div></div> <p>This returns \(U\) (6×4 in this case, since <code class="language-plaintext highlighter-rouge">full_matrices=False</code> gives the reduced form), the singular values in array \(s\) (length 4), and \(V^T\) (4×4). We can reconstruct \(A\) via:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">U</span> <span class="o">@</span> <span class="n">np</span><span class="p">.</span><span class="nf">diag</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">@</span> <span class="n">Vt</span>
</code></pre></div></div> <p>and it will match the original (within numerical precision). If we only want the top \(k\) singular values, we could take <code class="language-plaintext highlighter-rouge">U[:,:k]</code>, <code class="language-plaintext highlighter-rouge">s[:k]</code>, <code class="language-plaintext highlighter-rouge">Vt[:k,:]</code> to build the rank-\(k\) approximation.</p> <p>For very large matrices, one can use iterative methods or truncated SVD algorithms (like <code class="language-plaintext highlighter-rouge">scipy.sparse.linalg.svds</code> or scikit-learn’s <code class="language-plaintext highlighter-rouge">TruncatedSVD</code> which is useful for sparse matrices). In fact, PCA is often computed via SVD on the centered data matrix rather than eigen-decomposition of the covariance, because it’s more efficient when the number of features is large. Scikit-learn’s PCA, for example, uses an SVD under the hood. This is related to the fact that:</p> \[X^T X v = \lambda v\] <p>is equivalent to the SVD of \(X\).</p> <hr/> <h2 id="lets-illustrate-svd-with-a-concrete-example-image-compression">Let’s illustrate SVD with a concrete example: image compression</h2> <p>We take a grayscale image (which is basically a matrix of pixel intensities) and apply SVD to it. By keeping only a few singular values, we can reconstruct an approximation of the image.</p> <p>Consider the example image below. The first panel is the original image (512×512 pixels). The next panels show reconstructions using only the top 5 singular values, top 20, and top 50 (out of 512 total).</p> <p>As we increase the number of singular values in the reconstruction, the image quality improves. With 50 singular values (~10% of the possible components for this 512×512 image), the image is already largely recognizable.</p> <p>In code, the compression might look like this:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">from</span> <span class="n">skimage</span> <span class="kn">import</span> <span class="n">data</span>

<span class="c1"># Load example image as a matrix
</span><span class="n">img</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">camera</span><span class="p">().</span><span class="nf">astype</span><span class="p">(</span><span class="nb">float</span><span class="p">)</span>  <span class="c1"># cameraman test image, shape (512,512)
</span>
<span class="c1"># Compute SVD
</span><span class="n">U</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">Vt</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">linalg</span><span class="p">.</span><span class="nf">svd</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">full_matrices</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

<span class="c1"># Choose k
</span><span class="n">k</span> <span class="o">=</span> <span class="mi">50</span>
<span class="n">img_approx</span> <span class="o">=</span> <span class="n">U</span><span class="p">[:,:</span><span class="n">k</span><span class="p">]</span> <span class="o">@</span> <span class="n">np</span><span class="p">.</span><span class="nf">diag</span><span class="p">(</span><span class="n">s</span><span class="p">[:</span><span class="n">k</span><span class="p">])</span> <span class="o">@</span> <span class="n">Vt</span><span class="p">[:</span><span class="n">k</span><span class="p">,:]</span>

<span class="n">plt</span><span class="p">.</span><span class="nf">imshow</span><span class="p">(</span><span class="n">img_approx</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="sh">'</span><span class="s">gray</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div> <p>One can experiment with different \(k\). What SVD is doing here is essentially finding an optimal basis for the image’s pixel space such that you can truncate it.</p> <hr/> <p>The power of SVD goes beyond images</p> <ul> <li> <p><strong>Natural language processing</strong>: the technique called <strong>Latent Semantic Analysis (LSA)</strong> uses SVD on a term-document matrix to uncover “topics” (the singular vectors) and reduce noise in text data.</p> </li> <li> <p><strong>Recommender systems</strong>: SVD (or similar matrix factorization methods) is used to decompose the user-item ratings matrix into a product of lower-dimensional matrices.</p> </li> <li> <p><strong>Solving least squares problems</strong>: SVD provides a robust method to compute the pseudoinverse and solve \(Ax \approx b\) even if \(A\) is singular or ill-conditioned.</p> </li> </ul> <p>To connect SVD back to eigen-decomposition vs PCA: PCA can be obtained from SVD of the data matrix. If \(X\) is \(m \times n\) (m samples, n features), doing SVD:</p> \[X = U \Sigma V^T\] <p>Here \(U\) is \(m \times m\), \(V\) is \(n \times n\). The columns of \(V\) (right singular vectors) are the eigenvectors of \(X^T X\) (the covariance matrix up to scaling), and the singular values relate to eigenvalues:</p> \[\sigma_i^2 = \lambda_i (m-1)\] <p>if using sample covariance. In fact, the <strong>principal components</strong> = columns of \(V\), and \(X V = U \Sigma\) gives the principal component scores (projections) scaled by singular values.</p> <p>Scikit-learn’s PCA uses an SVD internally for efficiency. The difference is mostly in whether you subtract the mean and whether you divide by \(\sqrt{m-1}\) in the singular values.</p> <hr/> <h2 id="applications-of-svd-in-ml">Applications of SVD in ML</h2> <p>We’ve already touched on a few:</p> <h3 id="dimensionality-reduction">Dimensionality Reduction</h3> <p>SVD is at the heart of PCA (as explained) and more generally is used to reduce dimensionality of very large, sparse datasets (e.g., text). Sklearn’s TruncatedSVD is often used as a PCA alternative for sparse data (it doesn’t center the data, which can be fine for text frequency data). The advantage of SVD is it can work directly on the data without needing to form a covariance matrix, which is memory-intensive for large feature sets. For example, with a term-document matrix of size 100k documents, you wouldn’t explicitly form a \(100k \times 100k\) covariance; you’d do truncated SVD to get, say, 100 topics.</p> <h3 id="latent-semantic-analysis-lsa-in-nlp">Latent Semantic Analysis (LSA) in NLP</h3> <p>As mentioned, by doing SVD on a term-document matrix (rows = documents, columns = terms, values = say TF-IDF scores), you get: \(U\) = document vectors in topic-space, \(V\) = term vectors in topic-space, \(\Sigma\) = strengths of each “topic”. This uncovers latent concepts. After truncating, each document or term is represented in a reduced-dimensional semantic space. Queries and docs can be compared in this space to improve search (even if exact words don’t match, related concepts can be matched via the latent factors).</p> <h3 id="recommendation-systems-collaborative-filtering">Recommendation Systems (Collaborative Filtering)</h3> <p>If you have a user-item rating matrix, SVD gives you matrices that represent users in a latent factor space and items in the same space. A rating is approximated by the dot product of user and item factor vectors. This reveals, for example, that a movie’s factor vector might encode how much it is comedy vs drama vs action, and a user’s factor vector encodes their preference for those genres. In practice, direct SVD on a sparse rating matrix may require filling missing entries, so often specialized alternating least squares are used, but conceptually it’s similar. The Netflix Prize solution was an ensemble of such factorization models.</p> <h3 id="image-processing">Image Processing</h3> <p>Beyond compression, SVD (and PCA, which for images are sometimes called “eigenfaces” in face recognition) can decompose image datasets. For denoising images, one can keep only the largest singular values which tend to capture the main structures and discard smaller ones that often represent noise. SVD is also used in algorithms like image alignment and structure-from-motion in computer vision because it can find optimal linear alignments.</p> <h3 id="matrix-solvers-and-model-compression">Matrix Solvers and Model Compression</h3> <p>SVD is used to compute the Moore-Penrose pseudoinverse for solving linear systems. If a model has a large weight matrix (for instance, a fully connected layer in a neural network), one can compress it by approximating that weight matrix with a low-rank decomposition using SVD. Essentially, you replace a big weight matrix by two thinner matrices (which correspond to keeping only top singular vectors), which reduces the number of parameters and can speed up inference. In deep learning, after training a model, one can do SVD on weight layers to see if they have low effective rank and truncate them (with some fine-tuning to recover accuracy). SVD has also been used inside training algorithms for RNNs to enforce a well-conditioned weight matrix.</p> <hr/> <h2 id="comparison-between-pca-and-svd">Comparison Between PCA and SVD</h2> <p>It’s worth clarifying the relationship and differences between PCA and SVD, as they often get mentioned together:</p> <h3 id="relationship">Relationship</h3> <p>PCA is essentially a specific application of SVD. If you take your data matrix \(X\) (with zero-mean for each feature) and perform SVD \(X = U \Sigma V^T\), the right singular vectors \(V\) are the principal component directions, and the singular values \(\sigma_i\) are related to the standard deviation of data along those components. In fact,</p> \[\lambda_i = \frac{\sigma_i^2}{m-1}\] <p>would be the eigenvalues of the covariance. Thus, PCA results can be obtained by SVD. Conversely, if you have the covariance matrix</p> \[S = V \Lambda V^T\] <p>and do eigen-decomposition, you could reconstruct an SVD of \(X\) by setting</p> \[U = X V \Lambda^{-1/2}\] <p>(for nonzero eigenvalues). So mathematically, PCA and SVD are tightly linked—PCA often just means applying SVD to a mean-centered data matrix and interpreting the results in terms of variance.</p> <h3 id="differences-in-focus">Differences in Focus</h3> <p>PCA is defined as a statistical procedure: it focuses on the covariance structure of data and identifies directions of maximal variance (making the data in the new coordinates uncorrelated). SVD is purely a matrix factorization that doesn’t inherently carry a statistical interpretation unless you connect it to something like \(X^T X\).</p> <p>SVD can be applied to matrices that are not covariance matrices (e.g., the term-document matrix, or a rectangular transformation matrix). So one difference: PCA typically involves first normalizing or standardizing data (and always centering), and it implicitly assumes we care about variance. SVD will happily factorize any matrix as is. For PCA, you must decide how to handle scaling of features (since covariance is sensitive to scale); SVD doesn’t care about that but if you gave it an unnormalized data matrix, the singular vectors would be dominated by whatever features have larger numeric scales.</p> <p>In practice, one usually scales features for PCA (e.g., using correlation matrix instead of covariance if units differ).</p> <h3 id="computational-differences">Computational Differences</h3> <p>PCA (eigen-decomposition) computes eigenvectors of an \(n \times n\) covariance matrix (if \(n\) = number of features). This can be expensive when \(n\) is large (e.g., \(n = 10000\) would mean a \(10000 \times 10000\) matrix to diagonalize). SVD can work directly on the \(m \times n\) data matrix, which might be more feasible if \(n\) is large but \(m\) is smaller, or if the matrix is sparse.</p> <p>For example, if you have \(10^6\) samples and \(10^5\) features (very tall matrix), eigen-decomposition of the covariance (\(10^5 \times 10^5\)) is huge, but SVD on \(10^6 \times 10^5\) might be manageable with iterative methods.</p> <p>Similarly, SVD can handle missing data by algorithms that operate only on observed entries, whereas PCA (covariance computation) can’t directly handle missing values.</p> <h3 id="use-cases">Use-Cases</h3> <p>PCA is typically used for exploratory data analysis, feature reduction, visualization, and sometimes preprocessing to decorrelate features. SVD has broader applications: beyond data variance, it’s used in matrix completion, inverse problems, etc.</p> <p>For example, if you have a linear system \(Ax = b\), SVD helps solve it (via pseudoinverse) especially if \(A\) is not full rank. PCA wouldn’t be referenced in that context.</p> <p>So PCA is a subset of what SVD can do, focusing on variance in a dataset.</p> <h3 id="output-interpretation">Output Interpretation</h3> <p>In PCA, we talk about “principal components”, “explained variance”, and we often care about how many components to choose, interpret the components, etc. In SVD of an arbitrary matrix, we talk about “singular vectors” and “singular values”, and their magnitudes, but not usually “variance explained” unless it’s specifically data matrix.</p> <p>In PCA we often drop components with small eigenvalues because they are mostly noise. In SVD, dropping small singular values gives a low-rank approximation which might be for noise reduction or compression. These are analogous ideas (and indeed the same operation), but PCA frames it as data compression, SVD frames it as matrix compression.</p> <hr/> <h3 id="summary-when-to-use-pca-vs-svd">Summary: When to Use PCA vs SVD</h3> <ul> <li>They will give the same result if applied consistently (PCA on covariance vs SVD on centered data).</li> <li>If your data is very high-dimensional (many features), use SVD to compute PCA.</li> <li>If your data matrix is sparse (like text data or recommender systems), use truncated SVD directly.</li> <li>If the goal is interpretability in terms of original features and variance, PCA terminology is used.</li> <li>If the goal is matrix factorization or solving a linear algebra problem, SVD terminology is used.</li> <li>PCA uses SVD under the hood.</li> </ul> <p>As a fun fact, if you perform PCA on un-centered data (i.e., don’t subtract mean), that’s equivalent to doing an SVD on the raw data matrix (with an extra singular vector corresponding to the mean direction usually appearing). Generally, we center data for PCA.</p> <hr/> <p>Not to brag, but we just wrangled some serious math today. We went from stretching vectors to compressing images — not bad for one post!</p> <p>We started by understanding what makes eigenvectors special: they’re the directions that remain unchanged (except for scaling) under a transformation. We saw how eigenvalues and eigenvectors reveal the internal structure of matrices and how they’re deeply tied to variance, stability, and interpretability in machine learning.</p> <p>We then looked at eigen-decomposition and diagonalization, and how these concepts simplify complex operations, especially when dealing with symmetric matrices like covariance matrices. This naturally led us to Principal Component Analysis (PCA), where eigenvectors define the principal directions of variance, and eigenvalues tell us how important each direction is.</p> <p>Then came Singular Value Decomposition (SVD) — a more general, powerful factorization that works for any matrix, not just square or symmetric ones. We explored how SVD connects back to eigenvalues, how it gives us the best low-rank approximation of data, and how it’s used in practice for tasks like image compression, noise reduction, LSA in NLP, recommender systems, and model compression.</p> <p>We also clarified how PCA and SVD are related: PCA can be computed via SVD, but SVD has broader applications beyond just analyzing variance.</p> <p>In the end, these tools — eigenvalues, eigenvectors, PCA, and SVD — give us more than math. They give us a way to see the essence of data, simplify it, compress it, and make it more interpretable. And in a field as noisy and high-dimensional as machine learning, that’s incredibly powerful.</p>]]></content><author><name></name></author><category term="machine-learning"/><category term="math"/><category term="math-for-ml"/><category term="ml"/><category term="ai"/><category term="linear-algebra"/><category term="math"/><summary type="html"><![CDATA[Linear Algebra 4 - Mathematics for Machine Learning]]></summary></entry><entry><title type="html">Linear Algebra Basics for ML - Systems of Linear Equations</title><link href="https://joyoshish.github.io/blog/2022/mathforml-linalg3/" rel="alternate" type="text/html" title="Linear Algebra Basics for ML - Systems of Linear Equations"/><published>2022-01-20T00:00:00+00:00</published><updated>2022-01-20T00:00:00+00:00</updated><id>https://joyoshish.github.io/blog/2022/mathforml-linalg3</id><content type="html" xml:base="https://joyoshish.github.io/blog/2022/mathforml-linalg3/"><![CDATA[<hr/> <p>Many machine learning tasks boil down to optimizing model parameters that best fit the observed data. For instance, finding the best-fit line in linear regression is equivalent to solving a system of linear equations. In this post, we’ll dive into the mathematics behind solving these systems using multiple methods. We’ll explore row reduction, Gaussian elimination, and Cramer’s Rule—each backed by real-world ML context, intuitive math, and working code.</p> <hr/> <h2 id="systems-of-linear-equations-in-machine-learning">Systems of Linear Equations in Machine Learning</h2> <p>In many machine learning problems—such as multiple linear regression, parameter estimation in models, and even network analysis—we often need to solve systems of equations that look like:</p> \[A \mathbf{x} = \mathbf{b}\] <p>where \(A\) is an \(m \times n\) matrix of coefficients, \(\mathbf{x}\) is the vector of unknowns (model parameters), and \(\mathbf{b}\) is the result or outcome vector. The goal is to determine the values of \(\mathbf{x}\) that satisfy this equation—an essential step in fitting many models.</p> <hr/> <h2 id="solving-systems-using-row-reduction">Solving Systems Using Row Reduction</h2> <p>Let’s start with something familiar: multiple linear regression. When you derive the solution analytically, you arrive at the normal equations:</p> \[X^T X \mathbf{\beta} = X^T \mathbf{y}\] <p>Here, \(X\) is the feature matrix, \(\mathbf{y}\) is the target vector, and \(\mathbf{\beta}\) is the vector of regression coefficients you’re trying to find. This is a classic system of linear equations that we can solve using <strong>row reduction</strong>.</p> <p>To do that, we first write the augmented matrix \([ A \mid b ]\). Take, for example, the system:</p> \[\begin{aligned} 2x + y &amp;= 8 \\ x + 3y &amp;= 13 \end{aligned}\] <p>which becomes:</p> \[\left[\begin{array}{cc|c} 2 &amp; 1 &amp; 8 \\ 1 &amp; 3 &amp; 13 \\ \end{array}\right]\] <p>Using elementary row operations—swapping rows, scaling rows, and adding multiples of rows to one another—we aim to convert this matrix into an upper triangular or reduced row-echelon form. Once it’s simplified, back substitution helps us solve for each variable one by one.</p> <p>Here’s a Python implementation of row reduction in action:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="k">def</span> <span class="nf">row_reduce</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
    <span class="n">Ab</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">hstack</span><span class="p">((</span><span class="n">A</span><span class="p">.</span><span class="nf">astype</span><span class="p">(</span><span class="nb">float</span><span class="p">),</span> <span class="n">b</span><span class="p">.</span><span class="nf">reshape</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">).</span><span class="nf">astype</span><span class="p">(</span><span class="nb">float</span><span class="p">)))</span>
    <span class="n">n</span> <span class="o">=</span> <span class="n">Ab</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
        <span class="n">max_row</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">argmax</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">abs</span><span class="p">(</span><span class="n">Ab</span><span class="p">[</span><span class="n">i</span><span class="p">:,</span> <span class="n">i</span><span class="p">]))</span> <span class="o">+</span> <span class="n">i</span>
        <span class="n">Ab</span><span class="p">[[</span><span class="n">i</span><span class="p">,</span> <span class="n">max_row</span><span class="p">]]</span> <span class="o">=</span> <span class="n">Ab</span><span class="p">[[</span><span class="n">max_row</span><span class="p">,</span> <span class="n">i</span><span class="p">]]</span>
        <span class="n">Ab</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">Ab</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">/</span> <span class="n">Ab</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">i</span><span class="p">]</span>
        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
            <span class="n">Ab</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">Ab</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">-</span> <span class="n">Ab</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="n">Ab</span><span class="p">[</span><span class="n">j</span><span class="p">,</span> <span class="n">i</span><span class="p">]</span>
    <span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">zeros</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">Ab</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">np</span><span class="p">.</span><span class="nf">dot</span><span class="p">(</span><span class="n">Ab</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">:</span><span class="n">n</span><span class="p">],</span> <span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">:</span><span class="n">n</span><span class="p">])</span>
    <span class="k">return</span> <span class="n">x</span>

<span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span>
              <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">]])</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mi">8</span><span class="p">,</span> <span class="mi">13</span><span class="p">])</span>
<span class="n">beta</span> <span class="o">=</span> <span class="nf">row_reduce</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Solution using row reduction:</span><span class="sh">"</span><span class="p">,</span> <span class="n">beta</span><span class="p">)</span>
</code></pre></div></div> <p>In machine learning, row reduction isn’t just a math exercise—it tells us something about our data. For instance, if a solution doesn’t exist or isn’t unique, it may be due to multicollinearity in the dataset. And while libraries use faster numerical methods, the logic here underpins those solvers.</p> <p>Whether you’re solving regression models, performing parameter estimation, or diagnosing issues in data, understanding row reduction equips you with both intuition and control over the structure of your solution.</p> <hr/> <h2 id="gaussian-elimination-for-larger-systems">Gaussian Elimination for Larger Systems</h2> <p>For larger systems, manually applying row operations isn’t practical. This is where Gaussian elimination shines—a structured algorithm that eliminates variables step-by-step, reducing your system to a manageable triangular form.</p> <p>At its core, Gaussian elimination performs forward elimination to zero out entries below the diagonal, followed by back substitution to solve for each variable from bottom to top.</p> <p>The method also relies on <strong>partial pivoting</strong>—swapping rows to ensure numerical stability, especially important when working with floating-point data in real-world ML scenarios.</p> <p>Here’s how you might code it:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="k">def</span> <span class="nf">gaussian_elimination</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
    <span class="n">n</span> <span class="o">=</span> <span class="n">A</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="n">Ab</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">hstack</span><span class="p">((</span><span class="n">A</span><span class="p">.</span><span class="nf">astype</span><span class="p">(</span><span class="nb">float</span><span class="p">),</span> <span class="n">b</span><span class="p">.</span><span class="nf">reshape</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">).</span><span class="nf">astype</span><span class="p">(</span><span class="nb">float</span><span class="p">)))</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
        <span class="n">max_row</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">argmax</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">abs</span><span class="p">(</span><span class="n">Ab</span><span class="p">[</span><span class="n">i</span><span class="p">:,</span> <span class="n">i</span><span class="p">]))</span> <span class="o">+</span> <span class="n">i</span>
        <span class="n">Ab</span><span class="p">[[</span><span class="n">i</span><span class="p">,</span> <span class="n">max_row</span><span class="p">]]</span> <span class="o">=</span> <span class="n">Ab</span><span class="p">[[</span><span class="n">max_row</span><span class="p">,</span> <span class="n">i</span><span class="p">]]</span>
        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
            <span class="n">factor</span> <span class="o">=</span> <span class="n">Ab</span><span class="p">[</span><span class="n">j</span><span class="p">,</span> <span class="n">i</span><span class="p">]</span> <span class="o">/</span> <span class="n">Ab</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">i</span><span class="p">]</span>
            <span class="n">Ab</span><span class="p">[</span><span class="n">j</span><span class="p">,</span> <span class="n">i</span><span class="p">:]</span> <span class="o">-=</span> <span class="n">factor</span> <span class="o">*</span> <span class="n">Ab</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">i</span><span class="p">:]</span>
    <span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">zeros</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">Ab</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">np</span><span class="p">.</span><span class="nf">dot</span><span class="p">(</span><span class="n">Ab</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">:],</span> <span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">:]))</span> <span class="o">/</span> <span class="n">Ab</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">i</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">x</span>

<span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">4</span><span class="p">],</span>
              <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
              <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="o">-</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">]])</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mi">3</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">14</span><span class="p">])</span>
<span class="n">solution</span> <span class="o">=</span> <span class="nf">gaussian_elimination</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Solution using Gaussian elimination:</span><span class="sh">"</span><span class="p">,</span> <span class="n">solution</span><span class="p">)</span>
</code></pre></div></div> <p>In machine learning, this method is commonly used when solving normal equations in regression. It’s also part of the foundation behind algorithms like LU decomposition and QR factorization. Gaussian elimination is particularly useful in data fitting, interpolation, and models that involve large-scale linear systems. While it may not always be used directly, it’s hiding beneath many optimization libraries used in practice.</p> <hr/> <h2 id="cramers-rule-a-theoretical-lens">Cramer’s Rule: A Theoretical Lens</h2> <p>For smaller systems—or when you’re looking for a more theoretical perspective—Cramer’s Rule offers an elegant way to find each variable explicitly using determinants.</p> <p>Given a system \(A\mathbf{x} = \mathbf{b}\), Cramer’s Rule gives each solution as:</p> \[x_i = \frac{\det(A_i)}{\det(A)}\] <p>where \(A_i\) is the matrix formed by replacing the \(i\)-th column of \(A\) with the vector \(\mathbf{b}\).</p> <p>While this approach is computationally expensive for large systems (since it requires calculating multiple determinants), it’s incredibly valuable for understanding how solutions relate to the structure of the system. For instance, a zero determinant tells you that the system doesn’t have a unique solution—critical for understanding singularities and data redundancy.</p> <p>Here’s an implementation in Python:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="k">def</span> <span class="nf">cramer_rule</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
    <span class="n">det_A</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">linalg</span><span class="p">.</span><span class="nf">det</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">np</span><span class="p">.</span><span class="nf">isclose</span><span class="p">(</span><span class="n">det_A</span><span class="p">,</span> <span class="mi">0</span><span class="p">):</span>
        <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sh">"</span><span class="s">The system has no unique solution (determinant is zero).</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">n</span> <span class="o">=</span> <span class="n">A</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">zeros</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
        <span class="n">A_i</span> <span class="o">=</span> <span class="n">A</span><span class="p">.</span><span class="nf">copy</span><span class="p">()</span>
        <span class="n">A_i</span><span class="p">[:,</span> <span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">b</span>
        <span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">linalg</span><span class="p">.</span><span class="nf">det</span><span class="p">(</span><span class="n">A_i</span><span class="p">)</span> <span class="o">/</span> <span class="n">det_A</span>
    <span class="k">return</span> <span class="n">x</span>

<span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([[</span><span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
              <span class="p">[</span><span class="mi">1</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span>
              <span class="p">[</span><span class="mi">4</span><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span> <span class="mi">8</span><span class="p">]])</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">12</span><span class="p">])</span>
<span class="n">solution_cramer</span> <span class="o">=</span> <span class="nf">cramer_rule</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Solution using Cramer</span><span class="sh">'</span><span class="s">s Rule:</span><span class="sh">"</span><span class="p">,</span> <span class="n">solution_cramer</span><span class="p">)</span>
</code></pre></div></div> <p>Though not practical for large ML pipelines, Cramer’s Rule is ideal for educational and theoretical purposes. It’s often used to validate the structure of small systems and to perform <strong>sensitivity analysis</strong>—seeing how small changes in input affect the output. It’s especially insightful when exploring linear dependencies between variables in regression or in understanding how features influence predictions at a theoretical level.</p> <hr/> <h2 id="conclusion">Conclusion</h2> <p>Solving systems of linear equations isn’t just a math skill—it’s a fundamental tool in the machine learning toolbox. Whether you’re fitting a linear regression model or designing a network analysis algorithm, these techniques will inevitably come into play.</p> <p>Row reduction gives you a practical handle on small systems and helps interpret model behavior. Gaussian elimination scales that power for larger systems and forms the foundation of more advanced solvers. And Cramer’s Rule offers theoretical clarity on how and why solutions behave the way they do.</p> <p>Mastering these approaches deepens your understanding of both data and models—ensuring you’re not just using ML tools, but also understanding what’s happening behind the scenes.</p>]]></content><author><name></name></author><category term="machine-learning"/><category term="math"/><category term="math-for-ml"/><category term="ml"/><category term="ai"/><category term="linear-algebra"/><category term="math"/><summary type="html"><![CDATA[Linear Algebra 3 - Mathematics for Machine Learning]]></summary></entry><entry><title type="html">Linear Algebra Basics for ML - Matrices and Matrix Operations</title><link href="https://joyoshish.github.io/blog/2022/mathforml-linalg2/" rel="alternate" type="text/html" title="Linear Algebra Basics for ML - Matrices and Matrix Operations"/><published>2022-01-15T00:00:00+00:00</published><updated>2022-01-15T00:00:00+00:00</updated><id>https://joyoshish.github.io/blog/2022/mathforml-linalg2</id><content type="html" xml:base="https://joyoshish.github.io/blog/2022/mathforml-linalg2/"><![CDATA[<p>In machine learning, the power of matrices is undeniable. Whether you’re manipulating datasets, performing linear transformations in neural networks, or analyzing graph structures, matrices provide a compact and efficient way to represent and process information. In this post, we’ll explore the world of matrices and matrix operations through a problem-driven approach. Each section grounds the math in real ML use cases, walks through the concepts clearly, and wraps up with code and applications.</p> <hr/> <h2 id="matrices-and-matrix-operations">Matrices and Matrix Operations</h2> <p>Think of a matrix as a grid—a two-dimensional array of numbers. On the surface, it may just look like a neat way to organize data, but in machine learning, it does so much more. Matrices are the building blocks for operations like transforming input features, propagating signals through neural networks, and encoding relationships in graph data. Their elegance lies in how they capture complex transformations so succinctly.</p> <hr/> <h2 id="matrix-addition-and-multiplication">Matrix Addition and Multiplication</h2> <p>Suppose you have two datasets or feature maps, and you want to combine them before feeding them into a model. Or maybe you need to apply a set of learned weights to an input layer in a neural network. These scenarios boil down to two essential operations: matrix addition and multiplication.</p> <p>Matrix addition is pretty straightforward. If two matrices \(A\) and \(B\) have the same dimensions \(m \times n\), you simply add corresponding elements:</p> \[(A + B)_{ij} = A_{ij} + B_{ij}\] <p>Matrix multiplication is a little more involved—and powerful. Given a matrix \(A\) of size \(m \times n\) and a matrix \(B\) of size \(n \times p\), the resulting matrix \(C = AB\) will be of size \(m \times p\), where each element is calculated as:</p> \[C_{ij} = \sum_{k=1}^{n} A_{ik} B_{kj}\] <p>This operation is crucial in machine learning because it represents linear combinations of inputs, weighted by learned parameters.</p> <p>Let’s look at how these operations play out in code:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]])</span>
<span class="n">B</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span> <span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">]])</span>

<span class="c1"># Matrix addition
</span><span class="n">sum_matrix</span> <span class="o">=</span> <span class="n">A</span> <span class="o">+</span> <span class="n">B</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Matrix Sum:</span><span class="se">\n</span><span class="sh">"</span><span class="p">,</span> <span class="n">sum_matrix</span><span class="p">)</span>

<span class="c1"># Matrix multiplication
</span><span class="n">product_matrix</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">dot</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Matrix Product:</span><span class="se">\n</span><span class="sh">"</span><span class="p">,</span> <span class="n">product_matrix</span><span class="p">)</span>
</code></pre></div></div> <p>Matrix addition and multiplication are two of the most widely used operations in machine learning. Matrix addition allows us to combine information from multiple sources—whether that’s merging datasets, summing feature maps, or applying a bias term in a model. It’s a simple operation, but it appears throughout every stage of a data pipeline, especially when dealing with mini-batches of data or ensemble-style models.</p> <p>Matrix multiplication, on the other hand, is fundamental to how machine learning models process and learn from data. In neural networks, the input at each layer is multiplied by a weight matrix to transform it into a new representation. This transformation captures patterns and relationships between features, allowing deeper layers to learn more abstract concepts. The same operation is used to combine embeddings, transform spatial information in computer vision, and project data into new feature spaces.</p> <p>Outside of neural networks, matrix multiplication also shows up in dimensionality reduction techniques like PCA, where data is multiplied by a matrix of principal components to produce a compressed version of the original dataset. In graph-based learning, adjacency matrices are multiplied with feature matrices to enable message passing across nodes—allowing information to flow and be aggregated from neighboring nodes in graph neural networks.</p> <hr/> <h2 id="transpose-inverse-determinant-trace-and-rank">Transpose, Inverse, Determinant, Trace, and Rank</h2> <p>Sometimes, understanding the structure of your data or solving an equation requires going deeper into what a matrix really <em>does</em>. Is it reversible? How much does it scale the space? How complex is it?</p> <p>The transpose of a matrix \(A\), written as \(A^T\), simply flips its rows and columns:</p> \[(A^T)_{ij} = A_{ji}\] <p>The inverse of a square matrix \(A\), when it exists, satisfies:</p> \[AA^{-1} = A^{-1}A = I\] <p>where \(I\) is the identity matrix.</p> <p>The determinant, \(\det(A)\), gives a scalar that represents how much the transformation defined by \(A\) scales space. If the determinant is zero, the matrix isn’t invertible.</p> <p>The trace of a matrix is the sum of its diagonal entries:</p> \[\text{tr}(A) = \sum_{i=1}^{n} A_{ii}\] <p>And the rank tells you how many dimensions your matrix truly spans—how many linearly independent rows or columns it contains.</p> <p>All of these properties surface in ML. You might invert a matrix to solve a linear system in regression. The determinant and rank tell you if your data is redundant. The trace often appears in loss functions or regularization terms.</p> <p>Here’s how to compute them:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">],</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">6</span><span class="p">]])</span>

<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Transpose:</span><span class="se">\n</span><span class="sh">"</span><span class="p">,</span> <span class="n">A</span><span class="p">.</span><span class="n">T</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Determinant:</span><span class="sh">"</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">linalg</span><span class="p">.</span><span class="nf">det</span><span class="p">(</span><span class="n">A</span><span class="p">))</span>

<span class="k">if</span> <span class="n">np</span><span class="p">.</span><span class="n">linalg</span><span class="p">.</span><span class="nf">det</span><span class="p">(</span><span class="n">A</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Inverse:</span><span class="se">\n</span><span class="sh">"</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">linalg</span><span class="p">.</span><span class="nf">inv</span><span class="p">(</span><span class="n">A</span><span class="p">))</span>

<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Trace:</span><span class="sh">"</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="nf">trace</span><span class="p">(</span><span class="n">A</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Rank:</span><span class="sh">"</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">linalg</span><span class="p">.</span><span class="nf">matrix_rank</span><span class="p">(</span><span class="n">A</span><span class="p">))</span>
</code></pre></div></div> <p>These matrix operations go beyond basic arithmetic and into the territory of <em>understanding the structure of data and transformations</em>. The transpose operation, for example, is used when calculating gradients and aligning matrix dimensions during dot products—especially important in backpropagation in deep learning.</p> <p>The <strong>inverse of a matrix</strong> is essential in solving linear systems analytically. While in practice we often use approximations or decompositions, the concept of matrix inversion is still central to understanding <strong>linear regression</strong>, where the solution for the optimal weights can be written as: \(\mathbf{w} = (X^T X)^{-1} X^T y\) This closed-form solution shows how matrix operations solve real ML problems when the dataset is small and the solution is tractable.</p> <p>The <strong>determinant</strong> tells us whether a transformation preserves volume or collapses space—if it’s zero, the transformation is not invertible. This matters in unsupervised learning, such as <strong>normalizing flows</strong>, where transformations must be invertible and differentiable. Similarly, the <strong>trace</strong> of a matrix shows up in optimization problems as a regularization penalty—for example, in <strong>matrix factorization</strong> or <strong>low-rank approximations</strong>, where trace minimization helps control complexity.</p> <p>Finally, <strong>matrix rank</strong> is crucial for understanding the expressive power of your dataset. If a feature matrix is rank-deficient, it means some features are linear combinations of others—signaling <strong>multicollinearity</strong>, which can break regression models or inflate variance in predictions. Knowing the rank helps us detect redundancy, reduce overfitting, and improve generalization.</p> <hr/> <h2 id="special-matrices-in-machine-learning">Special Matrices in Machine Learning</h2> <p>Some matrices have properties that make them especially elegant—and efficient—in machine learning workflows.</p> <p>The <strong>identity matrix</strong> \(I\) acts as a neutral element in multiplication:</p> \[AI = IA = A\] <p><strong>Diagonal matrices</strong> are square matrices with nonzero entries only on the diagonal. They scale vectors component-wise, simplifying many operations.</p> <p><strong>Symmetric matrices</strong> satisfy \(A = A^T\). Covariance matrices, for example, are symmetric and reveal how variables vary together.</p> <p><strong>Orthogonal matrices</strong> satisfy:</p> \[Q^T Q = QQ^T = I\] <p>They preserve angles and lengths, which is why they’re used in rotations, reflections, and orthonormal bases.</p> <p>A <strong>positive definite matrix</strong> is symmetric and satisfies:</p> \[x^T A x &gt; 0\] <p>for any nonzero vector \(x\). These appear in optimization problems, where you want to ensure a unique minimum, and in models like ridge regression.</p> <p>Let’s create and check these properties:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">I</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">eye</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Identity Matrix:</span><span class="se">\n</span><span class="sh">"</span><span class="p">,</span> <span class="n">I</span><span class="p">)</span>

<span class="n">D</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">diag</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Diagonal Matrix:</span><span class="se">\n</span><span class="sh">"</span><span class="p">,</span> <span class="n">D</span><span class="p">)</span>

<span class="n">S</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([[</span><span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]])</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Symmetric Matrix:</span><span class="se">\n</span><span class="sh">"</span><span class="p">,</span> <span class="n">S</span><span class="p">)</span>

<span class="n">Q</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">]])</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Orthogonal Check (Q^T Q):</span><span class="se">\n</span><span class="sh">"</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="nf">dot</span><span class="p">(</span><span class="n">Q</span><span class="p">.</span><span class="n">T</span><span class="p">,</span> <span class="n">Q</span><span class="p">))</span>

<span class="n">eigenvalues</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">linalg</span><span class="p">.</span><span class="nf">eigvals</span><span class="p">(</span><span class="n">S</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Eigenvalues (Positive Definite if all &gt; 0):</span><span class="sh">"</span><span class="p">,</span> <span class="n">eigenvalues</span><span class="p">)</span>
</code></pre></div></div> <p>Special matrices such as identity, diagonal, symmetric, orthogonal, and positive definite matrices are not just mathematical curiosities—they are workhorses behind efficient and stable ML algorithms.</p> <p>The <strong>identity matrix</strong> is used to initialize parameters or serve as a “no-op” transformation. It plays a role in <strong>residual networks</strong> (ResNets), where identity shortcuts help preserve gradients in deep architectures. In <strong>regularization techniques</strong>, the identity matrix appears in terms like \(\lambda I\), added to ensure numerical stability when inverting nearly singular matrices.</p> <p><strong>Diagonal matrices</strong> simplify transformations by applying scaling operations—critical in <strong>feature normalization</strong>, where diagonal matrices can represent per-feature standard deviations or inverse variances. They also arise in eigenvalue decompositions, where the diagonal matrix holds the eigenvalues representing the importance of each principal component or latent feature.</p> <p><strong>Symmetric matrices</strong> dominate <strong>statistics and probabilistic ML</strong>. Covariance matrices are symmetric by definition and reflect the relationships among features. In PCA, the symmetric covariance matrix is decomposed to extract the directions of maximum variance. <strong>Orthogonal matrices</strong>, which preserve inner products, form the basis for <strong>QR decomposition</strong> and <strong>SVD</strong>, enabling dimensionality reduction, whitening transformations, and stable numerical methods. And <strong>positive definite matrices</strong> guarantee convexity in optimization, which is why they’re vital in kernel methods (like in SVMs), <strong>Gaussian processes</strong>, and <strong>regularized regression</strong>.</p> <p>Understanding these special types helps you design models that are faster, more stable, and easier to train—and gives you the vocabulary to interpret the results geometrically.</p> <hr/> <h2 id="block-and-partitioned-matrices">Block and Partitioned Matrices</h2> <p>When working with massive datasets or large models, it often makes sense to split things up. Block matrices let us partition a large matrix into smaller, more manageable pieces:</p> \[A = \begin{bmatrix} A_{11} &amp; A_{12} \\ A_{21} &amp; A_{22} \end{bmatrix}\] <p>This is especially helpful in distributed computing or batch processing, where each submatrix can be processed independently.</p> <p>You can split a matrix into blocks like this:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span>
              <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">],</span>
              <span class="p">[</span><span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">],</span>
              <span class="p">[</span><span class="mi">13</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">16</span><span class="p">]])</span>

<span class="n">A11</span> <span class="o">=</span> <span class="n">A</span><span class="p">[:</span><span class="mi">2</span><span class="p">,</span> <span class="p">:</span><span class="mi">2</span><span class="p">]</span>
<span class="n">A12</span> <span class="o">=</span> <span class="n">A</span><span class="p">[:</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">:]</span>
<span class="n">A21</span> <span class="o">=</span> <span class="n">A</span><span class="p">[</span><span class="mi">2</span><span class="p">:,</span> <span class="p">:</span><span class="mi">2</span><span class="p">]</span>
<span class="n">A22</span> <span class="o">=</span> <span class="n">A</span><span class="p">[</span><span class="mi">2</span><span class="p">:,</span> <span class="mi">2</span><span class="p">:]</span>

<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Block A11:</span><span class="se">\n</span><span class="sh">"</span><span class="p">,</span> <span class="n">A11</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Block A12:</span><span class="se">\n</span><span class="sh">"</span><span class="p">,</span> <span class="n">A12</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Block A21:</span><span class="se">\n</span><span class="sh">"</span><span class="p">,</span> <span class="n">A21</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Block A22:</span><span class="se">\n</span><span class="sh">"</span><span class="p">,</span> <span class="n">A22</span><span class="p">)</span>
</code></pre></div></div> <p>Block matrices offer a powerful abstraction when dealing with <strong>large-scale datasets</strong>, <strong>multi-modal learning</strong>, or <strong>distributed computing</strong>. Rather than operating on an entire matrix at once, we can break it into smaller, logically meaningful parts and process them independently or in parallel.</p> <p>In <strong>mini-batch training</strong>, especially in stochastic gradient descent (SGD), data is already treated as a collection of smaller blocks. Matrix operations are performed on each batch independently, allowing the model to scale to massive datasets without running out of memory.</p> <p>In <strong>multi-view learning</strong> or <strong>multi-task learning</strong>, where different feature sets or targets are grouped by modality or domain, block matrices naturally model these segmented structures. Each block might represent a different view of the same entity—like image features and text descriptions of the same object—and learning proceeds with interactions across blocks.</p> <p>In <strong>Graph ML</strong>, block matrices are used to capture the <strong>community structure</strong> within large graphs. The adjacency matrix of a graph can be partitioned into blocks, each corresponding to a subgraph or cluster, enabling more scalable and interpretable analysis. In <strong>parallel and distributed ML</strong>, partitioning matrices allows data to be distributed across nodes, with operations like block-wise matrix multiplication or block gradient descent running concurrently.</p> <p>Block matrices bring structure and efficiency to matrix computation, helping bridge the gap between mathematical elegance and engineering scalability.</p> <hr/> <h2 id="conclusion">Conclusion</h2> <p>From simple addition to sophisticated transformations, matrices give us a powerful framework to represent and manipulate data in machine learning. Their structure captures everything from raw inputs to learned representations and even the relationships between them. Whether you’re solving a system of equations, rotating vectors, or analyzing massive graphs, the right matrix operation unlocks the magic.</p> <p>In this post, we explored core matrix operations with a focus on their relevance in real ML tasks. This foundation will carry you far—as we dive deeper into eigenvectors, decompositions, and optimization in upcoming chapters of the <em>Math for ML</em> series.</p>]]></content><author><name></name></author><category term="machine-learning"/><category term="math"/><category term="math-for-ml"/><category term="ml"/><category term="ai"/><category term="linear-algebra"/><category term="math"/><summary type="html"><![CDATA[Linear Algebra 2 - Mathematics for Machine Learning]]></summary></entry><entry><title type="html">Linear Algebra Basics for ML - Vector Operations, Norms, and Projections</title><link href="https://joyoshish.github.io/blog/2022/mathforml-linalg1/" rel="alternate" type="text/html" title="Linear Algebra Basics for ML - Vector Operations, Norms, and Projections"/><published>2022-01-13T00:00:00+00:00</published><updated>2022-01-13T00:00:00+00:00</updated><id>https://joyoshish.github.io/blog/2022/mathforml-linalg1</id><content type="html" xml:base="https://joyoshish.github.io/blog/2022/mathforml-linalg1/"><![CDATA[<p>In machine learning, every problem—whether it’s image recognition, natural language processing, or anomaly detection—begins with how we represent data. In this post, we’ll take a deep dive into vectors and vector spaces, exploring the underlying mathematics that enables ML algorithms to learn from data. We’ll follow a problem-driven approach: each section starts with a real-world ML challenge, introduces the mathematical tool needed, explains the theory from the ground up, and concludes with a detailed solution along with Python coding examples and real-world applications in NLP and Computer Vision.</p> <hr/> <h2 id="vector-addition-and-scalar-multiplication">Vector Addition and Scalar Multiplication</h2> <p>Imagine you’re training a neural network. At each step, your model needs to update its parameters—those weights that define how the network behaves. But how exactly are these updates performed? Behind the scenes, you’re combining current weights with gradient information and scaling them based on how much you want to change. This simple operation, which powers the heart of deep learning, relies entirely on vector addition and scalar multiplication.</p> <p>Let’s break it down.</p> <p>A vector \(\mathbf{v}\) in \(\mathbb{R}^n\) is an ordered list of \(n\) real numbers:</p> \[\mathbf{v} = \begin{bmatrix} v_1 \\ v_2 \\ \vdots \\ v_n \end{bmatrix}\] <p>Vectors represent points, directions, or quantities in space—and in machine learning, they can represent feature values, model parameters, or gradients.</p> <p>Adding two vectors \(\mathbf{u}\) and \(\mathbf{v}\) looks like this:</p> \[\mathbf{u} + \mathbf{v} = \begin{bmatrix} u_1 + v_1 \\ u_2 + v_2 \\ \vdots \\ u_n + v_n \end{bmatrix}\] <p>This operation is performed element-wise. You can think of it as combining two data points or updating a parameter by adding the change suggested by a gradient.</p> <p>Now, multiplying a vector by a scalar \(\alpha\) stretches or shrinks it:</p> \[\alpha \mathbf{u} = \begin{bmatrix} \alpha u_1 \\ \alpha u_2 \\ \vdots \\ \alpha u_n \end{bmatrix}\] <p>This changes the length of the vector (its magnitude), but not its direction—unless \(\alpha\) is negative, in which case the vector flips.</p> <p>This brings us to the classic weight update rule in gradient descent:</p> \[\mathbf{w}_{\text{new}} = \mathbf{w}_{\text{old}} - \alpha \nabla \mathbf{w}\] <p>Here, \(\nabla \mathbf{w}\) is the gradient vector, and \(\alpha\) is the learning rate. You’re subtracting a scaled version of the gradient from the current weights—a simple but powerful operation that helps your model learn.</p> <p>Let’s see this in action:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="c1"># Define weight vector and gradient vector
</span><span class="n">weights</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mf">0.5</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.3</span><span class="p">,</span> <span class="mf">0.8</span><span class="p">])</span>
<span class="n">gradients</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mf">0.1</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.05</span><span class="p">,</span> <span class="mf">0.2</span><span class="p">])</span>

<span class="c1"># Update rule using gradient descent (learning rate = 0.1)
</span><span class="n">learning_rate</span> <span class="o">=</span> <span class="mf">0.1</span>
<span class="n">new_weights</span> <span class="o">=</span> <span class="n">weights</span> <span class="o">-</span> <span class="n">learning_rate</span> <span class="o">*</span> <span class="n">gradients</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Updated Weights:</span><span class="sh">"</span><span class="p">,</span> <span class="n">new_weights</span><span class="p">)</span>
</code></pre></div></div> <p>Running this snippet simulates one step of gradient descent. Each component of the weight vector is nudged slightly in the direction opposite to the gradient, scaled by how aggressively you want to learn (i.e., the learning rate).</p> <p>These operations form the computational backbone of most optimization routines in machine learning. For example, gradient descent, stochastic gradient descent (SGD), and their variants (like Adam or RMSProp) all rely on vector addition and scalar multiplication to iteratively update model parameters.</p> <p>In reinforcement learning, policy gradients are updated via vector-based gradient steps to maximize expected returns. In graph neural networks (GNNs), feature propagation across nodes often involves combining node and neighbor vectors—again using addition and scaling operations.</p> <p>Even in time-series forecasting, models like LSTMs and GRUs perform cell updates using vector operations that combine new and past information. These operations are not only simple but also form the atomic operations used to build and train large-scale models across supervised, unsupervised, and self-supervised learning paradigms.</p> <hr/> <h2 id="linear-combinations-span-basis-and-dimensionality">Linear Combinations, Span, Basis, and Dimensionality</h2> <p>In many machine learning applications, especially in domains like text and image processing, the data we work with lives in very high-dimensional spaces. Word embeddings might have 300 dimensions, images can have thousands of pixel values—and all of this contributes to increased computation, memory usage, and sometimes even noise. But do we really need all those dimensions?</p> <p>Often, we don’t. The trick lies in representing high-dimensional data more compactly—without losing the essence of what makes that data useful. To do that, we need to understand the concepts of linear combinations, span, basis, and dimensionality.</p> <p>Let’s start with the basics.</p> <p>A <strong>linear combination</strong> allows us to build a new vector using a set of existing vectors. Suppose we have vectors \(\mathbf{v}_1, \mathbf{v}_2, \dots, \mathbf{v}_k\) in \(\mathbb{R}^n\), then a linear combination is:</p> \[\mathbf{v} = \alpha_1 \mathbf{v}_1 + \alpha_2 \mathbf{v}_2 + \dots + \alpha_k \mathbf{v}_k\] <p>In other words, we scale each vector by a coefficient and add them together.</p> <p>The <strong>span</strong> of a set of vectors is the collection of all possible vectors you can form using linear combinations of those vectors. If your set spans \(\mathbb{R}^n\), then it’s powerful enough to represent any point in that space.</p> <p>Now, when you want the most compact and efficient representation, you need a <strong>basis</strong>: a set of linearly independent vectors that spans the entire space. With a basis, every vector in the space can be uniquely expressed as a linear combination of these basis vectors.</p> <p>The number of vectors in the basis gives us the <strong>dimension</strong> of the space. And in machine learning, reducing this dimensionality—while preserving the most important structure in the data—is exactly what techniques like PCA (Principal Component Analysis) aim to do.</p> <p>PCA finds a new basis where each new vector (called a principal component) captures as much variance in the data as possible. These new basis vectors are orthogonal, and often, you only need the first few to explain most of your data’s structure. This simplifies your dataset, making models faster and potentially more robust.</p> <p>Here’s a quick example of how we can represent a vector using a standard basis:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="c1"># Representing a point in 2D space using the standard basis
</span><span class="n">basis_vectors</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">]])</span>
<span class="n">coefficients</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">])</span>
<span class="n">new_vector</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">dot</span><span class="p">(</span><span class="n">coefficients</span><span class="p">,</span> <span class="n">basis_vectors</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">New Vector from Linear Combination:</span><span class="sh">"</span><span class="p">,</span> <span class="n">new_vector</span><span class="p">)</span>
</code></pre></div></div> <p>This gives us the vector \([3, 4]\) as a combination of the basis vectors \([1, 0]\) and \([0, 1]\).</p> <p>The idea of expressing data using a minimal set of representative directions is ubiquitous in ML. Autoencoders, for instance, learn a compressed latent space—a learned basis—into which input data is encoded and later decoded. This compressed representation reduces dimensionality and noise while preserving the key structure of the input.</p> <p>In signal processing, sparse coding and dictionary learning aim to represent signals as linear combinations of a few basis elements. In finance, factor models such as PCA or ICA are used to explain asset returns through a few economic factors.</p> <p>Dimensionality reduction is also crucial in medical imaging, where thousands of features (pixels or voxels) are compressed into fewer latent variables for classification tasks like tumor detection. In genomics, where gene expression data is high-dimensional, basis discovery helps in clustering, feature selection, and disease classification.</p> <hr/> <h2 id="orthogonality-and-projections">Orthogonality and Projections</h2> <p>Imagine you’re working on a computer vision task and want to compress image data without losing important information. You could reduce the number of features, but how do you ensure you’re keeping the parts that matter?</p> <p>The answer lies in projections. More specifically, <em>orthogonal projections</em> onto lower-dimensional subspaces help us reduce dimensionality while preserving the most important aspects of the data.</p> <p>In math terms, two vectors \(\mathbf{u}\) and \(\mathbf{v}\) are said to be orthogonal if their dot product is zero:</p> \[\mathbf{u} \cdot \mathbf{v} = 0\] <p>This means the vectors point in completely independent directions—think of axes in 3D space.</p> <p>When you project one vector onto another, you’re essentially extracting its component in that direction. The projection of \(\mathbf{u}\) onto \(\mathbf{v}\) is calculated as:</p> \[\text{proj}_{\mathbf{v}}(\mathbf{u}) = \left( \frac{\mathbf{u} \cdot \mathbf{v}}{\|\mathbf{v}\|^2} \right) \mathbf{v}\] <p>This formula plays a major role in Principal Component Analysis (PCA), where data is projected onto orthogonal axes—called principal components—that maximize variance. In simpler terms, PCA finds the directions in which your data varies the most and projects it there, compressing the information without much loss.</p> <p>Here’s a simple example to visualize a projection:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="c1"># Define a data point and a principal component direction
</span><span class="n">data_point</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">])</span>
<span class="n">principal_component</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">])</span>

<span class="c1"># Project the data point onto the principal component
</span><span class="n">proj_scalar</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">dot</span><span class="p">(</span><span class="n">data_point</span><span class="p">,</span> <span class="n">principal_component</span><span class="p">)</span> <span class="o">/</span> <span class="n">np</span><span class="p">.</span><span class="nf">dot</span><span class="p">(</span><span class="n">principal_component</span><span class="p">,</span> <span class="n">principal_component</span><span class="p">)</span>
<span class="n">projection</span> <span class="o">=</span> <span class="n">proj_scalar</span> <span class="o">*</span> <span class="n">principal_component</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Projection of Data Point onto Principal Component:</span><span class="sh">"</span><span class="p">,</span> <span class="n">projection</span><span class="p">)</span>
</code></pre></div></div> <div style="display: flex; justify-content: center;"> <div id="projectionEnhanced"></div> </div> <div id="projectionEnhanced"></div> <script src="https://cdn.plot.ly/plotly-latest.min.js"></script> <script>function arrow(o,r,e,t,a,n=3,i="solid"){return{type:"line",x0:o,y0:r,x1:e,y1:t,line:{color:a,width:n,dash:i},xref:"x",yref:"y"}}const point=[3,4],pc=[1,0],dot=point[0]*pc[0]+point[1]*pc[1],pcNorm2=pc[0]*pc[0]+pc[1]*pc[1],scale=dot/pcNorm2,proj=[scale*pc[0],scale*pc[1]],layout={title:{text:"",font:{size:20}},width:650,height:600,showlegend:!1,plot_bgcolor:"#fcfcfc",paper_bgcolor:"#ffffff",xaxis:{title:"X-axis",range:[-1,5],showgrid:!0,gridcolor:"#eaeaea",zeroline:!0},yaxis:{title:"Y-axis",range:[-1,5],showgrid:!0,gridcolor:"#eaeaea",zeroline:!0},shapes:[arrow(0,0,4.5,0,"orange",2,"dot"),arrow(0,0,point[0],point[1],"blue",4),arrow(0,0,proj[0],proj[1],"green",4),arrow(point[0],point[1],proj[0],proj[1],"gray",2,"dot")],annotations:[{x:point[0],y:point[1],text:"Data Point (3, 4)",showarrow:!0,arrowhead:2,ax:-40,ay:-40,font:{color:"blue",size:14}},{x:proj[0],y:proj[1],text:"Projection (3, 0)",showarrow:!0,arrowhead:2,ax:-20,ay:40,font:{color:"green",size:14}},{x:4.5,y:-.2,text:"Principal Component (PC\u2081)",showarrow:!1,font:{color:"orange",size:13}}]},data=[{type:"scatter",mode:"markers",x:[point[0],proj[0]],y:[point[1],proj[1]],marker:{size:10,color:["blue","green"]}}];Plotly.newPlot("projectionEnhanced",data,layout);</script> <p>Orthogonality is a core concept in many areas of ML that deal with feature decorrelation. For instance, independent component analysis (ICA) extends PCA by aiming for statistically independent (not just uncorrelated) components, which is useful in blind source separation tasks like speech signal decomposition.</p> <p>In computer vision, projections are used in dimensionality reduction pipelines (e.g., PCA, t-SNE, UMAP) to extract visually salient features. Orthogonality also plays a role in orthogonal initialization of deep neural networks, which helps preserve variance and avoid vanishing gradients in very deep architectures.</p> <p>In physics-informed ML and scientific computing, projections are used to map complex nonlinear states into simpler bases for simulation or differential equation modeling. This helps compress high-dimensional simulations like fluid dynamics into learnable latent dynamics.</p> <hr/> <h2 id="vector-norms-and-model-complexity">Vector Norms and Model Complexity</h2> <p>Now suppose you’re training a regression model, and it starts overfitting—performing great on training data but terribly on unseen examples. One common trick to fix this is regularization, which involves penalizing large weights. But that raises a question: how do you actually measure the “size” of a vector?</p> <p>That’s where vector norms come in.</p> <p>The <strong>L1 norm</strong> (also known as the Manhattan norm) sums up the absolute values of all the vector components:</p> \[\|\mathbf{v}\|_1 = \sum_{i=1}^{n} |v_i|\] <p>The <strong>L2 norm</strong> (Euclidean norm) is the straight-line distance from the origin:</p> \[\|\mathbf{v}\|_2 = \sqrt{\sum_{i=1}^{n} v_i^2}\] <p>And the <strong>L∞ norm</strong> captures the largest absolute value in the vector:</p> \[\|\mathbf{v}\|_\infty = \max_i |v_i|\] <p>Each of these norms gives a different perspective on vector size, and each is used in different types of regularization. Lasso regression uses the L1 norm to encourage sparsity (pushing some weights to zero), while Ridge regression uses the L2 norm to shrink all weights evenly. L∞ isn’t as common, but it can be useful when you care about controlling the biggest contributor.</p> <p>Here’s a quick example showing how to calculate all three:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">v</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span>

<span class="n">l1_norm</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">abs</span><span class="p">(</span><span class="n">v</span><span class="p">))</span>
<span class="n">l2_norm</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">sqrt</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="n">v</span> <span class="o">**</span> <span class="mi">2</span><span class="p">))</span>
<span class="n">linf_norm</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">max</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">abs</span><span class="p">(</span><span class="n">v</span><span class="p">))</span>

<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">L1 Norm:</span><span class="sh">"</span><span class="p">,</span> <span class="n">l1_norm</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">L2 Norm:</span><span class="sh">"</span><span class="p">,</span> <span class="n">l2_norm</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">L∞ Norm:</span><span class="sh">"</span><span class="p">,</span> <span class="n">linf_norm</span><span class="p">)</span>
</code></pre></div></div> <p>Regularization using norms is a widely adopted strategy to prevent overfitting and improve generalization. In logistic regression and linear classifiers, L1 and L2 regularization help constrain the coefficient space, thereby simplifying the decision boundary and increasing robustness.</p> <p>In deep learning, the weight decay trick (essentially L2 norm penalty) is used alongside batch normalization and dropout to stabilize training. In federated learning, client updates are sometimes clipped using norm thresholds to avoid noisy or adversarial contributions.</p> <p>Beyond regularization, norms are also used in anomaly detection (e.g., distance from cluster centroids), metric learning (contrastive and triplet losses depend on Euclidean or cosine distances), and adversarial robustness (where L∞, L2, and L1 norms define allowed perturbation bounds). Whether you’re compressing models for edge deployment or defending them against attacks, norms guide and constrain model behavior effectively.</p> <hr/> <h2 id="inner-and-outer-products">Inner and Outer Products</h2> <p>Let’s say you’re building a recommendation engine or clustering users based on their behavior. One of the first things you’ll need to do is measure how similar two data points are. But how do you quantify “similarity” in a vector space?</p> <p>That’s where the <strong>inner product</strong> comes in.</p> <p>Given two vectors \(\mathbf{u}\) and \(\mathbf{v}\), the inner product (or dot product) is:</p> \[\mathbf{u} \cdot \mathbf{v} = \sum_{i=1}^{n} u_i v_i\] <p>If the result is large, it means the vectors are pointing in similar directions—i.e., they are similar. In fact, this is the basis for cosine similarity, a widely used metric in NLP for comparing word vectors.</p> <p>On the other hand, the <strong>outer product</strong> builds a full matrix of interactions between two vectors. For \(\mathbf{u} \in \mathbb{R}^m\) and \(\mathbf{v} \in \mathbb{R}^n\), the outer product looks like this:</p> \[\mathbf{u} \otimes \mathbf{v} = \begin{bmatrix} u_1v_1 &amp; u_1v_2 &amp; \cdots &amp; u_1v_n \\ u_2v_1 &amp; u_2v_2 &amp; \cdots &amp; u_2v_n \\ \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\ u_mv_1 &amp; u_mv_2 &amp; \cdots &amp; u_mv_n \\ \end{bmatrix}\] <p>While the inner product gives us a single similarity score, the outer product creates a full interaction map—useful when we want to understand how features influence each other.</p> <p>Here’s how to compute both in Python:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">u</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">])</span>
<span class="n">v</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">])</span>

<span class="c1"># Inner product: similarity
</span><span class="n">inner_product</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">dot</span><span class="p">(</span><span class="n">u</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Inner Product:</span><span class="sh">"</span><span class="p">,</span> <span class="n">inner_product</span><span class="p">)</span>

<span class="c1"># Outer product: interaction matrix
</span><span class="n">outer_product</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">outer</span><span class="p">(</span><span class="n">u</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Outer Product:</span><span class="se">\n</span><span class="sh">"</span><span class="p">,</span> <span class="n">outer_product</span><span class="p">)</span>
</code></pre></div></div> <p>The inner product is at the heart of similarity calculations across many algorithms—whether it’s comparing embeddings in a semantic space or computing attention weights in transformers. Cosine similarity, a normalized inner product, is frequently used in clustering, information retrieval, and question-answering systems.</p> <p>In kernel methods, such as support vector machines (SVMs), the inner product is generalized into kernel functions to measure similarity in high-dimensional (sometimes infinite-dimensional) spaces. The outer product, on the other hand, forms the basis of covariance matrices, used in PCA, Gaussian processes, and multivariate statistics.</p> <p>In deep learning, attention mechanisms use scaled dot-product attention, which essentially involves outer products to compute weighted combinations across key-query-value triplets. Outer products are also fundamental to tensor factorization and bilinear pooling methods used in multi-modal learning, such as combining image and text inputs in visual question answering (VQA).</p> <hr/> <p>From updating model parameters with gradient descent to compressing high-dimensional data, measuring vector magnitudes, and analyzing feature interactions—vectors and vector spaces are the hidden framework behind much of machine learning.</p> <p>These mathematical ideas may seem abstract at first, but they solve incredibly concrete problems. They power dimensionality reduction in PCA, make regularization work in regression models, and drive similarity searches in recommendation engines and NLP systems.</p> <p>If you’ve followed along this far, you’ve just walked through the foundational math that makes many machine learning techniques possible. And we’re just getting started—these concepts will show up again and again as we explore more advanced topics in the Math for ML series.</p>]]></content><author><name></name></author><category term="machine-learning"/><category term="math"/><category term="math-for-ml"/><category term="ml"/><category term="ai"/><category term="linear-algebra"/><category term="math"/><summary type="html"><![CDATA[Linear Algebra 1 - Mathematics for Machine Learning]]></summary></entry><entry><title type="html">k-means++ অ্যালগরিদম</title><link href="https://joyoshish.github.io/blog/2020/k-means/" rel="alternate" type="text/html" title="k-means++ অ্যালগরিদম"/><published>2020-08-07T15:27:12+00:00</published><updated>2020-08-07T15:27:12+00:00</updated><id>https://joyoshish.github.io/blog/2020/k-means-</id><content type="html" xml:base="https://joyoshish.github.io/blog/2020/k-means/"><![CDATA[]]></content><author><name></name></author></entry></feed>